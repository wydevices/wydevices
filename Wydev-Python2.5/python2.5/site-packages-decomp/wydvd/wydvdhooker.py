# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 0
n 0(None)[TimerHookProxy.__init__(self, *args, **kwds)
print >> self._file, '#!/usr/bin/python2.5\nfrom wydvd import Wydvd\nfrom wydvd.dvdchecker import *\nimport time\nimport sys\n'
print >> self._file, '%s = Wydvd()' % self._objname
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb771f98c>}
nname: 39
n 39(None)[]:
	i: 12(), 38()
	o: 

nname: 38
n 38(None)[]:
	i: 0(f)
	o: 39()

nname: 12
n 12(None)[TimerHookProxy._pre(self, name, *args, **kwds)
]:
	i: 0(t)
	o: 39()

nname: 0
n 0(name != 'register_callback')[]:
	i: 
	o: 12(t), 38(f)

nname: 0
n 0(None)[if name != 'register_callback':
	TimerHookProxy._pre(self, name, *args, **kwds)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb771f98c>}
nname: 100
n 100(None)[]:
	i: 49(), 99()
	o: 

nname: 99
n 99(None)[]:
	i: 0(f)
	o: 100()

nname: 49
n 49(None)[rval = kwds['rval_intercepted']
print >> self._file, 'check_%s(rval, %s)' % (name.split('get_')[-1], rval)
]:
	i: 0(t)
	o: 100()

nname: 0
n 0(len(name.split('get_')) > 1)[TimerHookProxy._post(self, name, *args, **kwds)
]:
	i: 
	o: 49(t), 99(f)

nname: 0
n 0(None)[TimerHookProxy._post(self, name, *args, **kwds)
if len(name.split('get_')) > 1:
	rval = kwds['rval_intercepted']
	print >> self._file, 'check_%s(rval, %s)' % (name.split('get_')[-1], rval)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb771fd0c>}
nname: 6
n 6(None)[__doc__ = 'Proxy for WyDVD'
def __init__(self, *args, **args):
	TimerHookProxy.__init__(self, *args, **kwds)
	print >> self._file, '#!/usr/bin/python2.5\nfrom wydvd import Wydvd\nfrom wydvd.dvdchecker import *\nimport time\nimport sys\n'
	print >> self._file, '%s = Wydvd()' % self._objname

def _pre(self, name, *args, **args):
	if name != 'register_callback':
		TimerHookProxy._pre(self, name, *args, **kwds)

def _post(self, name, *args, **args):
	TimerHookProxy._post(self, name, *args, **kwds)
	if len(name.split('get_')) > 1:
		rval = kwds['rval_intercepted']
		print >> self._file, 'check_%s(rval, %s)' % (name.split('get_')[-1], rval)

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb7717f6c>}
nname: 0
n 0(None)[from __future__ import absolute_import
from wydvd.timerhooker import TimerHookProxy
__all__ = ['WydvdHookProxy']
class WydvdHookProxy(TimerHookProxy):
	__doc__ = 'Proxy for WyDVD'
	def __init__(self, *args, **args):
		TimerHookProxy.__init__(self, *args, **kwds)
		print >> self._file, '#!/usr/bin/python2.5\nfrom wydvd import Wydvd\nfrom wydvd.dvdchecker import *\nimport time\nimport sys\n'
		print >> self._file, '%s = Wydvd()' % self._objname

	def _pre(self, name, *args, **args):
		if name != 'register_callback':
			TimerHookProxy._pre(self, name, *args, **kwds)

	def _post(self, name, *args, **args):
		TimerHookProxy._post(self, name, *args, **kwds)
		if len(name.split('get_')) > 1:
			rval = kwds['rval_intercepted']
			print >> self._file, 'check_%s(rval, %s)' % (name.split('get_')[-1], rval)



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb77178ec>}
from __future__ import absolute_import
from wydvd.timerhooker import TimerHookProxy
__all__ = ['WydvdHookProxy']
class WydvdHookProxy(TimerHookProxy):
	__doc__ = 'Proxy for WyDVD'
	def __init__(self, *args, **args):
		TimerHookProxy.__init__(self, *args, **kwds)
		print >> self._file, '#!/usr/bin/python2.5\nfrom wydvd import Wydvd\nfrom wydvd.dvdchecker import *\nimport time\nimport sys\n'
		print >> self._file, '%s = Wydvd()' % self._objname

	def _pre(self, name, *args, **args):
		if name != 'register_callback':
			TimerHookProxy._pre(self, name, *args, **kwds)

	def _post(self, name, *args, **args):
		TimerHookProxy._post(self, name, *args, **kwds)
		if len(name.split('get_')) > 1:
			rval = kwds['rval_intercepted']
			print >> self._file, 'check_%s(rval, %s)' % (name.split('get_')[-1], rval)



