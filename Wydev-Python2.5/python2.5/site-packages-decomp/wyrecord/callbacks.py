# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 0
n 0(None)[self.recording_event = CallbackServer()
self.disk_space_alert = CallbackServer()
self.new_present_epg = wyscan.newExternEpgAvailableCallback
self.device_signal = wyscan.deviceSignalCallback
self.service_update = wyscan.serviceUpdateCallback
self.macrovision = wyscan.macrovision
self.pmt_updated = wyscan.pmtUpdatedCallback
self.pat_updated = wyscan.patUpdatedCallback
self.scan_progression = wyscan.scanProgression
self.start_playing = CallbackServer()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76bcf4c>}
nname: 6
n 6(None)[__doc__ = '\n    for all callbacks:\n        callback_name.register(your_method_handler)\n        callback_name.unregister(your_method_handler)\n\n    ### callback related to schedules: ###\n    \n    recording_event:       => inform about states change of scheduled and instant_record recording\n                           => replace DEPRECATED: RegisterRecordingEventCallback, UnregisterRecordingEventCallback, callbacksRecordingStatus \n                     \n                     notify(RECORDING_EVENT_RECORD_GOING_TO_START, recording, AdjustTimeForRec_object, list_of_live_to_stop)\n                     notify(RECORDING_EVENT_RECORD_DISK_SPACE_START_ERROR, recording, None)\n                     notify(RECORDING_EVENT_RECORD_START_ERROR, recording, None)\n                     notify(RECORDING_EVENT_RECORD_STARTED, recording, None)\n                     notify(RECORDING_EVENT_RECORD_STOPPED, recording, None)\n                     notify(RECORDING_EVENT_RECORD_MACROVISION_STOP_ERROR, recording, None)\n                     notify(RECORDING_EVENT_RECORD_MACROVISION_START_ERROR, recording, None)\n                     \n                     \n\n    disk_space_alert:      => inform when there is not enough space to finish running recording\n                           => replace DEPRECATED: RegisterRecordingDiskSpaceAlert, UnregisterRecordingDiskSpaceAlert, callbackDiskSpaceAlert\n    \n                     notify(needed_space, available_space, timeshift_percentage_size) \n\n\n    ### callback present following  ###\n    \n    new_present_epg:        => inform that current epg as changed (from the player)\n                            => replace DEPRECATED: newExternEpgAvailableCallback\n\n                     notify(program_id, dbus_player_path)\n   \n        you can get the complete epg from the given program_id as follow:\n        print live_controller.getEPGFromProgramId(program_id)\n\n\n    ### callback related to live playing status ###\n    \n    start_playing:        => inform that the player start to play a new live\n                    notify(renderer_instance, live_instance)\n        \n        renderer_instance: useful when more than one player instance are used (not possible for now) \n        live_instance: the live being start_ted to play (live.Live object)\n        \n        \n    ### channels update\n    \n    service_update: \n    \n        arg 1:\n           device_id\n        arg 2:\n            list \n            [ [  channel_id,\n                 channel_name,\n                 channel_number,\n                 channel_type,\n                 channel_update_reason   ] , ...,]\n        \n        channel_update_reason possible values :\n            UPDATE_SERVICE_REMOVED  = 0\n            UPDATE_SERVICE_ADDED    = 1\n            UPDATE_SERVICE_UPDATED  = 2\n            \n        arg 3:\n            tp_info\n            [ signal_noise_ratio,\n              signal_strength,\n              freq ]\n              \n              \n                 \n    ### scan\n    \n    scan_progression:\n    arg 1: TP_index\n    arg 2: TP_list_size\n    arg 3: signal_strength\n    arg 4: signal_noise_ratio\n'
__metaclass__ = MetaSingleton
def __init__(self, wyscan):
	self.recording_event = CallbackServer()
	self.disk_space_alert = CallbackServer()
	self.new_present_epg = wyscan.newExternEpgAvailableCallback
	self.device_signal = wyscan.deviceSignalCallback
	self.service_update = wyscan.serviceUpdateCallback
	self.macrovision = wyscan.macrovision
	self.pmt_updated = wyscan.pmtUpdatedCallback
	self.pat_updated = wyscan.patUpdatedCallback
	self.scan_progression = wyscan.scanProgression
	self.start_playing = CallbackServer()

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb76bc78c>}
nname: 0
n 0(None)[from peewee.misc_utils import MetaSingleton
from WyScan import CallbackServer
UPDATE_SERVICE_ADDED = 1
UPDATE_SERVICE_UPDATED = 2
UPDATE_SERVICE_REMOVED = 0
class Callbacks(object):
	__doc__ = '\n    for all callbacks:\n        callback_name.register(your_method_handler)\n        callback_name.unregister(your_method_handler)\n\n    ### callback related to schedules: ###\n    \n    recording_event:       => inform about states change of scheduled and instant_record recording\n                           => replace DEPRECATED: RegisterRecordingEventCallback, UnregisterRecordingEventCallback, callbacksRecordingStatus \n                     \n                     notify(RECORDING_EVENT_RECORD_GOING_TO_START, recording, AdjustTimeForRec_object, list_of_live_to_stop)\n                     notify(RECORDING_EVENT_RECORD_DISK_SPACE_START_ERROR, recording, None)\n                     notify(RECORDING_EVENT_RECORD_START_ERROR, recording, None)\n                     notify(RECORDING_EVENT_RECORD_STARTED, recording, None)\n                     notify(RECORDING_EVENT_RECORD_STOPPED, recording, None)\n                     notify(RECORDING_EVENT_RECORD_MACROVISION_STOP_ERROR, recording, None)\n                     notify(RECORDING_EVENT_RECORD_MACROVISION_START_ERROR, recording, None)\n                     \n                     \n\n    disk_space_alert:      => inform when there is not enough space to finish running recording\n                           => replace DEPRECATED: RegisterRecordingDiskSpaceAlert, UnregisterRecordingDiskSpaceAlert, callbackDiskSpaceAlert\n    \n                     notify(needed_space, available_space, timeshift_percentage_size) \n\n\n    ### callback present following  ###\n    \n    new_present_epg:        => inform that current epg as changed (from the player)\n                            => replace DEPRECATED: newExternEpgAvailableCallback\n\n                     notify(program_id, dbus_player_path)\n   \n        you can get the complete epg from the given program_id as follow:\n        print live_controller.getEPGFromProgramId(program_id)\n\n\n    ### callback related to live playing status ###\n    \n    start_playing:        => inform that the player start to play a new live\n                    notify(renderer_instance, live_instance)\n        \n        renderer_instance: useful when more than one player instance are used (not possible for now) \n        live_instance: the live being start_ted to play (live.Live object)\n        \n        \n    ### channels update\n    \n    service_update: \n    \n        arg 1:\n           device_id\n        arg 2:\n            list \n            [ [  channel_id,\n                 channel_name,\n                 channel_number,\n                 channel_type,\n                 channel_update_reason   ] , ...,]\n        \n        channel_update_reason possible values :\n            UPDATE_SERVICE_REMOVED  = 0\n            UPDATE_SERVICE_ADDED    = 1\n            UPDATE_SERVICE_UPDATED  = 2\n            \n        arg 3:\n            tp_info\n            [ signal_noise_ratio,\n              signal_strength,\n              freq ]\n              \n              \n                 \n    ### scan\n    \n    scan_progression:\n    arg 1: TP_index\n    arg 2: TP_list_size\n    arg 3: signal_strength\n    arg 4: signal_noise_ratio\n'
	__metaclass__ = MetaSingleton
	def __init__(self, wyscan):
		self.recording_event = CallbackServer()
		self.disk_space_alert = CallbackServer()
		self.new_present_epg = wyscan.newExternEpgAvailableCallback
		self.device_signal = wyscan.deviceSignalCallback
		self.service_update = wyscan.serviceUpdateCallback
		self.macrovision = wyscan.macrovision
		self.pmt_updated = wyscan.pmtUpdatedCallback
		self.pat_updated = wyscan.patUpdatedCallback
		self.scan_progression = wyscan.scanProgression
		self.start_playing = CallbackServer()



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7735d8c>}
from peewee.misc_utils import MetaSingleton
from WyScan import CallbackServer
UPDATE_SERVICE_ADDED = 1
UPDATE_SERVICE_UPDATED = 2
UPDATE_SERVICE_REMOVED = 0
class Callbacks(object):
	__doc__ = '\n    for all callbacks:\n        callback_name.register(your_method_handler)\n        callback_name.unregister(your_method_handler)\n\n    ### callback related to schedules: ###\n    \n    recording_event:       => inform about states change of scheduled and instant_record recording\n                           => replace DEPRECATED: RegisterRecordingEventCallback, UnregisterRecordingEventCallback, callbacksRecordingStatus \n                     \n                     notify(RECORDING_EVENT_RECORD_GOING_TO_START, recording, AdjustTimeForRec_object, list_of_live_to_stop)\n                     notify(RECORDING_EVENT_RECORD_DISK_SPACE_START_ERROR, recording, None)\n                     notify(RECORDING_EVENT_RECORD_START_ERROR, recording, None)\n                     notify(RECORDING_EVENT_RECORD_STARTED, recording, None)\n                     notify(RECORDING_EVENT_RECORD_STOPPED, recording, None)\n                     notify(RECORDING_EVENT_RECORD_MACROVISION_STOP_ERROR, recording, None)\n                     notify(RECORDING_EVENT_RECORD_MACROVISION_START_ERROR, recording, None)\n                     \n                     \n\n    disk_space_alert:      => inform when there is not enough space to finish running recording\n                           => replace DEPRECATED: RegisterRecordingDiskSpaceAlert, UnregisterRecordingDiskSpaceAlert, callbackDiskSpaceAlert\n    \n                     notify(needed_space, available_space, timeshift_percentage_size) \n\n\n    ### callback present following  ###\n    \n    new_present_epg:        => inform that current epg as changed (from the player)\n                            => replace DEPRECATED: newExternEpgAvailableCallback\n\n                     notify(program_id, dbus_player_path)\n   \n        you can get the complete epg from the given program_id as follow:\n        print live_controller.getEPGFromProgramId(program_id)\n\n\n    ### callback related to live playing status ###\n    \n    start_playing:        => inform that the player start to play a new live\n                    notify(renderer_instance, live_instance)\n        \n        renderer_instance: useful when more than one player instance are used (not possible for now) \n        live_instance: the live being start_ted to play (live.Live object)\n        \n        \n    ### channels update\n    \n    service_update: \n    \n        arg 1:\n           device_id\n        arg 2:\n            list \n            [ [  channel_id,\n                 channel_name,\n                 channel_number,\n                 channel_type,\n                 channel_update_reason   ] , ...,]\n        \n        channel_update_reason possible values :\n            UPDATE_SERVICE_REMOVED  = 0\n            UPDATE_SERVICE_ADDED    = 1\n            UPDATE_SERVICE_UPDATED  = 2\n            \n        arg 3:\n            tp_info\n            [ signal_noise_ratio,\n              signal_strength,\n              freq ]\n              \n              \n                 \n    ### scan\n    \n    scan_progression:\n    arg 1: TP_index\n    arg 2: TP_list_size\n    arg 3: signal_strength\n    arg 4: signal_noise_ratio\n'
	__metaclass__ = MetaSingleton
	def __init__(self, wyscan):
		self.recording_event = CallbackServer()
		self.disk_space_alert = CallbackServer()
		self.new_present_epg = wyscan.newExternEpgAvailableCallback
		self.device_signal = wyscan.deviceSignalCallback
		self.service_update = wyscan.serviceUpdateCallback
		self.macrovision = wyscan.macrovision
		self.pmt_updated = wyscan.pmtUpdatedCallback
		self.pat_updated = wyscan.patUpdatedCallback
		self.scan_progression = wyscan.scanProgression
		self.start_playing = CallbackServer()



