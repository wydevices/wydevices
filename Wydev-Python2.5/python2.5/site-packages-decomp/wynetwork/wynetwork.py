# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 0
n 0(None)[self._wdb = wynetwork_dbus
self._met = self._wdb.reference(service, objectPath, ifaceGeneral)
self._IsConnected = self._met.method('IsConnected', '', 'b')
self._Sleep = self._met.method('Sleep', '', 'i')
self._WakeUp = self._met.method('WakeUp', '', 'i')
self._sig = self._wdb.instance(objectPath)
self._sig.signal('Connected', '', self.onConnected, 0)
self._sig.signal('Disconnected', '', self.onDisconnected, 0)
self._obs = []
log.info('Initialized %s interface proxy', ifaceGeneral)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760ae6c>}
nname: 0
n 0(None)[self._obs.append(obs)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a64c>}
nname: 0
n 0(None)[self._obs.remove(obs)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a66c>}
nname: 74
n 74(None)[]:
	i: 0(AL), 73()
	o: 

nname: 73
n 73(None)[]:
	i: 3(AF), 70()
	o: 74()

nname: 70
n 70(None)[]:
	i: 68(AE)
	o: 73()

nname: 68
n 68(None)[]:
	i: 33(f), 43()
	o: 70(AE)

nname: 43
n 43(None)[#, e
log.warn('Error calling observer method onConnected: %s', e)
continue
]:
	i: 33(t)
	o: 68()

nname: 33
n 33(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 13(except), 19()
	o: 43(t), 68(f)

nname: 19
n 19(None)[o.onConnected()
continue
]:
	i: 13(try)
	o: 33()

nname: 13
n 13(None)[for o in self._obs:
]:
	i: 3(for)
	o: 19(try), 33(except)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 73(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 74(AL)

nname: 74
n 74(None)[]:
	i: 0(AL), 3(AF), 33(AE)
	o: 

nname: 33
n 33(None)[except Exception, e:
	log.warn('Error calling observer method onConnected: %s', e)
	continue
]:
	i: 13()
	o: 74(AE)

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onConnected()
	continue
]:
	i: 3(for)
	o: 33()

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 74(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 74(AL)

nname: 74
n 74(None)[]:
	i: 0(AL), 3(AF), 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onConnected()
	continue
except Exception, e:
	log.warn('Error calling observer method onConnected: %s', e)
	continue
]:
	i: 3(for)
	o: 74(AE)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 74(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 74(AL)

nname: 74
n 74(None)[]:
	i: 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
	try:
		o.onConnected()
		continue
	except Exception, e:
		log.warn('Error calling observer method onConnected: %s', e)
		continue
]:
	i: 0(for)
	o: 74(AE)

nname: 0
n 0(None)[]:
	i: 
	o: 13(for)

nname: 74
n 74(None)[]:
	i: 0(AE)
	o: 

nname: 0
n 0(None)[for o in self._obs:
	try:
		o.onConnected()
		continue
	except Exception, e:
		log.warn('Error calling observer method onConnected: %s', e)
		continue
]:
	i: 
	o: 74(AE)

self.nodes: {0: <unpyclib.structure.node instance at 0xb760acec>, 74: <unpyclib.structure.node instance at 0xb760a88c>}
nname: 74
n 74(None)[]:
	i: 0(AL), 73()
	o: 

nname: 73
n 73(None)[]:
	i: 3(AF), 70()
	o: 74()

nname: 70
n 70(None)[]:
	i: 68(AE)
	o: 73()

nname: 68
n 68(None)[]:
	i: 33(f), 43()
	o: 70(AE)

nname: 43
n 43(None)[#, e
log.warn('Error calling observer method onDisconnected: %s', e)
continue
]:
	i: 33(t)
	o: 68()

nname: 33
n 33(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 13(except), 19()
	o: 43(t), 68(f)

nname: 19
n 19(None)[o.onDisconnected()
continue
]:
	i: 13(try)
	o: 33()

nname: 13
n 13(None)[for o in self._obs:
]:
	i: 3(for)
	o: 19(try), 33(except)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 73(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 74(AL)

nname: 74
n 74(None)[]:
	i: 0(AL), 3(AF), 33(AE)
	o: 

nname: 33
n 33(None)[except Exception, e:
	log.warn('Error calling observer method onDisconnected: %s', e)
	continue
]:
	i: 13()
	o: 74(AE)

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDisconnected()
	continue
]:
	i: 3(for)
	o: 33()

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 74(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 74(AL)

nname: 74
n 74(None)[]:
	i: 0(AL), 3(AF), 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDisconnected()
	continue
except Exception, e:
	log.warn('Error calling observer method onDisconnected: %s', e)
	continue
]:
	i: 3(for)
	o: 74(AE)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 74(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 74(AL)

nname: 74
n 74(None)[]:
	i: 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
	try:
		o.onDisconnected()
		continue
	except Exception, e:
		log.warn('Error calling observer method onDisconnected: %s', e)
		continue
]:
	i: 0(for)
	o: 74(AE)

nname: 0
n 0(None)[]:
	i: 
	o: 13(for)

nname: 74
n 74(None)[]:
	i: 0(AE)
	o: 

nname: 0
n 0(None)[for o in self._obs:
	try:
		o.onDisconnected()
		continue
	except Exception, e:
		log.warn('Error calling observer method onDisconnected: %s', e)
		continue
]:
	i: 
	o: 74(AE)

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a86c>, 74: <unpyclib.structure.node instance at 0xb760af6c>}
nname: 54
n 54(None)[return False
]:
	i: 3(), 27(), 52(AE)
	o: 

nname: 52
n 52(None)[]:
	i: 17(f)
	o: 54(AE)

nname: 27
n 27(None)[#, e
log.warn('Failed to call IsConnected: %s', e)
]:
	i: 17(t)
	o: 54()

nname: 17
n 17(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 27(t), 52(f)

nname: 3
n 3(None)[return self._IsConnected()
]:
	i: 0(try)
	o: 54()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 17(except)

nname: 17
n 17(None)[except Exception, e:
	log.warn('Failed to call IsConnected: %s', e)
return False
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._IsConnected()
]:
	i: 
	o: 17()

nname: 0
n 0(None)[try:
	return self._IsConnected()
except Exception, e:
	log.warn('Failed to call IsConnected: %s', e)
return False
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a5ac>}
nname: 54
n 54(None)[return 0
]:
	i: 3(), 27(), 52(AE)
	o: 

nname: 52
n 52(None)[]:
	i: 17(f)
	o: 54(AE)

nname: 27
n 27(None)[#, e
log.warn('Failed to call Sleep: %s', e)
]:
	i: 17(t)
	o: 54()

nname: 17
n 17(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 27(t), 52(f)

nname: 3
n 3(None)[return self._Sleep()
]:
	i: 0(try)
	o: 54()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 17(except)

nname: 17
n 17(None)[except Exception, e:
	log.warn('Failed to call Sleep: %s', e)
return 0
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._Sleep()
]:
	i: 
	o: 17()

nname: 0
n 0(None)[try:
	return self._Sleep()
except Exception, e:
	log.warn('Failed to call Sleep: %s', e)
return 0
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a5ac>}
nname: 54
n 54(None)[return 0
]:
	i: 3(), 27(), 52(AE)
	o: 

nname: 52
n 52(None)[]:
	i: 17(f)
	o: 54(AE)

nname: 27
n 27(None)[#, e
log.warn('Failed to call WakeUp: %s', e)
]:
	i: 17(t)
	o: 54()

nname: 17
n 17(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 27(t), 52(f)

nname: 3
n 3(None)[return self._WakeUp()
]:
	i: 0(try)
	o: 54()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 17(except)

nname: 17
n 17(None)[except Exception, e:
	log.warn('Failed to call WakeUp: %s', e)
return 0
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._WakeUp()
]:
	i: 
	o: 17()

nname: 0
n 0(None)[try:
	return self._WakeUp()
except Exception, e:
	log.warn('Failed to call WakeUp: %s', e)
return 0
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a5ac>}
nname: 6
n 6(None)[__metaclass__ = MetaSingleton
def __init__(self):
	self._wdb = wynetwork_dbus
	self._met = self._wdb.reference(service, objectPath, ifaceGeneral)
	self._IsConnected = self._met.method('IsConnected', '', 'b')
	self._Sleep = self._met.method('Sleep', '', 'i')
	self._WakeUp = self._met.method('WakeUp', '', 'i')
	self._sig = self._wdb.instance(objectPath)
	self._sig.signal('Connected', '', self.onConnected, 0)
	self._sig.signal('Disconnected', '', self.onDisconnected, 0)
	self._obs = []
	log.info('Initialized %s interface proxy', ifaceGeneral)

def attach(self, obs):
	self._obs.append(obs)

def detach(self, obs):
	self._obs.remove(obs)

def onConnected(self):
	for o in self._obs:
		try:
			o.onConnected()
			continue
		except Exception, e:
			log.warn('Error calling observer method onConnected: %s', e)
			continue

def onDisconnected(self):
	for o in self._obs:
		try:
			o.onDisconnected()
			continue
		except Exception, e:
			log.warn('Error calling observer method onDisconnected: %s', e)
			continue

def isConnected(self):
	try:
		return self._IsConnected()
	except Exception, e:
		log.warn('Failed to call IsConnected: %s', e)
	return False

def sleep(self):
	try:
		return self._Sleep()
	except Exception, e:
		log.warn('Failed to call Sleep: %s', e)
	return 0

def wakeUp(self):
	try:
		return self._WakeUp()
	except Exception, e:
		log.warn('Failed to call WakeUp: %s', e)
	return 0

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb7602ecc>}
nname: 0
n 0(None)[self._wdb = wynetwork_dbus
self._met = self._wdb.reference(service, objectPath, ifaceDevices)
self._GetDevices = self._met.method('GetDevices', '', 'as')
self._GetDeviceInfos = self._met.method('GetDeviceInfos', 's', 'a{ss}')
self._IsDeviceConnected = self._met.method('IsDeviceConnected', 's', 'b')
self._SetScanningEnabled = self._met.method('SetScanningEnabled', 'sb', 'b')
self._sig = self._wdb.instance(objectPath)
self._sig.signal('DeviceAdded', 's', self.onDeviceAdded, 0)
self._sig.signal('DeviceRemoved', 's', self.onDeviceRemoved, 0)
self._sig.signal('DeviceConnected', 's', self.onDeviceConnected, 0)
self._sig.signal('DeviceDisconnected', 's', self.onDeviceDisconnected, 0)
self._sig.signal('DeviceConnecting', 's', self.onDeviceConnecting, 0)
self._sig.signal('DeviceConnectionFailed', 's', self.onDeviceConnectionFailed, 0)
self._obs = []
log.info('Initialized %s interface proxy', ifaceDevices)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760efec>}
nname: 0
n 0(None)[self._obs.append(obs)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a8ec>}
nname: 0
n 0(None)[self._obs.remove(obs)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760af6c>}
nname: 77
n 77(None)[]:
	i: 0(AL), 76()
	o: 

nname: 76
n 76(None)[]:
	i: 3(AF), 73()
	o: 77()

nname: 73
n 73(None)[]:
	i: 71(AE)
	o: 76()

nname: 71
n 71(None)[]:
	i: 36(f), 46()
	o: 73(AE)

nname: 46
n 46(None)[#, e
log.warn('Error calling observer method onDeviceAdded: %s', e)
continue
]:
	i: 36(t)
	o: 71()

nname: 36
n 36(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 13(except), 19()
	o: 46(t), 71(f)

nname: 19
n 19(None)[o.onDeviceAdded(obj)
continue
]:
	i: 13(try)
	o: 36()

nname: 13
n 13(None)[for o in self._obs:
]:
	i: 3(for)
	o: 19(try), 36(except)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 76(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 36(AE)
	o: 

nname: 36
n 36(None)[except Exception, e:
	log.warn('Error calling observer method onDeviceAdded: %s', e)
	continue
]:
	i: 13()
	o: 77(AE)

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceAdded(obj)
	continue
]:
	i: 3(for)
	o: 36()

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceAdded(obj)
	continue
except Exception, e:
	log.warn('Error calling observer method onDeviceAdded: %s', e)
	continue
]:
	i: 3(for)
	o: 77(AE)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
	try:
		o.onDeviceAdded(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceAdded: %s', e)
		continue
]:
	i: 0(for)
	o: 77(AE)

nname: 0
n 0(None)[]:
	i: 
	o: 13(for)

nname: 77
n 77(None)[]:
	i: 0(AE)
	o: 

nname: 0
n 0(None)[for o in self._obs:
	try:
		o.onDeviceAdded(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceAdded: %s', e)
		continue
]:
	i: 
	o: 77(AE)

self.nodes: {0: <unpyclib.structure.node instance at 0xb760e64c>, 77: <unpyclib.structure.node instance at 0xb760eb2c>}
nname: 77
n 77(None)[]:
	i: 0(AL), 76()
	o: 

nname: 76
n 76(None)[]:
	i: 3(AF), 73()
	o: 77()

nname: 73
n 73(None)[]:
	i: 71(AE)
	o: 76()

nname: 71
n 71(None)[]:
	i: 36(f), 46()
	o: 73(AE)

nname: 46
n 46(None)[#, e
log.warn('Error calling observer method onDeviceRemoved: %s', e)
continue
]:
	i: 36(t)
	o: 71()

nname: 36
n 36(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 13(except), 19()
	o: 46(t), 71(f)

nname: 19
n 19(None)[o.onDeviceRemoved(obj)
continue
]:
	i: 13(try)
	o: 36()

nname: 13
n 13(None)[for o in self._obs:
]:
	i: 3(for)
	o: 19(try), 36(except)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 76(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 36(AE)
	o: 

nname: 36
n 36(None)[except Exception, e:
	log.warn('Error calling observer method onDeviceRemoved: %s', e)
	continue
]:
	i: 13()
	o: 77(AE)

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceRemoved(obj)
	continue
]:
	i: 3(for)
	o: 36()

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceRemoved(obj)
	continue
except Exception, e:
	log.warn('Error calling observer method onDeviceRemoved: %s', e)
	continue
]:
	i: 3(for)
	o: 77(AE)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
	try:
		o.onDeviceRemoved(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceRemoved: %s', e)
		continue
]:
	i: 0(for)
	o: 77(AE)

nname: 0
n 0(None)[]:
	i: 
	o: 13(for)

nname: 77
n 77(None)[]:
	i: 0(AE)
	o: 

nname: 0
n 0(None)[for o in self._obs:
	try:
		o.onDeviceRemoved(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceRemoved: %s', e)
		continue
]:
	i: 
	o: 77(AE)

self.nodes: {0: <unpyclib.structure.node instance at 0xb760ed2c>, 77: <unpyclib.structure.node instance at 0xb760e2ac>}
nname: 77
n 77(None)[]:
	i: 0(AL), 76()
	o: 

nname: 76
n 76(None)[]:
	i: 3(AF), 73()
	o: 77()

nname: 73
n 73(None)[]:
	i: 71(AE)
	o: 76()

nname: 71
n 71(None)[]:
	i: 36(f), 46()
	o: 73(AE)

nname: 46
n 46(None)[#, e
log.warn('Error calling observer method onDeviceAdded: %s', e)
continue
]:
	i: 36(t)
	o: 71()

nname: 36
n 36(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 13(except), 19()
	o: 46(t), 71(f)

nname: 19
n 19(None)[o.onDeviceConnected(obj)
continue
]:
	i: 13(try)
	o: 36()

nname: 13
n 13(None)[for o in self._obs:
]:
	i: 3(for)
	o: 19(try), 36(except)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 76(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 36(AE)
	o: 

nname: 36
n 36(None)[except Exception, e:
	log.warn('Error calling observer method onDeviceAdded: %s', e)
	continue
]:
	i: 13()
	o: 77(AE)

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceConnected(obj)
	continue
]:
	i: 3(for)
	o: 36()

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceConnected(obj)
	continue
except Exception, e:
	log.warn('Error calling observer method onDeviceAdded: %s', e)
	continue
]:
	i: 3(for)
	o: 77(AE)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
	try:
		o.onDeviceConnected(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceAdded: %s', e)
		continue
]:
	i: 0(for)
	o: 77(AE)

nname: 0
n 0(None)[]:
	i: 
	o: 13(for)

nname: 77
n 77(None)[]:
	i: 0(AE)
	o: 

nname: 0
n 0(None)[for o in self._obs:
	try:
		o.onDeviceConnected(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceAdded: %s', e)
		continue
]:
	i: 
	o: 77(AE)

self.nodes: {0: <unpyclib.structure.node instance at 0xb760eccc>, 77: <unpyclib.structure.node instance at 0xb760e7ec>}
nname: 77
n 77(None)[]:
	i: 0(AL), 76()
	o: 

nname: 76
n 76(None)[]:
	i: 3(AF), 73()
	o: 77()

nname: 73
n 73(None)[]:
	i: 71(AE)
	o: 76()

nname: 71
n 71(None)[]:
	i: 36(f), 46()
	o: 73(AE)

nname: 46
n 46(None)[#, e
log.warn('Error calling observer method onDeviceDisconnected: %s', e)
continue
]:
	i: 36(t)
	o: 71()

nname: 36
n 36(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 13(except), 19()
	o: 46(t), 71(f)

nname: 19
n 19(None)[o.onDeviceDisconnected(obj)
continue
]:
	i: 13(try)
	o: 36()

nname: 13
n 13(None)[for o in self._obs:
]:
	i: 3(for)
	o: 19(try), 36(except)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 76(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 36(AE)
	o: 

nname: 36
n 36(None)[except Exception, e:
	log.warn('Error calling observer method onDeviceDisconnected: %s', e)
	continue
]:
	i: 13()
	o: 77(AE)

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceDisconnected(obj)
	continue
]:
	i: 3(for)
	o: 36()

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceDisconnected(obj)
	continue
except Exception, e:
	log.warn('Error calling observer method onDeviceDisconnected: %s', e)
	continue
]:
	i: 3(for)
	o: 77(AE)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
	try:
		o.onDeviceDisconnected(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceDisconnected: %s', e)
		continue
]:
	i: 0(for)
	o: 77(AE)

nname: 0
n 0(None)[]:
	i: 
	o: 13(for)

nname: 77
n 77(None)[]:
	i: 0(AE)
	o: 

nname: 0
n 0(None)[for o in self._obs:
	try:
		o.onDeviceDisconnected(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceDisconnected: %s', e)
		continue
]:
	i: 
	o: 77(AE)

self.nodes: {0: <unpyclib.structure.node instance at 0xb760ecac>, 77: <unpyclib.structure.node instance at 0xb760e66c>}
nname: 77
n 77(None)[]:
	i: 0(AL), 76()
	o: 

nname: 76
n 76(None)[]:
	i: 3(AF), 73()
	o: 77()

nname: 73
n 73(None)[]:
	i: 71(AE)
	o: 76()

nname: 71
n 71(None)[]:
	i: 36(f), 46()
	o: 73(AE)

nname: 46
n 46(None)[#, e
log.warn('Error calling observer method onDeviceConnecting: %s', e)
continue
]:
	i: 36(t)
	o: 71()

nname: 36
n 36(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 13(except), 19()
	o: 46(t), 71(f)

nname: 19
n 19(None)[o.onDeviceConnecting(obj)
continue
]:
	i: 13(try)
	o: 36()

nname: 13
n 13(None)[for o in self._obs:
]:
	i: 3(for)
	o: 19(try), 36(except)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 76(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 36(AE)
	o: 

nname: 36
n 36(None)[except Exception, e:
	log.warn('Error calling observer method onDeviceConnecting: %s', e)
	continue
]:
	i: 13()
	o: 77(AE)

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceConnecting(obj)
	continue
]:
	i: 3(for)
	o: 36()

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceConnecting(obj)
	continue
except Exception, e:
	log.warn('Error calling observer method onDeviceConnecting: %s', e)
	continue
]:
	i: 3(for)
	o: 77(AE)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
	try:
		o.onDeviceConnecting(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceConnecting: %s', e)
		continue
]:
	i: 0(for)
	o: 77(AE)

nname: 0
n 0(None)[]:
	i: 
	o: 13(for)

nname: 77
n 77(None)[]:
	i: 0(AE)
	o: 

nname: 0
n 0(None)[for o in self._obs:
	try:
		o.onDeviceConnecting(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceConnecting: %s', e)
		continue
]:
	i: 
	o: 77(AE)

self.nodes: {0: <unpyclib.structure.node instance at 0xb760ed6c>, 77: <unpyclib.structure.node instance at 0xb760e96c>}
nname: 77
n 77(None)[]:
	i: 0(AL), 76()
	o: 

nname: 76
n 76(None)[]:
	i: 3(AF), 73()
	o: 77()

nname: 73
n 73(None)[]:
	i: 71(AE)
	o: 76()

nname: 71
n 71(None)[]:
	i: 36(f), 46()
	o: 73(AE)

nname: 46
n 46(None)[#, e
log.warn('Error calling observer method onDeviceConnectionFailed: %s', e)
continue
]:
	i: 36(t)
	o: 71()

nname: 36
n 36(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 13(except), 19()
	o: 46(t), 71(f)

nname: 19
n 19(None)[o.onDeviceConnectionFailed(obj)
continue
]:
	i: 13(try)
	o: 36()

nname: 13
n 13(None)[for o in self._obs:
]:
	i: 3(for)
	o: 19(try), 36(except)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 76(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 36(AE)
	o: 

nname: 36
n 36(None)[except Exception, e:
	log.warn('Error calling observer method onDeviceConnectionFailed: %s', e)
	continue
]:
	i: 13()
	o: 77(AE)

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceConnectionFailed(obj)
	continue
]:
	i: 3(for)
	o: 36()

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 0(AL), 3(AF), 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onDeviceConnectionFailed(obj)
	continue
except Exception, e:
	log.warn('Error calling observer method onDeviceConnectionFailed: %s', e)
	continue
]:
	i: 3(for)
	o: 77(AE)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 77(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 77(AL)

nname: 77
n 77(None)[]:
	i: 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
	try:
		o.onDeviceConnectionFailed(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceConnectionFailed: %s', e)
		continue
]:
	i: 0(for)
	o: 77(AE)

nname: 0
n 0(None)[]:
	i: 
	o: 13(for)

nname: 77
n 77(None)[]:
	i: 0(AE)
	o: 

nname: 0
n 0(None)[for o in self._obs:
	try:
		o.onDeviceConnectionFailed(obj)
		continue
	except Exception, e:
		log.warn('Error calling observer method onDeviceConnectionFailed: %s', e)
		continue
]:
	i: 
	o: 77(AE)

self.nodes: {0: <unpyclib.structure.node instance at 0xb760e7cc>, 77: <unpyclib.structure.node instance at 0xb760e64c>}
nname: 54
n 54(None)[return []
]:
	i: 3(), 27(), 52(AE)
	o: 

nname: 52
n 52(None)[]:
	i: 17(f)
	o: 54(AE)

nname: 27
n 27(None)[#, e
log.warn('Failed to call GetDevices: %s', e)
]:
	i: 17(t)
	o: 54()

nname: 17
n 17(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 27(t), 52(f)

nname: 3
n 3(None)[return self._GetDevices()
]:
	i: 0(try)
	o: 54()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 17(except)

nname: 17
n 17(None)[except Exception, e:
	log.warn('Failed to call GetDevices: %s', e)
return []
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._GetDevices()
]:
	i: 
	o: 17()

nname: 0
n 0(None)[try:
	return self._GetDevices()
except Exception, e:
	log.warn('Failed to call GetDevices: %s', e)
return []
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760e2ac>}
nname: 57
n 57(None)[return False
]:
	i: 3(), 30(), 55(AE)
	o: 

nname: 55
n 55(None)[]:
	i: 20(f)
	o: 57(AE)

nname: 30
n 30(None)[#, e
log.warn('Failed to call IsDeviceConnected: %s', e)
]:
	i: 20(t)
	o: 57()

nname: 20
n 20(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 30(t), 55(f)

nname: 3
n 3(None)[return self._IsDeviceConnected(dev)
]:
	i: 0(try)
	o: 57()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 20(except)

nname: 20
n 20(None)[except Exception, e:
	log.warn('Failed to call IsDeviceConnected: %s', e)
return False
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._IsDeviceConnected(dev)
]:
	i: 
	o: 20()

nname: 0
n 0(None)[try:
	return self._IsDeviceConnected(dev)
except Exception, e:
	log.warn('Failed to call IsDeviceConnected: %s', e)
return False
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760ef8c>}
nname: 57
n 57(None)[return dict()
]:
	i: 3(), 30(), 55(AE)
	o: 

nname: 55
n 55(None)[]:
	i: 20(f)
	o: 57(AE)

nname: 30
n 30(None)[#, e
log.warn('Failed to call GetDeviceInfos: %s', e)
]:
	i: 20(t)
	o: 57()

nname: 20
n 20(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 30(t), 55(f)

nname: 3
n 3(None)[return self._GetDeviceInfos(dev)
]:
	i: 0(try)
	o: 57()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 20(except)

nname: 20
n 20(None)[except Exception, e:
	log.warn('Failed to call GetDeviceInfos: %s', e)
return dict()
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._GetDeviceInfos(dev)
]:
	i: 
	o: 20()

nname: 0
n 0(None)[try:
	return self._GetDeviceInfos(dev)
except Exception, e:
	log.warn('Failed to call GetDeviceInfos: %s', e)
return dict()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760e8ac>}
nname: 60
n 60(None)[return False
]:
	i: 3(), 33(), 58(AE)
	o: 

nname: 58
n 58(None)[]:
	i: 23(f)
	o: 60(AE)

nname: 33
n 33(None)[#, e
log.warn('Failed to call SetScanningEnabled: %s', e)
]:
	i: 23(t)
	o: 60()

nname: 23
n 23(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 33(t), 58(f)

nname: 3
n 3(None)[return self._SetScanningEnabled(dev, enabled)
]:
	i: 0(try)
	o: 60()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 23(except)

nname: 23
n 23(None)[except Exception, e:
	log.warn('Failed to call SetScanningEnabled: %s', e)
return False
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._SetScanningEnabled(dev, enabled)
]:
	i: 
	o: 23()

nname: 0
n 0(None)[try:
	return self._SetScanningEnabled(dev, enabled)
except Exception, e:
	log.warn('Failed to call SetScanningEnabled: %s', e)
return False
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760eb8c>}
nname: 78
n 78(None)[return devs
]:
	i: 0(AL), 77()
	o: 

nname: 77
n 77(None)[]:
	i: 9(AF), 73()
	o: 78()

nname: 73
n 73(None)[]:
	i: 22(f), 56()
	o: 77()

nname: 56
n 56(None)[devs.append(dev_infos)
continue
]:
	i: 22(t)
	o: 73()

nname: 22
n 22(dev_infos['networkType'] == type)[for dev in self.getDevices():
dev_infos = self.getDeviceInfos(dev)
]:
	i: 9(for)
	o: 56(t), 73(f)

nname: 9
n 9(None)[]:
	i: 0(loop)
	o: 22(for), 77(AF)

nname: 0
n 0(None)[devs = []
]:
	i: 
	o: 9(loop), 78(AL)

nname: 78
n 78(None)[return devs
]:
	i: 0(AL), 9(AF), 22()
	o: 

nname: 22
n 22(None)[for dev in self.getDevices():
dev_infos = self.getDeviceInfos(dev)
if dev_infos['networkType'] == type:
	devs.append(dev_infos)
	continue
]:
	i: 9(for)
	o: 78()

nname: 9
n 9(None)[]:
	i: 0(loop)
	o: 22(for), 78(AF)

nname: 0
n 0(None)[devs = []
]:
	i: 
	o: 9(loop), 78(AL)

nname: 22
n 22(None)[for dev in self.getDevices():
	dev_infos = self.getDeviceInfos(dev)
	if dev_infos['networkType'] == type:
		devs.append(dev_infos)
		continue
return devs
]:
	i: 0(for)
	o: 

nname: 0
n 0(None)[devs = []
]:
	i: 
	o: 22(for)

nname: 0
n 0(None)[devs = []
for dev in self.getDevices():
	dev_infos = self.getDeviceInfos(dev)
	if dev_infos['networkType'] == type:
		devs.append(dev_infos)
		continue
return devs
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760ecec>}
nname: 6
n 6(None)[__metaclass__ = MetaSingleton
def __init__(self):
	self._wdb = wynetwork_dbus
	self._met = self._wdb.reference(service, objectPath, ifaceDevices)
	self._GetDevices = self._met.method('GetDevices', '', 'as')
	self._GetDeviceInfos = self._met.method('GetDeviceInfos', 's', 'a{ss}')
	self._IsDeviceConnected = self._met.method('IsDeviceConnected', 's', 'b')
	self._SetScanningEnabled = self._met.method('SetScanningEnabled', 'sb', 'b')
	self._sig = self._wdb.instance(objectPath)
	self._sig.signal('DeviceAdded', 's', self.onDeviceAdded, 0)
	self._sig.signal('DeviceRemoved', 's', self.onDeviceRemoved, 0)
	self._sig.signal('DeviceConnected', 's', self.onDeviceConnected, 0)
	self._sig.signal('DeviceDisconnected', 's', self.onDeviceDisconnected, 0)
	self._sig.signal('DeviceConnecting', 's', self.onDeviceConnecting, 0)
	self._sig.signal('DeviceConnectionFailed', 's', self.onDeviceConnectionFailed, 0)
	self._obs = []
	log.info('Initialized %s interface proxy', ifaceDevices)

def attach(self, obs):
	self._obs.append(obs)

def detach(self, obs):
	self._obs.remove(obs)

def onDeviceAdded(self, obj):
	for o in self._obs:
		try:
			o.onDeviceAdded(obj)
			continue
		except Exception, e:
			log.warn('Error calling observer method onDeviceAdded: %s', e)
			continue

def onDeviceRemoved(self, obj):
	for o in self._obs:
		try:
			o.onDeviceRemoved(obj)
			continue
		except Exception, e:
			log.warn('Error calling observer method onDeviceRemoved: %s', e)
			continue

def onDeviceConnected(self, obj):
	for o in self._obs:
		try:
			o.onDeviceConnected(obj)
			continue
		except Exception, e:
			log.warn('Error calling observer method onDeviceAdded: %s', e)
			continue

def onDeviceDisconnected(self, obj):
	for o in self._obs:
		try:
			o.onDeviceDisconnected(obj)
			continue
		except Exception, e:
			log.warn('Error calling observer method onDeviceDisconnected: %s', e)
			continue

def onDeviceConnecting(self, obj):
	for o in self._obs:
		try:
			o.onDeviceConnecting(obj)
			continue
		except Exception, e:
			log.warn('Error calling observer method onDeviceConnecting: %s', e)
			continue

def onDeviceConnectionFailed(self, obj):
	for o in self._obs:
		try:
			o.onDeviceConnectionFailed(obj)
			continue
		except Exception, e:
			log.warn('Error calling observer method onDeviceConnectionFailed: %s', e)
			continue

def getDevices(self):
	try:
		return self._GetDevices()
	except Exception, e:
		log.warn('Failed to call GetDevices: %s', e)
	return []

def isDeviceConnected(self, dev):
	try:
		return self._IsDeviceConnected(dev)
	except Exception, e:
		log.warn('Failed to call IsDeviceConnected: %s', e)
	return False

def getDeviceInfos(self, dev):
	try:
		return self._GetDeviceInfos(dev)
	except Exception, e:
		log.warn('Failed to call GetDeviceInfos: %s', e)
	return dict()

def setScanningEnabled(self, dev, enabled):
	try:
		return self._SetScanningEnabled(dev, enabled)
	except Exception, e:
		log.warn('Failed to call SetScanningEnabled: %s', e)
	return False

def getDevicesByType(self, type='802.3'):
	devs = []
	for dev in self.getDevices():
		dev_infos = self.getDeviceInfos(dev)
		if dev_infos['networkType'] == type:
			devs.append(dev_infos)
			continue
	return devs

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb760a30c>}
nname: 0
n 0(None)[self._wdb = wynetwork_dbus
self._met = self._wdb.reference(service, objectPath, ifaceNetworks)
self._GetNetworks = self._met.method('GetNetworks', 's', 'as')
self._GetNetworkInfos = self._met.method('GetNetworkInfos', 'ss', 'a{ss}')
self._sig = self._wdb.instance(objectPath)
self._sig.signal('NetworkAppeared', 'ss', self.onNetworkAppeared, 0)
self._sig.signal('NetworkDisappeared', 'ss', self.onNetworkDisappeared, 0)
self._obs = []
log.info('Initialized %s interface proxy', ifaceNetworks)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a60c>}
nname: 0
n 0(None)[self._obs.append(obs)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a8ac>}
nname: 0
n 0(None)[self._obs.remove(obs)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760adac>}
nname: 80
n 80(None)[]:
	i: 0(AL), 79()
	o: 

nname: 79
n 79(None)[]:
	i: 3(AF), 76()
	o: 80()

nname: 76
n 76(None)[]:
	i: 74(AE)
	o: 79()

nname: 74
n 74(None)[]:
	i: 39(f), 49()
	o: 76(AE)

nname: 49
n 49(None)[#, e
log.warn('Error calling observer method onNetworkAppeared: %s', e)
continue
]:
	i: 39(t)
	o: 74()

nname: 39
n 39(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 13(except), 19()
	o: 49(t), 74(f)

nname: 19
n 19(None)[o.onNetworkAppeared(dev, net)
continue
]:
	i: 13(try)
	o: 39()

nname: 13
n 13(None)[for o in self._obs:
]:
	i: 3(for)
	o: 19(try), 39(except)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 79(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 80(AL)

nname: 80
n 80(None)[]:
	i: 0(AL), 3(AF), 39(AE)
	o: 

nname: 39
n 39(None)[except Exception, e:
	log.warn('Error calling observer method onNetworkAppeared: %s', e)
	continue
]:
	i: 13()
	o: 80(AE)

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onNetworkAppeared(dev, net)
	continue
]:
	i: 3(for)
	o: 39()

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 80(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 80(AL)

nname: 80
n 80(None)[]:
	i: 0(AL), 3(AF), 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onNetworkAppeared(dev, net)
	continue
except Exception, e:
	log.warn('Error calling observer method onNetworkAppeared: %s', e)
	continue
]:
	i: 3(for)
	o: 80(AE)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 80(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 80(AL)

nname: 80
n 80(None)[]:
	i: 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
	try:
		o.onNetworkAppeared(dev, net)
		continue
	except Exception, e:
		log.warn('Error calling observer method onNetworkAppeared: %s', e)
		continue
]:
	i: 0(for)
	o: 80(AE)

nname: 0
n 0(None)[]:
	i: 
	o: 13(for)

nname: 80
n 80(None)[]:
	i: 0(AE)
	o: 

nname: 0
n 0(None)[for o in self._obs:
	try:
		o.onNetworkAppeared(dev, net)
		continue
	except Exception, e:
		log.warn('Error calling observer method onNetworkAppeared: %s', e)
		continue
]:
	i: 
	o: 80(AE)

self.nodes: {0: <unpyclib.structure.node instance at 0xb760ad8c>, 80: <unpyclib.structure.node instance at 0xb760af6c>}
nname: 80
n 80(None)[]:
	i: 0(AL), 79()
	o: 

nname: 79
n 79(None)[]:
	i: 3(AF), 76()
	o: 80()

nname: 76
n 76(None)[]:
	i: 74(AE)
	o: 79()

nname: 74
n 74(None)[]:
	i: 39(f), 49()
	o: 76(AE)

nname: 49
n 49(None)[#, e
log.warn('Error calling observer method onNetworkDisappeared: %s', e)
continue
]:
	i: 39(t)
	o: 74()

nname: 39
n 39(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 13(except), 19()
	o: 49(t), 74(f)

nname: 19
n 19(None)[o.onNetworkDisappeared(dev, net)
continue
]:
	i: 13(try)
	o: 39()

nname: 13
n 13(None)[for o in self._obs:
]:
	i: 3(for)
	o: 19(try), 39(except)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 79(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 80(AL)

nname: 80
n 80(None)[]:
	i: 0(AL), 3(AF), 39(AE)
	o: 

nname: 39
n 39(None)[except Exception, e:
	log.warn('Error calling observer method onNetworkDisappeared: %s', e)
	continue
]:
	i: 13()
	o: 80(AE)

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onNetworkDisappeared(dev, net)
	continue
]:
	i: 3(for)
	o: 39()

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 80(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 80(AL)

nname: 80
n 80(None)[]:
	i: 0(AL), 3(AF), 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
try:
	o.onNetworkDisappeared(dev, net)
	continue
except Exception, e:
	log.warn('Error calling observer method onNetworkDisappeared: %s', e)
	continue
]:
	i: 3(for)
	o: 80(AE)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 13(for), 80(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 80(AL)

nname: 80
n 80(None)[]:
	i: 13(AE)
	o: 

nname: 13
n 13(None)[for o in self._obs:
	try:
		o.onNetworkDisappeared(dev, net)
		continue
	except Exception, e:
		log.warn('Error calling observer method onNetworkDisappeared: %s', e)
		continue
]:
	i: 0(for)
	o: 80(AE)

nname: 0
n 0(None)[]:
	i: 
	o: 13(for)

nname: 80
n 80(None)[]:
	i: 0(AE)
	o: 

nname: 0
n 0(None)[for o in self._obs:
	try:
		o.onNetworkDisappeared(dev, net)
		continue
	except Exception, e:
		log.warn('Error calling observer method onNetworkDisappeared: %s', e)
		continue
]:
	i: 
	o: 80(AE)

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a70c>, 80: <unpyclib.structure.node instance at 0xb760a8ec>}
nname: 57
n 57(None)[return []
]:
	i: 3(), 30(), 55(AE)
	o: 

nname: 55
n 55(None)[]:
	i: 20(f)
	o: 57(AE)

nname: 30
n 30(None)[#, e
log.warn('Failed to call GetNetworks: %s', e)
]:
	i: 20(t)
	o: 57()

nname: 20
n 20(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 30(t), 55(f)

nname: 3
n 3(None)[return self._GetNetworks(dev)
]:
	i: 0(try)
	o: 57()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 20(except)

nname: 20
n 20(None)[except Exception, e:
	log.warn('Failed to call GetNetworks: %s', e)
return []
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._GetNetworks(dev)
]:
	i: 
	o: 20()

nname: 0
n 0(None)[try:
	return self._GetNetworks(dev)
except Exception, e:
	log.warn('Failed to call GetNetworks: %s', e)
return []
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a76c>}
nname: 60
n 60(None)[return dict()
]:
	i: 3(), 33(), 58(AE)
	o: 

nname: 58
n 58(None)[]:
	i: 23(f)
	o: 60(AE)

nname: 33
n 33(None)[#, e
log.warn('Failed to call GetNetworkInfos: %s', e)
]:
	i: 23(t)
	o: 60()

nname: 23
n 23(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 33(t), 58(f)

nname: 3
n 3(None)[return self._GetNetworkInfos(dev, net)
]:
	i: 0(try)
	o: 60()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 23(except)

nname: 23
n 23(None)[except Exception, e:
	log.warn('Failed to call GetNetworkInfos: %s', e)
return dict()
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._GetNetworkInfos(dev, net)
]:
	i: 
	o: 23()

nname: 0
n 0(None)[try:
	return self._GetNetworkInfos(dev, net)
except Exception, e:
	log.warn('Failed to call GetNetworkInfos: %s', e)
return dict()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a1cc>}
nname: 6
n 6(None)[__metaclass__ = MetaSingleton
def __init__(self):
	self._wdb = wynetwork_dbus
	self._met = self._wdb.reference(service, objectPath, ifaceNetworks)
	self._GetNetworks = self._met.method('GetNetworks', 's', 'as')
	self._GetNetworkInfos = self._met.method('GetNetworkInfos', 'ss', 'a{ss}')
	self._sig = self._wdb.instance(objectPath)
	self._sig.signal('NetworkAppeared', 'ss', self.onNetworkAppeared, 0)
	self._sig.signal('NetworkDisappeared', 'ss', self.onNetworkDisappeared, 0)
	self._obs = []
	log.info('Initialized %s interface proxy', ifaceNetworks)

def attach(self, obs):
	self._obs.append(obs)

def detach(self, obs):
	self._obs.remove(obs)

def onNetworkAppeared(self, dev, net):
	for o in self._obs:
		try:
			o.onNetworkAppeared(dev, net)
			continue
		except Exception, e:
			log.warn('Error calling observer method onNetworkAppeared: %s', e)
			continue

def onNetworkDisappeared(self, dev, net):
	for o in self._obs:
		try:
			o.onNetworkDisappeared(dev, net)
			continue
		except Exception, e:
			log.warn('Error calling observer method onNetworkDisappeared: %s', e)
			continue

def getNetworks(self, dev):
	try:
		return self._GetNetworks(dev)
	except Exception, e:
		log.warn('Failed to call GetNetworks: %s', e)
	return []

def getNetworkInfos(self, dev, net):
	try:
		return self._GetNetworkInfos(dev, net)
	except Exception, e:
		log.warn('Failed to call GetNetworkInfos: %s', e)
	return dict()

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb7602dec>}
nname: 0
n 0(None)[self._wdb = wynetwork_dbus
self._met = self._wdb.reference(service, objectPath, ifaceConfigurations)
self._GetConfigurations = self._met.method('GetConfigurations', '', 'as')
self._GetConfigurationInfos = self._met.method('GetConfigurationInfos', 's', 'a{ss}')
self._SetConfigurationInfos = self._met.method('SetConfigurationInfos', 'sa{ss}', 'b')
self._AddConfiguration = self._met.method('AddConfiguration', 's', 'b')
self._DeleteConfiguration = self._met.method('DeleteConfiguration', 's', 'b')
self._SetActiveConfiguration = self._met.method('SetActiveConfiguration', 's', 'b')
log.info('Initialized %s interface proxy', ifaceConfigurations)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760efac>}
nname: 54
n 54(None)[return []
]:
	i: 3(), 27(), 52(AE)
	o: 

nname: 52
n 52(None)[]:
	i: 17(f)
	o: 54(AE)

nname: 27
n 27(None)[#, e
log.warn('Failed to call GetConfigurations: %s', e)
]:
	i: 17(t)
	o: 54()

nname: 17
n 17(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 27(t), 52(f)

nname: 3
n 3(None)[return self._GetConfigurations()
]:
	i: 0(try)
	o: 54()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 17(except)

nname: 17
n 17(None)[except Exception, e:
	log.warn('Failed to call GetConfigurations: %s', e)
return []
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._GetConfigurations()
]:
	i: 
	o: 17()

nname: 0
n 0(None)[try:
	return self._GetConfigurations()
except Exception, e:
	log.warn('Failed to call GetConfigurations: %s', e)
return []
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a2cc>}
nname: 57
n 57(None)[return dict()
]:
	i: 3(), 30(), 55(AE)
	o: 

nname: 55
n 55(None)[]:
	i: 20(f)
	o: 57(AE)

nname: 30
n 30(None)[#, e
log.warn('Failed to call GetConfigurationInfos: %s', e)
]:
	i: 20(t)
	o: 57()

nname: 20
n 20(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 30(t), 55(f)

nname: 3
n 3(None)[return self._GetConfigurationInfos(name)
]:
	i: 0(try)
	o: 57()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 20(except)

nname: 20
n 20(None)[except Exception, e:
	log.warn('Failed to call GetConfigurationInfos: %s', e)
return dict()
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._GetConfigurationInfos(name)
]:
	i: 
	o: 20()

nname: 0
n 0(None)[try:
	return self._GetConfigurationInfos(name)
except Exception, e:
	log.warn('Failed to call GetConfigurationInfos: %s', e)
return dict()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760ad4c>}
nname: 79
n 79(None)[return False
]:
	i: 22(), 52(), 77(AE)
	o: 

nname: 77
n 77(None)[]:
	i: 42(f)
	o: 79(AE)

nname: 52
n 52(None)[#, e
log.warn('Failed to call SetConfigurationInfos: %s', e)
]:
	i: 42(t)
	o: 79()

nname: 42
n 42(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 52(t), 77(f)

nname: 22
n 22(None)[return self._SetConfigurationInfos(name, props)
]:
	i: 0(try)
	o: 79()

nname: 0
n 0(None)[log.debug('config=%s, props=%s', name, props)
]:
	i: 
	o: 22(try), 42(except)

nname: 42
n 42(None)[except Exception, e:
	log.warn('Failed to call SetConfigurationInfos: %s', e)
return False
]:
	i: 0()
	o: 

nname: 0
n 0(None)[log.debug('config=%s, props=%s', name, props)
try:
	return self._SetConfigurationInfos(name, props)
]:
	i: 
	o: 42()

nname: 0
n 0(None)[log.debug('config=%s, props=%s', name, props)
try:
	return self._SetConfigurationInfos(name, props)
except Exception, e:
	log.warn('Failed to call SetConfigurationInfos: %s', e)
return False
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a4ac>}
nname: 57
n 57(None)[return False
]:
	i: 3(), 30(), 55(AE)
	o: 

nname: 55
n 55(None)[]:
	i: 20(f)
	o: 57(AE)

nname: 30
n 30(None)[#, e
log.warn('Failed to call AddConfiguration: %s', e)
]:
	i: 20(t)
	o: 57()

nname: 20
n 20(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 30(t), 55(f)

nname: 3
n 3(None)[return self._AddConfiguration(name)
]:
	i: 0(try)
	o: 57()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 20(except)

nname: 20
n 20(None)[except Exception, e:
	log.warn('Failed to call AddConfiguration: %s', e)
return False
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._AddConfiguration(name)
]:
	i: 
	o: 20()

nname: 0
n 0(None)[try:
	return self._AddConfiguration(name)
except Exception, e:
	log.warn('Failed to call AddConfiguration: %s', e)
return False
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a7cc>}
nname: 57
n 57(None)[return False
]:
	i: 3(), 30(), 55(AE)
	o: 

nname: 55
n 55(None)[]:
	i: 20(f)
	o: 57(AE)

nname: 30
n 30(None)[#, e
log.warn('Failed to call DeleteConfiguration: %s', e)
]:
	i: 20(t)
	o: 57()

nname: 20
n 20(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 30(t), 55(f)

nname: 3
n 3(None)[return self._DeleteConfiguration(name)
]:
	i: 0(try)
	o: 57()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 20(except)

nname: 20
n 20(None)[except Exception, e:
	log.warn('Failed to call DeleteConfiguration: %s', e)
return False
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._DeleteConfiguration(name)
]:
	i: 
	o: 20()

nname: 0
n 0(None)[try:
	return self._DeleteConfiguration(name)
except Exception, e:
	log.warn('Failed to call DeleteConfiguration: %s', e)
return False
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a84c>}
nname: 73
n 73(None)[return False
]:
	i: 19(), 46(), 71(AE)
	o: 

nname: 71
n 71(None)[]:
	i: 36(f)
	o: 73(AE)

nname: 46
n 46(None)[#, e
log.warn('Failed to call SetActiveConfiguration: %s', e)
]:
	i: 36(t)
	o: 73()

nname: 36
n 36(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 46(t), 71(f)

nname: 19
n 19(None)[return self._SetActiveConfiguration(name)
]:
	i: 0(try)
	o: 73()

nname: 0
n 0(None)[log.debug('active=%s', name)
]:
	i: 
	o: 19(try), 36(except)

nname: 36
n 36(None)[except Exception, e:
	log.warn('Failed to call SetActiveConfiguration: %s', e)
return False
]:
	i: 0()
	o: 

nname: 0
n 0(None)[log.debug('active=%s', name)
try:
	return self._SetActiveConfiguration(name)
]:
	i: 
	o: 36()

nname: 0
n 0(None)[log.debug('active=%s', name)
try:
	return self._SetActiveConfiguration(name)
except Exception, e:
	log.warn('Failed to call SetActiveConfiguration: %s', e)
return False
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a28c>}
nname: 63
n 63(None)[return dict()
]:
	i: 0(AL), 62()
	o: 

nname: 62
n 62(None)[]:
	i: 3(AF), 58()
	o: 63()

nname: 58
n 58(None)[]:
	i: 16(f), 50()
	o: 62()

nname: 50
n 50(None)[return cfg_infos
continue
]:
	i: 16(t)
	o: 58()

nname: 16
n 16(cfg_infos['active'] == 'true')[for cfg in self.getConfigurations():
cfg_infos = self.getConfigurationInfos(cfg)
]:
	i: 3(for)
	o: 50(t), 58(f)

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 16(for), 62(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 63(AL)

nname: 63
n 63(None)[return dict()
]:
	i: 0(AL), 3(AF), 16()
	o: 

nname: 16
n 16(None)[for cfg in self.getConfigurations():
cfg_infos = self.getConfigurationInfos(cfg)
if cfg_infos['active'] == 'true':
	return cfg_infos
	continue
]:
	i: 3(for)
	o: 63()

nname: 3
n 3(None)[]:
	i: 0(loop)
	o: 16(for), 63(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 63(AL)

nname: 16
n 16(None)[for cfg in self.getConfigurations():
	cfg_infos = self.getConfigurationInfos(cfg)
	if cfg_infos['active'] == 'true':
		return cfg_infos
		continue
return dict()
]:
	i: 0(for)
	o: 

nname: 0
n 0(None)[]:
	i: 
	o: 16(for)

nname: 0
n 0(None)[for cfg in self.getConfigurations():
	cfg_infos = self.getConfigurationInfos(cfg)
	if cfg_infos['active'] == 'true':
		return cfg_infos
		continue
return dict()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760ad2c>}
nname: 6
n 6(None)[__metaclass__ = MetaSingleton
def __init__(self):
	self._wdb = wynetwork_dbus
	self._met = self._wdb.reference(service, objectPath, ifaceConfigurations)
	self._GetConfigurations = self._met.method('GetConfigurations', '', 'as')
	self._GetConfigurationInfos = self._met.method('GetConfigurationInfos', 's', 'a{ss}')
	self._SetConfigurationInfos = self._met.method('SetConfigurationInfos', 'sa{ss}', 'b')
	self._AddConfiguration = self._met.method('AddConfiguration', 's', 'b')
	self._DeleteConfiguration = self._met.method('DeleteConfiguration', 's', 'b')
	self._SetActiveConfiguration = self._met.method('SetActiveConfiguration', 's', 'b')
	log.info('Initialized %s interface proxy', ifaceConfigurations)

def getConfigurations(self):
	try:
		return self._GetConfigurations()
	except Exception, e:
		log.warn('Failed to call GetConfigurations: %s', e)
	return []

def getConfigurationInfos(self, name):
	try:
		return self._GetConfigurationInfos(name)
	except Exception, e:
		log.warn('Failed to call GetConfigurationInfos: %s', e)
	return dict()

def setConfigurationInfos(self, name, props):
	log.debug('config=%s, props=%s', name, props)
	try:
		return self._SetConfigurationInfos(name, props)
	except Exception, e:
		log.warn('Failed to call SetConfigurationInfos: %s', e)
	return False

def addConfiguration(self, name):
	try:
		return self._AddConfiguration(name)
	except Exception, e:
		log.warn('Failed to call AddConfiguration: %s', e)
	return False

def deleteConfiguration(self, name):
	try:
		return self._DeleteConfiguration(name)
	except Exception, e:
		log.warn('Failed to call DeleteConfiguration: %s', e)
	return False

def setActiveConfiguration(self, name):
	log.debug('active=%s', name)
	try:
		return self._SetActiveConfiguration(name)
	except Exception, e:
		log.warn('Failed to call SetActiveConfiguration: %s', e)
	return False

def getActiveConfigurationInfos(self):
	for cfg in self.getConfigurations():
		cfg_infos = self.getConfigurationInfos(cfg)
		if cfg_infos['active'] == 'true':
			return cfg_infos
			continue
	return dict()

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb7602f0c>}
nname: 0
n 0(None)[from peewee.misc_utils import MetaSingleton
from peewee.debug import GET_LOGGER
from wydbus import WyDBus
wynetwork_dbus = WyDBus()
log = GET_LOGGER(__name__)
service = 'com.wyplay.WyNetwork'
objectPath = '/com/wyplay/WyNetwork'
ifaceGeneral = 'com.wyplay.Networking.General'
ifaceDevices = 'com.wyplay.Networking.Devices'
ifaceNetworks = 'com.wyplay.Networking.Networks'
ifaceConfigurations = 'com.wyplay.Networking.Configurations'
class NetGeneral(object):
	__metaclass__ = MetaSingleton
	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceGeneral)
		self._IsConnected = self._met.method('IsConnected', '', 'b')
		self._Sleep = self._met.method('Sleep', '', 'i')
		self._WakeUp = self._met.method('WakeUp', '', 'i')
		self._sig = self._wdb.instance(objectPath)
		self._sig.signal('Connected', '', self.onConnected, 0)
		self._sig.signal('Disconnected', '', self.onDisconnected, 0)
		self._obs = []
		log.info('Initialized %s interface proxy', ifaceGeneral)

	def attach(self, obs):
		self._obs.append(obs)

	def detach(self, obs):
		self._obs.remove(obs)

	def onConnected(self):
		for o in self._obs:
			try:
				o.onConnected()
				continue
			except Exception, e:
				log.warn('Error calling observer method onConnected: %s', e)
				continue

	def onDisconnected(self):
		for o in self._obs:
			try:
				o.onDisconnected()
				continue
			except Exception, e:
				log.warn('Error calling observer method onDisconnected: %s', e)
				continue

	def isConnected(self):
		try:
			return self._IsConnected()
		except Exception, e:
			log.warn('Failed to call IsConnected: %s', e)
		return False

	def sleep(self):
		try:
			return self._Sleep()
		except Exception, e:
			log.warn('Failed to call Sleep: %s', e)
		return 0

	def wakeUp(self):
		try:
			return self._WakeUp()
		except Exception, e:
			log.warn('Failed to call WakeUp: %s', e)
		return 0



class NetDevices(object):
	__metaclass__ = MetaSingleton
	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceDevices)
		self._GetDevices = self._met.method('GetDevices', '', 'as')
		self._GetDeviceInfos = self._met.method('GetDeviceInfos', 's', 'a{ss}')
		self._IsDeviceConnected = self._met.method('IsDeviceConnected', 's', 'b')
		self._SetScanningEnabled = self._met.method('SetScanningEnabled', 'sb', 'b')
		self._sig = self._wdb.instance(objectPath)
		self._sig.signal('DeviceAdded', 's', self.onDeviceAdded, 0)
		self._sig.signal('DeviceRemoved', 's', self.onDeviceRemoved, 0)
		self._sig.signal('DeviceConnected', 's', self.onDeviceConnected, 0)
		self._sig.signal('DeviceDisconnected', 's', self.onDeviceDisconnected, 0)
		self._sig.signal('DeviceConnecting', 's', self.onDeviceConnecting, 0)
		self._sig.signal('DeviceConnectionFailed', 's', self.onDeviceConnectionFailed, 0)
		self._obs = []
		log.info('Initialized %s interface proxy', ifaceDevices)

	def attach(self, obs):
		self._obs.append(obs)

	def detach(self, obs):
		self._obs.remove(obs)

	def onDeviceAdded(self, obj):
		for o in self._obs:
			try:
				o.onDeviceAdded(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceAdded: %s', e)
				continue

	def onDeviceRemoved(self, obj):
		for o in self._obs:
			try:
				o.onDeviceRemoved(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceRemoved: %s', e)
				continue

	def onDeviceConnected(self, obj):
		for o in self._obs:
			try:
				o.onDeviceConnected(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceAdded: %s', e)
				continue

	def onDeviceDisconnected(self, obj):
		for o in self._obs:
			try:
				o.onDeviceDisconnected(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceDisconnected: %s', e)
				continue

	def onDeviceConnecting(self, obj):
		for o in self._obs:
			try:
				o.onDeviceConnecting(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceConnecting: %s', e)
				continue

	def onDeviceConnectionFailed(self, obj):
		for o in self._obs:
			try:
				o.onDeviceConnectionFailed(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceConnectionFailed: %s', e)
				continue

	def getDevices(self):
		try:
			return self._GetDevices()
		except Exception, e:
			log.warn('Failed to call GetDevices: %s', e)
		return []

	def isDeviceConnected(self, dev):
		try:
			return self._IsDeviceConnected(dev)
		except Exception, e:
			log.warn('Failed to call IsDeviceConnected: %s', e)
		return False

	def getDeviceInfos(self, dev):
		try:
			return self._GetDeviceInfos(dev)
		except Exception, e:
			log.warn('Failed to call GetDeviceInfos: %s', e)
		return dict()

	def setScanningEnabled(self, dev, enabled):
		try:
			return self._SetScanningEnabled(dev, enabled)
		except Exception, e:
			log.warn('Failed to call SetScanningEnabled: %s', e)
		return False

	def getDevicesByType(self, type='802.3'):
		devs = []
		for dev in self.getDevices():
			dev_infos = self.getDeviceInfos(dev)
			if dev_infos['networkType'] == type:
				devs.append(dev_infos)
				continue
		return devs



class NetNetworks(object):
	__metaclass__ = MetaSingleton
	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceNetworks)
		self._GetNetworks = self._met.method('GetNetworks', 's', 'as')
		self._GetNetworkInfos = self._met.method('GetNetworkInfos', 'ss', 'a{ss}')
		self._sig = self._wdb.instance(objectPath)
		self._sig.signal('NetworkAppeared', 'ss', self.onNetworkAppeared, 0)
		self._sig.signal('NetworkDisappeared', 'ss', self.onNetworkDisappeared, 0)
		self._obs = []
		log.info('Initialized %s interface proxy', ifaceNetworks)

	def attach(self, obs):
		self._obs.append(obs)

	def detach(self, obs):
		self._obs.remove(obs)

	def onNetworkAppeared(self, dev, net):
		for o in self._obs:
			try:
				o.onNetworkAppeared(dev, net)
				continue
			except Exception, e:
				log.warn('Error calling observer method onNetworkAppeared: %s', e)
				continue

	def onNetworkDisappeared(self, dev, net):
		for o in self._obs:
			try:
				o.onNetworkDisappeared(dev, net)
				continue
			except Exception, e:
				log.warn('Error calling observer method onNetworkDisappeared: %s', e)
				continue

	def getNetworks(self, dev):
		try:
			return self._GetNetworks(dev)
		except Exception, e:
			log.warn('Failed to call GetNetworks: %s', e)
		return []

	def getNetworkInfos(self, dev, net):
		try:
			return self._GetNetworkInfos(dev, net)
		except Exception, e:
			log.warn('Failed to call GetNetworkInfos: %s', e)
		return dict()



class NetConfigurations(object):
	__metaclass__ = MetaSingleton
	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceConfigurations)
		self._GetConfigurations = self._met.method('GetConfigurations', '', 'as')
		self._GetConfigurationInfos = self._met.method('GetConfigurationInfos', 's', 'a{ss}')
		self._SetConfigurationInfos = self._met.method('SetConfigurationInfos', 'sa{ss}', 'b')
		self._AddConfiguration = self._met.method('AddConfiguration', 's', 'b')
		self._DeleteConfiguration = self._met.method('DeleteConfiguration', 's', 'b')
		self._SetActiveConfiguration = self._met.method('SetActiveConfiguration', 's', 'b')
		log.info('Initialized %s interface proxy', ifaceConfigurations)

	def getConfigurations(self):
		try:
			return self._GetConfigurations()
		except Exception, e:
			log.warn('Failed to call GetConfigurations: %s', e)
		return []

	def getConfigurationInfos(self, name):
		try:
			return self._GetConfigurationInfos(name)
		except Exception, e:
			log.warn('Failed to call GetConfigurationInfos: %s', e)
		return dict()

	def setConfigurationInfos(self, name, props):
		log.debug('config=%s, props=%s', name, props)
		try:
			return self._SetConfigurationInfos(name, props)
		except Exception, e:
			log.warn('Failed to call SetConfigurationInfos: %s', e)
		return False

	def addConfiguration(self, name):
		try:
			return self._AddConfiguration(name)
		except Exception, e:
			log.warn('Failed to call AddConfiguration: %s', e)
		return False

	def deleteConfiguration(self, name):
		try:
			return self._DeleteConfiguration(name)
		except Exception, e:
			log.warn('Failed to call DeleteConfiguration: %s', e)
		return False

	def setActiveConfiguration(self, name):
		log.debug('active=%s', name)
		try:
			return self._SetActiveConfiguration(name)
		except Exception, e:
			log.warn('Failed to call SetActiveConfiguration: %s', e)
		return False

	def getActiveConfigurationInfos(self):
		for cfg in self.getConfigurations():
			cfg_infos = self.getConfigurationInfos(cfg)
			if cfg_infos['active'] == 'true':
				return cfg_infos
				continue
		return dict()



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75fcdcc>}
from peewee.misc_utils import MetaSingleton
from peewee.debug import GET_LOGGER
from wydbus import WyDBus
wynetwork_dbus = WyDBus()
log = GET_LOGGER(__name__)
service = 'com.wyplay.WyNetwork'
objectPath = '/com/wyplay/WyNetwork'
ifaceGeneral = 'com.wyplay.Networking.General'
ifaceDevices = 'com.wyplay.Networking.Devices'
ifaceNetworks = 'com.wyplay.Networking.Networks'
ifaceConfigurations = 'com.wyplay.Networking.Configurations'
class NetGeneral(object):
	__metaclass__ = MetaSingleton
	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceGeneral)
		self._IsConnected = self._met.method('IsConnected', '', 'b')
		self._Sleep = self._met.method('Sleep', '', 'i')
		self._WakeUp = self._met.method('WakeUp', '', 'i')
		self._sig = self._wdb.instance(objectPath)
		self._sig.signal('Connected', '', self.onConnected, 0)
		self._sig.signal('Disconnected', '', self.onDisconnected, 0)
		self._obs = []
		log.info('Initialized %s interface proxy', ifaceGeneral)

	def attach(self, obs):
		self._obs.append(obs)

	def detach(self, obs):
		self._obs.remove(obs)

	def onConnected(self):
		for o in self._obs:
			try:
				o.onConnected()
				continue
			except Exception, e:
				log.warn('Error calling observer method onConnected: %s', e)
				continue

	def onDisconnected(self):
		for o in self._obs:
			try:
				o.onDisconnected()
				continue
			except Exception, e:
				log.warn('Error calling observer method onDisconnected: %s', e)
				continue

	def isConnected(self):
		try:
			return self._IsConnected()
		except Exception, e:
			log.warn('Failed to call IsConnected: %s', e)
		return False

	def sleep(self):
		try:
			return self._Sleep()
		except Exception, e:
			log.warn('Failed to call Sleep: %s', e)
		return 0

	def wakeUp(self):
		try:
			return self._WakeUp()
		except Exception, e:
			log.warn('Failed to call WakeUp: %s', e)
		return 0



class NetDevices(object):
	__metaclass__ = MetaSingleton
	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceDevices)
		self._GetDevices = self._met.method('GetDevices', '', 'as')
		self._GetDeviceInfos = self._met.method('GetDeviceInfos', 's', 'a{ss}')
		self._IsDeviceConnected = self._met.method('IsDeviceConnected', 's', 'b')
		self._SetScanningEnabled = self._met.method('SetScanningEnabled', 'sb', 'b')
		self._sig = self._wdb.instance(objectPath)
		self._sig.signal('DeviceAdded', 's', self.onDeviceAdded, 0)
		self._sig.signal('DeviceRemoved', 's', self.onDeviceRemoved, 0)
		self._sig.signal('DeviceConnected', 's', self.onDeviceConnected, 0)
		self._sig.signal('DeviceDisconnected', 's', self.onDeviceDisconnected, 0)
		self._sig.signal('DeviceConnecting', 's', self.onDeviceConnecting, 0)
		self._sig.signal('DeviceConnectionFailed', 's', self.onDeviceConnectionFailed, 0)
		self._obs = []
		log.info('Initialized %s interface proxy', ifaceDevices)

	def attach(self, obs):
		self._obs.append(obs)

	def detach(self, obs):
		self._obs.remove(obs)

	def onDeviceAdded(self, obj):
		for o in self._obs:
			try:
				o.onDeviceAdded(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceAdded: %s', e)
				continue

	def onDeviceRemoved(self, obj):
		for o in self._obs:
			try:
				o.onDeviceRemoved(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceRemoved: %s', e)
				continue

	def onDeviceConnected(self, obj):
		for o in self._obs:
			try:
				o.onDeviceConnected(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceAdded: %s', e)
				continue

	def onDeviceDisconnected(self, obj):
		for o in self._obs:
			try:
				o.onDeviceDisconnected(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceDisconnected: %s', e)
				continue

	def onDeviceConnecting(self, obj):
		for o in self._obs:
			try:
				o.onDeviceConnecting(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceConnecting: %s', e)
				continue

	def onDeviceConnectionFailed(self, obj):
		for o in self._obs:
			try:
				o.onDeviceConnectionFailed(obj)
				continue
			except Exception, e:
				log.warn('Error calling observer method onDeviceConnectionFailed: %s', e)
				continue

	def getDevices(self):
		try:
			return self._GetDevices()
		except Exception, e:
			log.warn('Failed to call GetDevices: %s', e)
		return []

	def isDeviceConnected(self, dev):
		try:
			return self._IsDeviceConnected(dev)
		except Exception, e:
			log.warn('Failed to call IsDeviceConnected: %s', e)
		return False

	def getDeviceInfos(self, dev):
		try:
			return self._GetDeviceInfos(dev)
		except Exception, e:
			log.warn('Failed to call GetDeviceInfos: %s', e)
		return dict()

	def setScanningEnabled(self, dev, enabled):
		try:
			return self._SetScanningEnabled(dev, enabled)
		except Exception, e:
			log.warn('Failed to call SetScanningEnabled: %s', e)
		return False

	def getDevicesByType(self, type='802.3'):
		devs = []
		for dev in self.getDevices():
			dev_infos = self.getDeviceInfos(dev)
			if dev_infos['networkType'] == type:
				devs.append(dev_infos)
				continue
		return devs



class NetNetworks(object):
	__metaclass__ = MetaSingleton
	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceNetworks)
		self._GetNetworks = self._met.method('GetNetworks', 's', 'as')
		self._GetNetworkInfos = self._met.method('GetNetworkInfos', 'ss', 'a{ss}')
		self._sig = self._wdb.instance(objectPath)
		self._sig.signal('NetworkAppeared', 'ss', self.onNetworkAppeared, 0)
		self._sig.signal('NetworkDisappeared', 'ss', self.onNetworkDisappeared, 0)
		self._obs = []
		log.info('Initialized %s interface proxy', ifaceNetworks)

	def attach(self, obs):
		self._obs.append(obs)

	def detach(self, obs):
		self._obs.remove(obs)

	def onNetworkAppeared(self, dev, net):
		for o in self._obs:
			try:
				o.onNetworkAppeared(dev, net)
				continue
			except Exception, e:
				log.warn('Error calling observer method onNetworkAppeared: %s', e)
				continue

	def onNetworkDisappeared(self, dev, net):
		for o in self._obs:
			try:
				o.onNetworkDisappeared(dev, net)
				continue
			except Exception, e:
				log.warn('Error calling observer method onNetworkDisappeared: %s', e)
				continue

	def getNetworks(self, dev):
		try:
			return self._GetNetworks(dev)
		except Exception, e:
			log.warn('Failed to call GetNetworks: %s', e)
		return []

	def getNetworkInfos(self, dev, net):
		try:
			return self._GetNetworkInfos(dev, net)
		except Exception, e:
			log.warn('Failed to call GetNetworkInfos: %s', e)
		return dict()



class NetConfigurations(object):
	__metaclass__ = MetaSingleton
	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceConfigurations)
		self._GetConfigurations = self._met.method('GetConfigurations', '', 'as')
		self._GetConfigurationInfos = self._met.method('GetConfigurationInfos', 's', 'a{ss}')
		self._SetConfigurationInfos = self._met.method('SetConfigurationInfos', 'sa{ss}', 'b')
		self._AddConfiguration = self._met.method('AddConfiguration', 's', 'b')
		self._DeleteConfiguration = self._met.method('DeleteConfiguration', 's', 'b')
		self._SetActiveConfiguration = self._met.method('SetActiveConfiguration', 's', 'b')
		log.info('Initialized %s interface proxy', ifaceConfigurations)

	def getConfigurations(self):
		try:
			return self._GetConfigurations()
		except Exception, e:
			log.warn('Failed to call GetConfigurations: %s', e)
		return []

	def getConfigurationInfos(self, name):
		try:
			return self._GetConfigurationInfos(name)
		except Exception, e:
			log.warn('Failed to call GetConfigurationInfos: %s', e)
		return dict()

	def setConfigurationInfos(self, name, props):
		log.debug('config=%s, props=%s', name, props)
		try:
			return self._SetConfigurationInfos(name, props)
		except Exception, e:
			log.warn('Failed to call SetConfigurationInfos: %s', e)
		return False

	def addConfiguration(self, name):
		try:
			return self._AddConfiguration(name)
		except Exception, e:
			log.warn('Failed to call AddConfiguration: %s', e)
		return False

	def deleteConfiguration(self, name):
		try:
			return self._DeleteConfiguration(name)
		except Exception, e:
			log.warn('Failed to call DeleteConfiguration: %s', e)
		return False

	def setActiveConfiguration(self, name):
		log.debug('active=%s', name)
		try:
			return self._SetActiveConfiguration(name)
		except Exception, e:
			log.warn('Failed to call SetActiveConfiguration: %s', e)
		return False

	def getActiveConfigurationInfos(self):
		for cfg in self.getConfigurations():
			cfg_infos = self.getConfigurationInfos(cfg)
			if cfg_infos['active'] == 'true':
				return cfg_infos
				continue
		return dict()



