# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 195
n 195(None)[return None
]:
	i: 161(), 178()
	o: 

nname: 178
n 178(None)[raise AttributeError('You cannot add attributes to %s' % self)
]:
	i: 138&145(f)
	o: 195()

nname: 161
n 161(None)[self.__dict__[name] = value
]:
	i: 138&145(t)
	o: 195()

nname: 138&145
n 138&145(not static or hasattr(self, name))[]:
	i: 120(), 137()
	o: 161(t), 178(f)

nname: 137
n 137(None)[]:
	i: 93(f)
	o: 138&145()

nname: 120
n 120(None)[return method(self, value)
]:
	i: 93(t)
	o: 138&145()

nname: 93
n 93(method)[method = class_type.__swig_setmethods__.get(name, None)
]:
	i: 67(JA), 88(), 92()
	o: 120(t), 137(f)

nname: 92
n 92(None)[]:
	i: 33(f)
	o: 93()

nname: 88
n 88(None)[]:
	i: 45(f)
	o: 93()

nname: 67
n 67(None)[self.__dict__[name] = value
return None
]:
	i: 45(t)
	o: 93(JA)

nname: 45
n 45(type(value).__name__ == 'PySwigObject')[]:
	i: 33(t)
	o: 67(t), 88(f)

nname: 33
n 33(name == 'this')[]:
	i: 12(), 32()
	o: 45(t), 92(f)

nname: 32
n 32(None)[]:
	i: 0(f)
	o: 33()

nname: 12
n 12(None)[return self.this.own(value)
]:
	i: 0(t)
	o: 33()

nname: 0
n 0(name == 'thisown')[]:
	i: 
	o: 12(t), 32(f)

nname: 195
n 195(None)[return None
]:
	i: 93()
	o: 

nname: 93
n 93(None)[method = class_type.__swig_setmethods__.get(name, None)
if method:
	return method(self, value)
if not static or hasattr(self, name):
	self.__dict__[name] = value
else:
	raise AttributeError('You cannot add attributes to %s' % self)
]:
	i: 0(JA)
	o: 195()

nname: 0
n 0(None)[if name == 'thisown':
	return self.this.own(value)
if name == 'this':
	if type(value).__name__ == 'PySwigObject':
		self.__dict__[name] = value
		return None
]:
	i: 
	o: 93(JA)

nname: 195
n 195(None)[return None
]:
	i: 0()
	o: 

nname: 0
n 0(None)[if name == 'thisown':
	return self.this.own(value)
if name == 'this':
	if type(value).__name__ == 'PySwigObject':
		self.__dict__[name] = value
		return None
method = class_type.__swig_setmethods__.get(name, None)
if method:
	return method(self, value)
if not static or hasattr(self, name):
	self.__dict__[name] = value
else:
	raise AttributeError('You cannot add attributes to %s' % self)
]:
	i: 
	o: 195()

nname: 0
n 0(None)[if name == 'thisown':
	return self.this.own(value)
if name == 'this':
	if type(value).__name__ == 'PySwigObject':
		self.__dict__[name] = value
		return None
method = class_type.__swig_setmethods__.get(name, None)
if method:
	return method(self, value)
if not static or hasattr(self, name):
	self.__dict__[name] = value
else:
	raise AttributeError('You cannot add attributes to %s' % self)
return None
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76396ec>}
nname: 0
n 0(None)[return _swig_setattr_nondynamic(self, class_type, name, value, 0)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7637a2c>}
nname: 72
n 72(None)[raise AttributeError, name
return None
]:
	i: 57(), 71()
	o: 

nname: 71
n 71(None)[]:
	i: 30(f)
	o: 72()

nname: 57
n 57(None)[return method(self)
]:
	i: 30(t)
	o: 72()

nname: 30
n 30(method)[method = class_type.__swig_getmethods__.get(name, None)
]:
	i: 12(), 29()
	o: 57(t), 71(f)

nname: 29
n 29(None)[]:
	i: 0(f)
	o: 30()

nname: 12
n 12(None)[return self.this.own()
]:
	i: 0(t)
	o: 30()

nname: 0
n 0(name == 'thisown')[]:
	i: 
	o: 12(t), 29(f)

nname: 72
n 72(None)[raise AttributeError, name
return None
]:
	i: 0()
	o: 

nname: 0
n 0(None)[if name == 'thisown':
	return self.this.own()
method = class_type.__swig_getmethods__.get(name, None)
if method:
	return method(self)
]:
	i: 
	o: 72()

nname: 0
n 0(None)[if name == 'thisown':
	return self.this.own()
method = class_type.__swig_getmethods__.get(name, None)
if method:
	return method(self)
raise AttributeError, name
return None
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76371cc>}
nname: 39
n 39(None)[return '<%s.%s; %s >' % (self.__class__.__module__, self.__class__.__name__, strthis)
]:
	i: 3(), 26(), 38(AE)
	o: 

nname: 26
n 26(None)[strthis = ''
]:
	i: 0(except)
	o: 39()

nname: 3
n 3(None)[strthis = 'proxy of ' + self.this.__repr__()
]:
	i: 0(try)
	o: 39()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 26(except)

nname: 26
n 26(None)[except:
	strthis = ''
return '<%s.%s; %s >' % (self.__class__.__module__, self.__class__.__name__, strthis)
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	strthis = 'proxy of ' + self.this.__repr__()
]:
	i: 
	o: 26()

nname: 0
n 0(None)[try:
	strthis = 'proxy of ' + self.this.__repr__()
except:
	strthis = ''
return '<%s.%s; %s >' % (self.__class__.__module__, self.__class__.__name__, strthis)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7637e8c>}
nname: 0
n 0(None)[return _swig_setattr(self, PySwigIterator, name, value)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764316c>}
nname: 0
n 0(None)[return _swig_getattr(self, PySwigIterator, name)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764306c>}
nname: 0
n 0(None)[raise AttributeError, 'No constructor defined'
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764314c>}
nname: 0
n 0(None)[return None
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763ee4c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator_value(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764316c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator_incr(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76430cc>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator_decr(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764314c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator_distance(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764306c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator_equal(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764302c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator_copy(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764308c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator_next(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764316c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator_previous(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76430cc>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator_advance(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764314c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator___eq__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764306c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator___ne__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764302c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator___iadd__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764308c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator___isub__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764316c>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator___add__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76430cc>}
nname: 0
n 0(None)[return _pynetwork.PySwigIterator___sub__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764314c>}
nname: 0
n 0(None)[return self
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763eecc>}
nname: 6
n 6(None)[__swig_setmethods__ = {}
def __setattr__(self, name, value):
	return _swig_setattr(self, PySwigIterator, name, value)

__swig_getmethods__ = {}
def __getattr__(self, name):
	return _swig_getattr(self, PySwigIterator, name)

def __init__(self):
	raise AttributeError, 'No constructor defined'

__repr__ = _swig_repr
__swig_destroy__ = _pynetwork.delete_PySwigIterator
def __del__(self):
	return None

def value(*args):
	return _pynetwork.PySwigIterator_value(*args)

def incr(*args):
	return _pynetwork.PySwigIterator_incr(*args)

def decr(*args):
	return _pynetwork.PySwigIterator_decr(*args)

def distance(*args):
	return _pynetwork.PySwigIterator_distance(*args)

def equal(*args):
	return _pynetwork.PySwigIterator_equal(*args)

def copy(*args):
	return _pynetwork.PySwigIterator_copy(*args)

def next(*args):
	return _pynetwork.PySwigIterator_next(*args)

def previous(*args):
	return _pynetwork.PySwigIterator_previous(*args)

def advance(*args):
	return _pynetwork.PySwigIterator_advance(*args)

def __eq__(*args):
	return _pynetwork.PySwigIterator___eq__(*args)

def __ne__(*args):
	return _pynetwork.PySwigIterator___ne__(*args)

def __iadd__(*args):
	return _pynetwork.PySwigIterator___iadd__(*args)

def __isub__(*args):
	return _pynetwork.PySwigIterator___isub__(*args)

def __add__(*args):
	return _pynetwork.PySwigIterator___add__(*args)

def __sub__(*args):
	return _pynetwork.PySwigIterator___sub__(*args)

def __iter__(self):
	return self

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb763e76c>}
nname: 0
n 0(None)[return _swig_setattr(self, vectors, name, value)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643cac>}
nname: 0
n 0(None)[return _swig_getattr(self, vectors, name)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643bac>}
nname: 0
n 0(None)[return _pynetwork.vectors_iterator(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643c8c>}
nname: 0
n 0(None)[return self.iterator()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643bac>}
nname: 0
n 0(None)[return _pynetwork.vectors___nonzero__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643bcc>}
nname: 0
n 0(None)[return _pynetwork.vectors___len__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643c4c>}
nname: 0
n 0(None)[return _pynetwork.vectors_pop(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643cec>}
nname: 0
n 0(None)[return _pynetwork.vectors___getslice__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643aec>}
nname: 0
n 0(None)[return _pynetwork.vectors___setslice__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643bcc>}
nname: 0
n 0(None)[return _pynetwork.vectors___delslice__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643c4c>}
nname: 0
n 0(None)[return _pynetwork.vectors___delitem__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643cec>}
nname: 0
n 0(None)[return _pynetwork.vectors___getitem__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643aec>}
nname: 0
n 0(None)[return _pynetwork.vectors___setitem__(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643bcc>}
nname: 0
n 0(None)[return _pynetwork.vectors_append(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643c4c>}
nname: 0
n 0(None)[return _pynetwork.vectors_empty(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643cec>}
nname: 0
n 0(None)[return _pynetwork.vectors_size(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643aec>}
nname: 0
n 0(None)[return _pynetwork.vectors_clear(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643bcc>}
nname: 0
n 0(None)[return _pynetwork.vectors_swap(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643c4c>}
nname: 0
n 0(None)[return _pynetwork.vectors_get_allocator(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643cec>}
nname: 0
n 0(None)[return _pynetwork.vectors_begin(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643aec>}
nname: 0
n 0(None)[return _pynetwork.vectors_end(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643bcc>}
nname: 0
n 0(None)[return _pynetwork.vectors_rbegin(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643c4c>}
nname: 0
n 0(None)[return _pynetwork.vectors_rend(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643cec>}
nname: 0
n 0(None)[return _pynetwork.vectors_pop_back(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643aec>}
nname: 0
n 0(None)[return _pynetwork.vectors_erase(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643bcc>}
nname: 54
n 54(None)[]:
	i: 18(), 38(), 53(AE)
	o: 

nname: 38
n 38(None)[self.this = this
]:
	i: 0(except)
	o: 54()

nname: 18
n 18(None)[self.this.append(this)
]:
	i: 0(try)
	o: 54()

nname: 0
n 0(None)[this = _pynetwork.new_vectors(*args)
]:
	i: 
	o: 18(try), 38(except)

nname: 38
n 38(None)[except:
	self.this = this
]:
	i: 0()
	o: 

nname: 0
n 0(None)[this = _pynetwork.new_vectors(*args)
try:
	self.this.append(this)
]:
	i: 
	o: 38()

nname: 0
n 0(None)[this = _pynetwork.new_vectors(*args)
try:
	self.this.append(this)
except:
	self.this = this
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643f4c>}
nname: 0
n 0(None)[return _pynetwork.vectors_push_back(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643aec>}
nname: 0
n 0(None)[return _pynetwork.vectors_front(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643c8c>}
nname: 0
n 0(None)[return _pynetwork.vectors_back(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643d0c>}
nname: 0
n 0(None)[return _pynetwork.vectors_assign(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643bac>}
nname: 0
n 0(None)[return _pynetwork.vectors_resize(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643aec>}
nname: 0
n 0(None)[return _pynetwork.vectors_insert(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643c8c>}
nname: 0
n 0(None)[return _pynetwork.vectors_reserve(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643d0c>}
nname: 0
n 0(None)[return _pynetwork.vectors_capacity(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643bac>}
nname: 0
n 0(None)[return None
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7643bac>}
nname: 6
n 6(None)[__swig_setmethods__ = {}
def __setattr__(self, name, value):
	return _swig_setattr(self, vectors, name, value)

__swig_getmethods__ = {}
def __getattr__(self, name):
	return _swig_getattr(self, vectors, name)

__repr__ = _swig_repr
def iterator(*args):
	return _pynetwork.vectors_iterator(*args)

def __iter__(self):
	return self.iterator()

def __nonzero__(*args):
	return _pynetwork.vectors___nonzero__(*args)

def __len__(*args):
	return _pynetwork.vectors___len__(*args)

def pop(*args):
	return _pynetwork.vectors_pop(*args)

def __getslice__(*args):
	return _pynetwork.vectors___getslice__(*args)

def __setslice__(*args):
	return _pynetwork.vectors___setslice__(*args)

def __delslice__(*args):
	return _pynetwork.vectors___delslice__(*args)

def __delitem__(*args):
	return _pynetwork.vectors___delitem__(*args)

def __getitem__(*args):
	return _pynetwork.vectors___getitem__(*args)

def __setitem__(*args):
	return _pynetwork.vectors___setitem__(*args)

def append(*args):
	return _pynetwork.vectors_append(*args)

def empty(*args):
	return _pynetwork.vectors_empty(*args)

def size(*args):
	return _pynetwork.vectors_size(*args)

def clear(*args):
	return _pynetwork.vectors_clear(*args)

def swap(*args):
	return _pynetwork.vectors_swap(*args)

def get_allocator(*args):
	return _pynetwork.vectors_get_allocator(*args)

def begin(*args):
	return _pynetwork.vectors_begin(*args)

def end(*args):
	return _pynetwork.vectors_end(*args)

def rbegin(*args):
	return _pynetwork.vectors_rbegin(*args)

def rend(*args):
	return _pynetwork.vectors_rend(*args)

def pop_back(*args):
	return _pynetwork.vectors_pop_back(*args)

def erase(*args):
	return _pynetwork.vectors_erase(*args)

def __init__(self, *args):
	this = _pynetwork.new_vectors(*args)
	try:
		self.this.append(this)
	except:
		self.this = this

def push_back(*args):
	return _pynetwork.vectors_push_back(*args)

def front(*args):
	return _pynetwork.vectors_front(*args)

def back(*args):
	return _pynetwork.vectors_back(*args)

def assign(*args):
	return _pynetwork.vectors_assign(*args)

def resize(*args):
	return _pynetwork.vectors_resize(*args)

def insert(*args):
	return _pynetwork.vectors_insert(*args)

def reserve(*args):
	return _pynetwork.vectors_reserve(*args)

def capacity(*args):
	return _pynetwork.vectors_capacity(*args)

__swig_destroy__ = _pynetwork.delete_vectors
def __del__(self):
	return None

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb763e2ec>}
nname: 0
n 0(None)[return _swig_setattr(self, WyNetworkModule, name, value)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763eecc>}
nname: 0
n 0(None)[return _swig_getattr(self, WyNetworkModule, name)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763e70c>}
nname: 0
n 0(None)[raise AttributeError, 'No constructor defined'
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763ee2c>}
nname: 0
n 0(None)[return _pynetwork.WyNetworkModule_init
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763eecc>}
nname: 0
n 0(None)[return _pynetwork.WyNetworkModule_instance
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763e80c>}
nname: 0
n 0(None)[return _pynetwork.WyNetworkModule_getConfigurations(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763ef4c>}
nname: 0
n 0(None)[return _pynetwork.WyNetworkModule_getConfiguration(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763e54c>}
nname: 0
n 0(None)[return _pynetwork.WyNetworkModule_getNetworkCapabilities(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763e36c>}
nname: 0
n 0(None)[return _pynetwork.WyNetworkModule_setConfiguration(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763e0ac>}
nname: 0
n 0(None)[return _pynetwork.WyNetworkModule_setActiveConfiguration(*args)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763ef4c>}
nname: 0
n 0(None)[return None
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763ef4c>}
nname: 129
n 129(None)[def getConfigurations(*args):
	return _pynetwork.WyNetworkModule_getConfigurations(*args)

def getConfiguration(*args):
	return _pynetwork.WyNetworkModule_getConfiguration(*args)

def getNetworkCapabilities(*args):
	return _pynetwork.WyNetworkModule_getNetworkCapabilities(*args)

def setConfiguration(*args):
	return _pynetwork.WyNetworkModule_setConfiguration(*args)

def setActiveConfiguration(*args):
	return _pynetwork.WyNetworkModule_setActiveConfiguration(*args)

__swig_destroy__ = _pynetwork.delete_WyNetworkModule
def __del__(self):
	return None

]:
	i: 109(), 128()
	o: 

nname: 128
n 128(None)[]:
	i: 90(f)
	o: 129()

nname: 109
n 109(None)[instance = staticmethod(_pynetwork.WyNetworkModule_instance)
]:
	i: 90(t)
	o: 129()

nname: 90
n 90(_newclass)[def __swig_getmethods__['instance'](x):
	return _pynetwork.WyNetworkModule_instance

]:
	i: 70(), 89()
	o: 109(t), 128(f)

nname: 89
n 89(None)[]:
	i: 6(f)
	o: 90()

nname: 70
n 70(None)[init = staticmethod(_pynetwork.WyNetworkModule_init)
]:
	i: 6(t)
	o: 90()

nname: 6
n 6(_newclass)[__swig_setmethods__ = {}
def __setattr__(self, name, value):
	return _swig_setattr(self, WyNetworkModule, name, value)

__swig_getmethods__ = {}
def __getattr__(self, name):
	return _swig_getattr(self, WyNetworkModule, name)

def __init__(self):
	raise AttributeError, 'No constructor defined'

__repr__ = _swig_repr
def __swig_getmethods__['init'](x):
	return _pynetwork.WyNetworkModule_init

]:
	i: 
	o: 70(t), 89(f)

nname: 129
n 129(None)[def getConfigurations(*args):
	return _pynetwork.WyNetworkModule_getConfigurations(*args)

def getConfiguration(*args):
	return _pynetwork.WyNetworkModule_getConfiguration(*args)

def getNetworkCapabilities(*args):
	return _pynetwork.WyNetworkModule_getNetworkCapabilities(*args)

def setConfiguration(*args):
	return _pynetwork.WyNetworkModule_setConfiguration(*args)

def setActiveConfiguration(*args):
	return _pynetwork.WyNetworkModule_setActiveConfiguration(*args)

__swig_destroy__ = _pynetwork.delete_WyNetworkModule
def __del__(self):
	return None

]:
	i: 6()
	o: 

nname: 6
n 6(None)[__swig_setmethods__ = {}
def __setattr__(self, name, value):
	return _swig_setattr(self, WyNetworkModule, name, value)

__swig_getmethods__ = {}
def __getattr__(self, name):
	return _swig_getattr(self, WyNetworkModule, name)

def __init__(self):
	raise AttributeError, 'No constructor defined'

__repr__ = _swig_repr
def __swig_getmethods__['init'](x):
	return _pynetwork.WyNetworkModule_init

if _newclass:
	init = staticmethod(_pynetwork.WyNetworkModule_init)
def __swig_getmethods__['instance'](x):
	return _pynetwork.WyNetworkModule_instance

if _newclass:
	instance = staticmethod(_pynetwork.WyNetworkModule_instance)
]:
	i: 
	o: 129()

nname: 6
n 6(None)[__swig_setmethods__ = {}
def __setattr__(self, name, value):
	return _swig_setattr(self, WyNetworkModule, name, value)

__swig_getmethods__ = {}
def __getattr__(self, name):
	return _swig_getattr(self, WyNetworkModule, name)

def __init__(self):
	raise AttributeError, 'No constructor defined'

__repr__ = _swig_repr
def __swig_getmethods__['init'](x):
	return _pynetwork.WyNetworkModule_init

if _newclass:
	init = staticmethod(_pynetwork.WyNetworkModule_init)
def __swig_getmethods__['instance'](x):
	return _pynetwork.WyNetworkModule_instance

if _newclass:
	instance = staticmethod(_pynetwork.WyNetworkModule_instance)
def getConfigurations(*args):
	return _pynetwork.WyNetworkModule_getConfigurations(*args)

def getConfiguration(*args):
	return _pynetwork.WyNetworkModule_getConfiguration(*args)

def getNetworkCapabilities(*args):
	return _pynetwork.WyNetworkModule_getNetworkCapabilities(*args)

def setConfiguration(*args):
	return _pynetwork.WyNetworkModule_setConfiguration(*args)

def setActiveConfiguration(*args):
	return _pynetwork.WyNetworkModule_setActiveConfiguration(*args)

__swig_destroy__ = _pynetwork.delete_WyNetworkModule
def __del__(self):
	return None

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb763e98c>}
nname: 6
n 6(None)[]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb76373ec>}
nname: 182
n 182(None)[del types
class PySwigIterator(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, PySwigIterator, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, PySwigIterator, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr
	__swig_destroy__ = _pynetwork.delete_PySwigIterator
	def __del__(self):
		return None

	def value(*args):
		return _pynetwork.PySwigIterator_value(*args)

	def incr(*args):
		return _pynetwork.PySwigIterator_incr(*args)

	def decr(*args):
		return _pynetwork.PySwigIterator_decr(*args)

	def distance(*args):
		return _pynetwork.PySwigIterator_distance(*args)

	def equal(*args):
		return _pynetwork.PySwigIterator_equal(*args)

	def copy(*args):
		return _pynetwork.PySwigIterator_copy(*args)

	def next(*args):
		return _pynetwork.PySwigIterator_next(*args)

	def previous(*args):
		return _pynetwork.PySwigIterator_previous(*args)

	def advance(*args):
		return _pynetwork.PySwigIterator_advance(*args)

	def __eq__(*args):
		return _pynetwork.PySwigIterator___eq__(*args)

	def __ne__(*args):
		return _pynetwork.PySwigIterator___ne__(*args)

	def __iadd__(*args):
		return _pynetwork.PySwigIterator___iadd__(*args)

	def __isub__(*args):
		return _pynetwork.PySwigIterator___isub__(*args)

	def __add__(*args):
		return _pynetwork.PySwigIterator___add__(*args)

	def __sub__(*args):
		return _pynetwork.PySwigIterator___sub__(*args)

	def __iter__(self):
		return self



PySwigIterator_swigregister = _pynetwork.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)
class vectors(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, vectors, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, vectors, name)

	__repr__ = _swig_repr
	def iterator(*args):
		return _pynetwork.vectors_iterator(*args)

	def __iter__(self):
		return self.iterator()

	def __nonzero__(*args):
		return _pynetwork.vectors___nonzero__(*args)

	def __len__(*args):
		return _pynetwork.vectors___len__(*args)

	def pop(*args):
		return _pynetwork.vectors_pop(*args)

	def __getslice__(*args):
		return _pynetwork.vectors___getslice__(*args)

	def __setslice__(*args):
		return _pynetwork.vectors___setslice__(*args)

	def __delslice__(*args):
		return _pynetwork.vectors___delslice__(*args)

	def __delitem__(*args):
		return _pynetwork.vectors___delitem__(*args)

	def __getitem__(*args):
		return _pynetwork.vectors___getitem__(*args)

	def __setitem__(*args):
		return _pynetwork.vectors___setitem__(*args)

	def append(*args):
		return _pynetwork.vectors_append(*args)

	def empty(*args):
		return _pynetwork.vectors_empty(*args)

	def size(*args):
		return _pynetwork.vectors_size(*args)

	def clear(*args):
		return _pynetwork.vectors_clear(*args)

	def swap(*args):
		return _pynetwork.vectors_swap(*args)

	def get_allocator(*args):
		return _pynetwork.vectors_get_allocator(*args)

	def begin(*args):
		return _pynetwork.vectors_begin(*args)

	def end(*args):
		return _pynetwork.vectors_end(*args)

	def rbegin(*args):
		return _pynetwork.vectors_rbegin(*args)

	def rend(*args):
		return _pynetwork.vectors_rend(*args)

	def pop_back(*args):
		return _pynetwork.vectors_pop_back(*args)

	def erase(*args):
		return _pynetwork.vectors_erase(*args)

	def __init__(self, *args):
		this = _pynetwork.new_vectors(*args)
		try:
			self.this.append(this)
		except:
			self.this = this

	def push_back(*args):
		return _pynetwork.vectors_push_back(*args)

	def front(*args):
		return _pynetwork.vectors_front(*args)

	def back(*args):
		return _pynetwork.vectors_back(*args)

	def assign(*args):
		return _pynetwork.vectors_assign(*args)

	def resize(*args):
		return _pynetwork.vectors_resize(*args)

	def insert(*args):
		return _pynetwork.vectors_insert(*args)

	def reserve(*args):
		return _pynetwork.vectors_reserve(*args)

	def capacity(*args):
		return _pynetwork.vectors_capacity(*args)

	__swig_destroy__ = _pynetwork.delete_vectors
	def __del__(self):
		return None



vectors_swigregister = _pynetwork.vectors_swigregister
vectors_swigregister(vectors)
class WyNetworkModule(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, WyNetworkModule, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, WyNetworkModule, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr
	def __swig_getmethods__['init'](x):
		return _pynetwork.WyNetworkModule_init

	if _newclass:
		init = staticmethod(_pynetwork.WyNetworkModule_init)
	def __swig_getmethods__['instance'](x):
		return _pynetwork.WyNetworkModule_instance

	if _newclass:
		instance = staticmethod(_pynetwork.WyNetworkModule_instance)
	def getConfigurations(*args):
		return _pynetwork.WyNetworkModule_getConfigurations(*args)

	def getConfiguration(*args):
		return _pynetwork.WyNetworkModule_getConfiguration(*args)

	def getNetworkCapabilities(*args):
		return _pynetwork.WyNetworkModule_getNetworkCapabilities(*args)

	def setConfiguration(*args):
		return _pynetwork.WyNetworkModule_setConfiguration(*args)

	def setActiveConfiguration(*args):
		return _pynetwork.WyNetworkModule_setActiveConfiguration(*args)

	__swig_destroy__ = _pynetwork.delete_WyNetworkModule
	def __del__(self):
		return None



WyNetworkModule_swigregister = _pynetwork.WyNetworkModule_swigregister
WyNetworkModule_swigregister(WyNetworkModule)
WyNetworkModule_init = _pynetwork.WyNetworkModule_init
WyNetworkModule_instance = _pynetwork.WyNetworkModule_instance
]:
	i: 119(), 148(), 180(AE)
	o: 

nname: 180
n 180(None)[]:
	i: 138(f)
	o: 182(AE)

nname: 148
n 148(None)[class _object():
	pass

_newclass = 0
]:
	i: 138(t)
	o: 182()

nname: 138
n 138(<dummy_ex3> EXC_MATCH AttributeError)[]:
	i: 65(except)
	o: 148(t), 180(f)

nname: 119
n 119(None)[_object = types.ObjectType
_newclass = 1
]:
	i: 65(try)
	o: 182()

nname: 65
n 65(None)[def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
	if name == 'thisown':
		return self.this.own(value)
	if name == 'this':
		if type(value).__name__ == 'PySwigObject':
			self.__dict__[name] = value
			return None
	method = class_type.__swig_setmethods__.get(name, None)
	if method:
		return method(self, value)
	if not static or hasattr(self, name):
		self.__dict__[name] = value
	else:
		raise AttributeError('You cannot add attributes to %s' % self)
	return None

def _swig_setattr(self, class_type, name, value):
	return _swig_setattr_nondynamic(self, class_type, name, value, 0)

def _swig_getattr(self, class_type, name):
	if name == 'thisown':
		return self.this.own()
	method = class_type.__swig_getmethods__.get(name, None)
	if method:
		return method(self)
	raise AttributeError, name
	return None

def _swig_repr(self):
	try:
		strthis = 'proxy of ' + self.this.__repr__()
	except:
		strthis = ''
	return '<%s.%s; %s >' % (self.__class__.__module__, self.__class__.__name__, strthis)

import types
]:
	i: 36(), 56(), 63(AE)
	o: 119(try), 138(except)

nname: 63
n 63(None)[]:
	i: 46(f)
	o: 65(AE)

nname: 56
n 56(None)[]:
	i: 46(t)
	o: 65()

nname: 46
n 46(<dummy_ex3> EXC_MATCH NameError)[]:
	i: 0(except)
	o: 56(t), 63(f)

nname: 36
n 36(None)[_swig_property = property
]:
	i: 0(try)
	o: 65()

nname: 0
n 0(None)[import _pynetwork
import new
new_instancemethod = new.instancemethod
]:
	i: 
	o: 36(try), 46(except)

nname: 182
n 182(None)[del types
class PySwigIterator(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, PySwigIterator, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, PySwigIterator, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr
	__swig_destroy__ = _pynetwork.delete_PySwigIterator
	def __del__(self):
		return None

	def value(*args):
		return _pynetwork.PySwigIterator_value(*args)

	def incr(*args):
		return _pynetwork.PySwigIterator_incr(*args)

	def decr(*args):
		return _pynetwork.PySwigIterator_decr(*args)

	def distance(*args):
		return _pynetwork.PySwigIterator_distance(*args)

	def equal(*args):
		return _pynetwork.PySwigIterator_equal(*args)

	def copy(*args):
		return _pynetwork.PySwigIterator_copy(*args)

	def next(*args):
		return _pynetwork.PySwigIterator_next(*args)

	def previous(*args):
		return _pynetwork.PySwigIterator_previous(*args)

	def advance(*args):
		return _pynetwork.PySwigIterator_advance(*args)

	def __eq__(*args):
		return _pynetwork.PySwigIterator___eq__(*args)

	def __ne__(*args):
		return _pynetwork.PySwigIterator___ne__(*args)

	def __iadd__(*args):
		return _pynetwork.PySwigIterator___iadd__(*args)

	def __isub__(*args):
		return _pynetwork.PySwigIterator___isub__(*args)

	def __add__(*args):
		return _pynetwork.PySwigIterator___add__(*args)

	def __sub__(*args):
		return _pynetwork.PySwigIterator___sub__(*args)

	def __iter__(self):
		return self



PySwigIterator_swigregister = _pynetwork.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)
class vectors(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, vectors, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, vectors, name)

	__repr__ = _swig_repr
	def iterator(*args):
		return _pynetwork.vectors_iterator(*args)

	def __iter__(self):
		return self.iterator()

	def __nonzero__(*args):
		return _pynetwork.vectors___nonzero__(*args)

	def __len__(*args):
		return _pynetwork.vectors___len__(*args)

	def pop(*args):
		return _pynetwork.vectors_pop(*args)

	def __getslice__(*args):
		return _pynetwork.vectors___getslice__(*args)

	def __setslice__(*args):
		return _pynetwork.vectors___setslice__(*args)

	def __delslice__(*args):
		return _pynetwork.vectors___delslice__(*args)

	def __delitem__(*args):
		return _pynetwork.vectors___delitem__(*args)

	def __getitem__(*args):
		return _pynetwork.vectors___getitem__(*args)

	def __setitem__(*args):
		return _pynetwork.vectors___setitem__(*args)

	def append(*args):
		return _pynetwork.vectors_append(*args)

	def empty(*args):
		return _pynetwork.vectors_empty(*args)

	def size(*args):
		return _pynetwork.vectors_size(*args)

	def clear(*args):
		return _pynetwork.vectors_clear(*args)

	def swap(*args):
		return _pynetwork.vectors_swap(*args)

	def get_allocator(*args):
		return _pynetwork.vectors_get_allocator(*args)

	def begin(*args):
		return _pynetwork.vectors_begin(*args)

	def end(*args):
		return _pynetwork.vectors_end(*args)

	def rbegin(*args):
		return _pynetwork.vectors_rbegin(*args)

	def rend(*args):
		return _pynetwork.vectors_rend(*args)

	def pop_back(*args):
		return _pynetwork.vectors_pop_back(*args)

	def erase(*args):
		return _pynetwork.vectors_erase(*args)

	def __init__(self, *args):
		this = _pynetwork.new_vectors(*args)
		try:
			self.this.append(this)
		except:
			self.this = this

	def push_back(*args):
		return _pynetwork.vectors_push_back(*args)

	def front(*args):
		return _pynetwork.vectors_front(*args)

	def back(*args):
		return _pynetwork.vectors_back(*args)

	def assign(*args):
		return _pynetwork.vectors_assign(*args)

	def resize(*args):
		return _pynetwork.vectors_resize(*args)

	def insert(*args):
		return _pynetwork.vectors_insert(*args)

	def reserve(*args):
		return _pynetwork.vectors_reserve(*args)

	def capacity(*args):
		return _pynetwork.vectors_capacity(*args)

	__swig_destroy__ = _pynetwork.delete_vectors
	def __del__(self):
		return None



vectors_swigregister = _pynetwork.vectors_swigregister
vectors_swigregister(vectors)
class WyNetworkModule(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, WyNetworkModule, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, WyNetworkModule, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr
	def __swig_getmethods__['init'](x):
		return _pynetwork.WyNetworkModule_init

	if _newclass:
		init = staticmethod(_pynetwork.WyNetworkModule_init)
	def __swig_getmethods__['instance'](x):
		return _pynetwork.WyNetworkModule_instance

	if _newclass:
		instance = staticmethod(_pynetwork.WyNetworkModule_instance)
	def getConfigurations(*args):
		return _pynetwork.WyNetworkModule_getConfigurations(*args)

	def getConfiguration(*args):
		return _pynetwork.WyNetworkModule_getConfiguration(*args)

	def getNetworkCapabilities(*args):
		return _pynetwork.WyNetworkModule_getNetworkCapabilities(*args)

	def setConfiguration(*args):
		return _pynetwork.WyNetworkModule_setConfiguration(*args)

	def setActiveConfiguration(*args):
		return _pynetwork.WyNetworkModule_setActiveConfiguration(*args)

	__swig_destroy__ = _pynetwork.delete_WyNetworkModule
	def __del__(self):
		return None



WyNetworkModule_swigregister = _pynetwork.WyNetworkModule_swigregister
WyNetworkModule_swigregister(WyNetworkModule)
WyNetworkModule_init = _pynetwork.WyNetworkModule_init
WyNetworkModule_instance = _pynetwork.WyNetworkModule_instance
]:
	i: 119()
	o: 

nname: 119
n 119(None)[try:
	_object = types.ObjectType
	_newclass = 1
except AttributeError:
	class _object():
		pass

	_newclass = 0
]:
	i: 46(try)
	o: 182()

nname: 46
n 46(None)[except NameError:
	pass
def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
	if name == 'thisown':
		return self.this.own(value)
	if name == 'this':
		if type(value).__name__ == 'PySwigObject':
			self.__dict__[name] = value
			return None
	method = class_type.__swig_setmethods__.get(name, None)
	if method:
		return method(self, value)
	if not static or hasattr(self, name):
		self.__dict__[name] = value
	else:
		raise AttributeError('You cannot add attributes to %s' % self)
	return None

def _swig_setattr(self, class_type, name, value):
	return _swig_setattr_nondynamic(self, class_type, name, value, 0)

def _swig_getattr(self, class_type, name):
	if name == 'thisown':
		return self.this.own()
	method = class_type.__swig_getmethods__.get(name, None)
	if method:
		return method(self)
	raise AttributeError, name
	return None

def _swig_repr(self):
	try:
		strthis = 'proxy of ' + self.this.__repr__()
	except:
		strthis = ''
	return '<%s.%s; %s >' % (self.__class__.__module__, self.__class__.__name__, strthis)

import types
]:
	i: 0()
	o: 119(try)

nname: 0
n 0(None)[import _pynetwork
import new
new_instancemethod = new.instancemethod
try:
	_swig_property = property
]:
	i: 
	o: 46()

nname: 119
n 119(None)[try:
	_object = types.ObjectType
	_newclass = 1
except AttributeError:
	class _object():
		pass

	_newclass = 0
del types
class PySwigIterator(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, PySwigIterator, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, PySwigIterator, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr
	__swig_destroy__ = _pynetwork.delete_PySwigIterator
	def __del__(self):
		return None

	def value(*args):
		return _pynetwork.PySwigIterator_value(*args)

	def incr(*args):
		return _pynetwork.PySwigIterator_incr(*args)

	def decr(*args):
		return _pynetwork.PySwigIterator_decr(*args)

	def distance(*args):
		return _pynetwork.PySwigIterator_distance(*args)

	def equal(*args):
		return _pynetwork.PySwigIterator_equal(*args)

	def copy(*args):
		return _pynetwork.PySwigIterator_copy(*args)

	def next(*args):
		return _pynetwork.PySwigIterator_next(*args)

	def previous(*args):
		return _pynetwork.PySwigIterator_previous(*args)

	def advance(*args):
		return _pynetwork.PySwigIterator_advance(*args)

	def __eq__(*args):
		return _pynetwork.PySwigIterator___eq__(*args)

	def __ne__(*args):
		return _pynetwork.PySwigIterator___ne__(*args)

	def __iadd__(*args):
		return _pynetwork.PySwigIterator___iadd__(*args)

	def __isub__(*args):
		return _pynetwork.PySwigIterator___isub__(*args)

	def __add__(*args):
		return _pynetwork.PySwigIterator___add__(*args)

	def __sub__(*args):
		return _pynetwork.PySwigIterator___sub__(*args)

	def __iter__(self):
		return self



PySwigIterator_swigregister = _pynetwork.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)
class vectors(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, vectors, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, vectors, name)

	__repr__ = _swig_repr
	def iterator(*args):
		return _pynetwork.vectors_iterator(*args)

	def __iter__(self):
		return self.iterator()

	def __nonzero__(*args):
		return _pynetwork.vectors___nonzero__(*args)

	def __len__(*args):
		return _pynetwork.vectors___len__(*args)

	def pop(*args):
		return _pynetwork.vectors_pop(*args)

	def __getslice__(*args):
		return _pynetwork.vectors___getslice__(*args)

	def __setslice__(*args):
		return _pynetwork.vectors___setslice__(*args)

	def __delslice__(*args):
		return _pynetwork.vectors___delslice__(*args)

	def __delitem__(*args):
		return _pynetwork.vectors___delitem__(*args)

	def __getitem__(*args):
		return _pynetwork.vectors___getitem__(*args)

	def __setitem__(*args):
		return _pynetwork.vectors___setitem__(*args)

	def append(*args):
		return _pynetwork.vectors_append(*args)

	def empty(*args):
		return _pynetwork.vectors_empty(*args)

	def size(*args):
		return _pynetwork.vectors_size(*args)

	def clear(*args):
		return _pynetwork.vectors_clear(*args)

	def swap(*args):
		return _pynetwork.vectors_swap(*args)

	def get_allocator(*args):
		return _pynetwork.vectors_get_allocator(*args)

	def begin(*args):
		return _pynetwork.vectors_begin(*args)

	def end(*args):
		return _pynetwork.vectors_end(*args)

	def rbegin(*args):
		return _pynetwork.vectors_rbegin(*args)

	def rend(*args):
		return _pynetwork.vectors_rend(*args)

	def pop_back(*args):
		return _pynetwork.vectors_pop_back(*args)

	def erase(*args):
		return _pynetwork.vectors_erase(*args)

	def __init__(self, *args):
		this = _pynetwork.new_vectors(*args)
		try:
			self.this.append(this)
		except:
			self.this = this

	def push_back(*args):
		return _pynetwork.vectors_push_back(*args)

	def front(*args):
		return _pynetwork.vectors_front(*args)

	def back(*args):
		return _pynetwork.vectors_back(*args)

	def assign(*args):
		return _pynetwork.vectors_assign(*args)

	def resize(*args):
		return _pynetwork.vectors_resize(*args)

	def insert(*args):
		return _pynetwork.vectors_insert(*args)

	def reserve(*args):
		return _pynetwork.vectors_reserve(*args)

	def capacity(*args):
		return _pynetwork.vectors_capacity(*args)

	__swig_destroy__ = _pynetwork.delete_vectors
	def __del__(self):
		return None



vectors_swigregister = _pynetwork.vectors_swigregister
vectors_swigregister(vectors)
class WyNetworkModule(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, WyNetworkModule, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, WyNetworkModule, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr
	def __swig_getmethods__['init'](x):
		return _pynetwork.WyNetworkModule_init

	if _newclass:
		init = staticmethod(_pynetwork.WyNetworkModule_init)
	def __swig_getmethods__['instance'](x):
		return _pynetwork.WyNetworkModule_instance

	if _newclass:
		instance = staticmethod(_pynetwork.WyNetworkModule_instance)
	def getConfigurations(*args):
		return _pynetwork.WyNetworkModule_getConfigurations(*args)

	def getConfiguration(*args):
		return _pynetwork.WyNetworkModule_getConfiguration(*args)

	def getNetworkCapabilities(*args):
		return _pynetwork.WyNetworkModule_getNetworkCapabilities(*args)

	def setConfiguration(*args):
		return _pynetwork.WyNetworkModule_setConfiguration(*args)

	def setActiveConfiguration(*args):
		return _pynetwork.WyNetworkModule_setActiveConfiguration(*args)

	__swig_destroy__ = _pynetwork.delete_WyNetworkModule
	def __del__(self):
		return None



WyNetworkModule_swigregister = _pynetwork.WyNetworkModule_swigregister
WyNetworkModule_swigregister(WyNetworkModule)
WyNetworkModule_init = _pynetwork.WyNetworkModule_init
WyNetworkModule_instance = _pynetwork.WyNetworkModule_instance
]:
	i: 0(try)
	o: 

nname: 0
n 0(None)[import _pynetwork
import new
new_instancemethod = new.instancemethod
try:
	_swig_property = property
except NameError:
	pass
def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
	if name == 'thisown':
		return self.this.own(value)
	if name == 'this':
		if type(value).__name__ == 'PySwigObject':
			self.__dict__[name] = value
			return None
	method = class_type.__swig_setmethods__.get(name, None)
	if method:
		return method(self, value)
	if not static or hasattr(self, name):
		self.__dict__[name] = value
	else:
		raise AttributeError('You cannot add attributes to %s' % self)
	return None

def _swig_setattr(self, class_type, name, value):
	return _swig_setattr_nondynamic(self, class_type, name, value, 0)

def _swig_getattr(self, class_type, name):
	if name == 'thisown':
		return self.this.own()
	method = class_type.__swig_getmethods__.get(name, None)
	if method:
		return method(self)
	raise AttributeError, name
	return None

def _swig_repr(self):
	try:
		strthis = 'proxy of ' + self.this.__repr__()
	except:
		strthis = ''
	return '<%s.%s; %s >' % (self.__class__.__module__, self.__class__.__name__, strthis)

import types
]:
	i: 
	o: 119(try)

nname: 0
n 0(None)[import _pynetwork
import new
new_instancemethod = new.instancemethod
try:
	_swig_property = property
except NameError:
	pass
def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
	if name == 'thisown':
		return self.this.own(value)
	if name == 'this':
		if type(value).__name__ == 'PySwigObject':
			self.__dict__[name] = value
			return None
	method = class_type.__swig_setmethods__.get(name, None)
	if method:
		return method(self, value)
	if not static or hasattr(self, name):
		self.__dict__[name] = value
	else:
		raise AttributeError('You cannot add attributes to %s' % self)
	return None

def _swig_setattr(self, class_type, name, value):
	return _swig_setattr_nondynamic(self, class_type, name, value, 0)

def _swig_getattr(self, class_type, name):
	if name == 'thisown':
		return self.this.own()
	method = class_type.__swig_getmethods__.get(name, None)
	if method:
		return method(self)
	raise AttributeError, name
	return None

def _swig_repr(self):
	try:
		strthis = 'proxy of ' + self.this.__repr__()
	except:
		strthis = ''
	return '<%s.%s; %s >' % (self.__class__.__module__, self.__class__.__name__, strthis)

import types
try:
	_object = types.ObjectType
	_newclass = 1
except AttributeError:
	class _object():
		pass

	_newclass = 0
del types
class PySwigIterator(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, PySwigIterator, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, PySwigIterator, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr
	__swig_destroy__ = _pynetwork.delete_PySwigIterator
	def __del__(self):
		return None

	def value(*args):
		return _pynetwork.PySwigIterator_value(*args)

	def incr(*args):
		return _pynetwork.PySwigIterator_incr(*args)

	def decr(*args):
		return _pynetwork.PySwigIterator_decr(*args)

	def distance(*args):
		return _pynetwork.PySwigIterator_distance(*args)

	def equal(*args):
		return _pynetwork.PySwigIterator_equal(*args)

	def copy(*args):
		return _pynetwork.PySwigIterator_copy(*args)

	def next(*args):
		return _pynetwork.PySwigIterator_next(*args)

	def previous(*args):
		return _pynetwork.PySwigIterator_previous(*args)

	def advance(*args):
		return _pynetwork.PySwigIterator_advance(*args)

	def __eq__(*args):
		return _pynetwork.PySwigIterator___eq__(*args)

	def __ne__(*args):
		return _pynetwork.PySwigIterator___ne__(*args)

	def __iadd__(*args):
		return _pynetwork.PySwigIterator___iadd__(*args)

	def __isub__(*args):
		return _pynetwork.PySwigIterator___isub__(*args)

	def __add__(*args):
		return _pynetwork.PySwigIterator___add__(*args)

	def __sub__(*args):
		return _pynetwork.PySwigIterator___sub__(*args)

	def __iter__(self):
		return self



PySwigIterator_swigregister = _pynetwork.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)
class vectors(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, vectors, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, vectors, name)

	__repr__ = _swig_repr
	def iterator(*args):
		return _pynetwork.vectors_iterator(*args)

	def __iter__(self):
		return self.iterator()

	def __nonzero__(*args):
		return _pynetwork.vectors___nonzero__(*args)

	def __len__(*args):
		return _pynetwork.vectors___len__(*args)

	def pop(*args):
		return _pynetwork.vectors_pop(*args)

	def __getslice__(*args):
		return _pynetwork.vectors___getslice__(*args)

	def __setslice__(*args):
		return _pynetwork.vectors___setslice__(*args)

	def __delslice__(*args):
		return _pynetwork.vectors___delslice__(*args)

	def __delitem__(*args):
		return _pynetwork.vectors___delitem__(*args)

	def __getitem__(*args):
		return _pynetwork.vectors___getitem__(*args)

	def __setitem__(*args):
		return _pynetwork.vectors___setitem__(*args)

	def append(*args):
		return _pynetwork.vectors_append(*args)

	def empty(*args):
		return _pynetwork.vectors_empty(*args)

	def size(*args):
		return _pynetwork.vectors_size(*args)

	def clear(*args):
		return _pynetwork.vectors_clear(*args)

	def swap(*args):
		return _pynetwork.vectors_swap(*args)

	def get_allocator(*args):
		return _pynetwork.vectors_get_allocator(*args)

	def begin(*args):
		return _pynetwork.vectors_begin(*args)

	def end(*args):
		return _pynetwork.vectors_end(*args)

	def rbegin(*args):
		return _pynetwork.vectors_rbegin(*args)

	def rend(*args):
		return _pynetwork.vectors_rend(*args)

	def pop_back(*args):
		return _pynetwork.vectors_pop_back(*args)

	def erase(*args):
		return _pynetwork.vectors_erase(*args)

	def __init__(self, *args):
		this = _pynetwork.new_vectors(*args)
		try:
			self.this.append(this)
		except:
			self.this = this

	def push_back(*args):
		return _pynetwork.vectors_push_back(*args)

	def front(*args):
		return _pynetwork.vectors_front(*args)

	def back(*args):
		return _pynetwork.vectors_back(*args)

	def assign(*args):
		return _pynetwork.vectors_assign(*args)

	def resize(*args):
		return _pynetwork.vectors_resize(*args)

	def insert(*args):
		return _pynetwork.vectors_insert(*args)

	def reserve(*args):
		return _pynetwork.vectors_reserve(*args)

	def capacity(*args):
		return _pynetwork.vectors_capacity(*args)

	__swig_destroy__ = _pynetwork.delete_vectors
	def __del__(self):
		return None



vectors_swigregister = _pynetwork.vectors_swigregister
vectors_swigregister(vectors)
class WyNetworkModule(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, WyNetworkModule, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, WyNetworkModule, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr
	def __swig_getmethods__['init'](x):
		return _pynetwork.WyNetworkModule_init

	if _newclass:
		init = staticmethod(_pynetwork.WyNetworkModule_init)
	def __swig_getmethods__['instance'](x):
		return _pynetwork.WyNetworkModule_instance

	if _newclass:
		instance = staticmethod(_pynetwork.WyNetworkModule_instance)
	def getConfigurations(*args):
		return _pynetwork.WyNetworkModule_getConfigurations(*args)

	def getConfiguration(*args):
		return _pynetwork.WyNetworkModule_getConfiguration(*args)

	def getNetworkCapabilities(*args):
		return _pynetwork.WyNetworkModule_getNetworkCapabilities(*args)

	def setConfiguration(*args):
		return _pynetwork.WyNetworkModule_setConfiguration(*args)

	def setActiveConfiguration(*args):
		return _pynetwork.WyNetworkModule_setActiveConfiguration(*args)

	__swig_destroy__ = _pynetwork.delete_WyNetworkModule
	def __del__(self):
		return None



WyNetworkModule_swigregister = _pynetwork.WyNetworkModule_swigregister
WyNetworkModule_swigregister(WyNetworkModule)
WyNetworkModule_init = _pynetwork.WyNetworkModule_init
WyNetworkModule_instance = _pynetwork.WyNetworkModule_instance
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb762eb8c>}
import _pynetwork
import new
new_instancemethod = new.instancemethod
try:
	_swig_property = property
except NameError:
	pass
def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
	if name == 'thisown':
		return self.this.own(value)
	if name == 'this':
		if type(value).__name__ == 'PySwigObject':
			self.__dict__[name] = value
			return None
	method = class_type.__swig_setmethods__.get(name, None)
	if method:
		return method(self, value)
	if not static or hasattr(self, name):
		self.__dict__[name] = value
	else:
		raise AttributeError('You cannot add attributes to %s' % self)
	return None

def _swig_setattr(self, class_type, name, value):
	return _swig_setattr_nondynamic(self, class_type, name, value, 0)

def _swig_getattr(self, class_type, name):
	if name == 'thisown':
		return self.this.own()
	method = class_type.__swig_getmethods__.get(name, None)
	if method:
		return method(self)
	raise AttributeError, name
	return None

def _swig_repr(self):
	try:
		strthis = 'proxy of ' + self.this.__repr__()
	except:
		strthis = ''
	return '<%s.%s; %s >' % (self.__class__.__module__, self.__class__.__name__, strthis)

import types
try:
	_object = types.ObjectType
	_newclass = 1
except AttributeError:
	class _object():
		pass

	_newclass = 0
del types
class PySwigIterator(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, PySwigIterator, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, PySwigIterator, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr
	__swig_destroy__ = _pynetwork.delete_PySwigIterator
	def __del__(self):
		return None

	def value(*args):
		return _pynetwork.PySwigIterator_value(*args)

	def incr(*args):
		return _pynetwork.PySwigIterator_incr(*args)

	def decr(*args):
		return _pynetwork.PySwigIterator_decr(*args)

	def distance(*args):
		return _pynetwork.PySwigIterator_distance(*args)

	def equal(*args):
		return _pynetwork.PySwigIterator_equal(*args)

	def copy(*args):
		return _pynetwork.PySwigIterator_copy(*args)

	def next(*args):
		return _pynetwork.PySwigIterator_next(*args)

	def previous(*args):
		return _pynetwork.PySwigIterator_previous(*args)

	def advance(*args):
		return _pynetwork.PySwigIterator_advance(*args)

	def __eq__(*args):
		return _pynetwork.PySwigIterator___eq__(*args)

	def __ne__(*args):
		return _pynetwork.PySwigIterator___ne__(*args)

	def __iadd__(*args):
		return _pynetwork.PySwigIterator___iadd__(*args)

	def __isub__(*args):
		return _pynetwork.PySwigIterator___isub__(*args)

	def __add__(*args):
		return _pynetwork.PySwigIterator___add__(*args)

	def __sub__(*args):
		return _pynetwork.PySwigIterator___sub__(*args)

	def __iter__(self):
		return self



PySwigIterator_swigregister = _pynetwork.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)
class vectors(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, vectors, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, vectors, name)

	__repr__ = _swig_repr
	def iterator(*args):
		return _pynetwork.vectors_iterator(*args)

	def __iter__(self):
		return self.iterator()

	def __nonzero__(*args):
		return _pynetwork.vectors___nonzero__(*args)

	def __len__(*args):
		return _pynetwork.vectors___len__(*args)

	def pop(*args):
		return _pynetwork.vectors_pop(*args)

	def __getslice__(*args):
		return _pynetwork.vectors___getslice__(*args)

	def __setslice__(*args):
		return _pynetwork.vectors___setslice__(*args)

	def __delslice__(*args):
		return _pynetwork.vectors___delslice__(*args)

	def __delitem__(*args):
		return _pynetwork.vectors___delitem__(*args)

	def __getitem__(*args):
		return _pynetwork.vectors___getitem__(*args)

	def __setitem__(*args):
		return _pynetwork.vectors___setitem__(*args)

	def append(*args):
		return _pynetwork.vectors_append(*args)

	def empty(*args):
		return _pynetwork.vectors_empty(*args)

	def size(*args):
		return _pynetwork.vectors_size(*args)

	def clear(*args):
		return _pynetwork.vectors_clear(*args)

	def swap(*args):
		return _pynetwork.vectors_swap(*args)

	def get_allocator(*args):
		return _pynetwork.vectors_get_allocator(*args)

	def begin(*args):
		return _pynetwork.vectors_begin(*args)

	def end(*args):
		return _pynetwork.vectors_end(*args)

	def rbegin(*args):
		return _pynetwork.vectors_rbegin(*args)

	def rend(*args):
		return _pynetwork.vectors_rend(*args)

	def pop_back(*args):
		return _pynetwork.vectors_pop_back(*args)

	def erase(*args):
		return _pynetwork.vectors_erase(*args)

	def __init__(self, *args):
		this = _pynetwork.new_vectors(*args)
		try:
			self.this.append(this)
		except:
			self.this = this

	def push_back(*args):
		return _pynetwork.vectors_push_back(*args)

	def front(*args):
		return _pynetwork.vectors_front(*args)

	def back(*args):
		return _pynetwork.vectors_back(*args)

	def assign(*args):
		return _pynetwork.vectors_assign(*args)

	def resize(*args):
		return _pynetwork.vectors_resize(*args)

	def insert(*args):
		return _pynetwork.vectors_insert(*args)

	def reserve(*args):
		return _pynetwork.vectors_reserve(*args)

	def capacity(*args):
		return _pynetwork.vectors_capacity(*args)

	__swig_destroy__ = _pynetwork.delete_vectors
	def __del__(self):
		return None



vectors_swigregister = _pynetwork.vectors_swigregister
vectors_swigregister(vectors)
class WyNetworkModule(_object):
	__swig_setmethods__ = {}
	def __setattr__(self, name, value):
		return _swig_setattr(self, WyNetworkModule, name, value)

	__swig_getmethods__ = {}
	def __getattr__(self, name):
		return _swig_getattr(self, WyNetworkModule, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr
	def __swig_getmethods__['init'](x):
		return _pynetwork.WyNetworkModule_init

	if _newclass:
		init = staticmethod(_pynetwork.WyNetworkModule_init)
	def __swig_getmethods__['instance'](x):
		return _pynetwork.WyNetworkModule_instance

	if _newclass:
		instance = staticmethod(_pynetwork.WyNetworkModule_instance)
	def getConfigurations(*args):
		return _pynetwork.WyNetworkModule_getConfigurations(*args)

	def getConfiguration(*args):
		return _pynetwork.WyNetworkModule_getConfiguration(*args)

	def getNetworkCapabilities(*args):
		return _pynetwork.WyNetworkModule_getNetworkCapabilities(*args)

	def setConfiguration(*args):
		return _pynetwork.WyNetworkModule_setConfiguration(*args)

	def setActiveConfiguration(*args):
		return _pynetwork.WyNetworkModule_setActiveConfiguration(*args)

	__swig_destroy__ = _pynetwork.delete_WyNetworkModule
	def __del__(self):
		return None



WyNetworkModule_swigregister = _pynetwork.WyNetworkModule_swigregister
WyNetworkModule_swigregister(WyNetworkModule)
WyNetworkModule_init = _pynetwork.WyNetworkModule_init
WyNetworkModule_instance = _pynetwork.WyNetworkModule_instance
