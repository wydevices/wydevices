# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 264
n 264(None)[simplejson.dump(obj, outfile, sort_keys=True, indent=4)
outfile.write('\n')
]:
	i: 212(), 241(), 262(AE)
	o: 

nname: 262
n 262(None)[]:
	i: 231(f)
	o: 264(AE)

nname: 241
n 241(None)[#, e
raise SystemExit(e)
]:
	i: 231(t)
	o: 264()

nname: 231
n 231(<dummy_ex3> EXC_MATCH ValueError)[]:
	i: 209(except)
	o: 241(t), 262(f)

nname: 212
n 212(None)[obj = simplejson.load(infile)
]:
	i: 209(try)
	o: 264()

nname: 209
n 209(None)[]:
	i: 33(), 77(), 134(), 182()
	o: 212(try), 231(except)

nname: 182
n 182(None)[raise SystemExit('%s [infile [outfile]]' % (sys.argv[0],))
]:
	i: 112(f)
	o: 209()

nname: 134
n 134(None)[infile = open(sys.argv[1], 'rb')
outfile = open(sys.argv[2], 'wb')
]:
	i: 112(t)
	o: 209()

nname: 112
n 112(len(sys.argv) == 3)[]:
	i: 55(f)
	o: 134(t), 182(f)

nname: 77
n 77(None)[infile = open(sys.argv[1], 'rb')
outfile = sys.stdout
]:
	i: 55(t)
	o: 209()

nname: 55
n 55(len(sys.argv) == 2)[]:
	i: 0(f)
	o: 77(t), 112(f)

nname: 33
n 33(None)[infile = sys.stdin
outfile = sys.stdout
]:
	i: 0(t)
	o: 209()

nname: 0
n 0(len(sys.argv) == 1)[import sys
]:
	i: 
	o: 33(t), 55(f)

nname: 264
n 264(None)[simplejson.dump(obj, outfile, sort_keys=True, indent=4)
outfile.write('\n')
]:
	i: 212()
	o: 

nname: 212
n 212(None)[try:
	obj = simplejson.load(infile)
except ValueError, e:
	raise SystemExit(e)
]:
	i: 0(try)
	o: 264()

nname: 0
n 0(None)[import sys
if len(sys.argv) == 1:
	infile = sys.stdin
	outfile = sys.stdout
else:
	if len(sys.argv) == 2:
		infile = open(sys.argv[1], 'rb')
		outfile = sys.stdout
	else:
		if len(sys.argv) == 3:
			infile = open(sys.argv[1], 'rb')
			outfile = open(sys.argv[2], 'wb')
		else:
			raise SystemExit('%s [infile [outfile]]' % (sys.argv[0],))
]:
	i: 
	o: 212(try)

nname: 264
n 264(None)[simplejson.dump(obj, outfile, sort_keys=True, indent=4)
outfile.write('\n')
]:
	i: 0()
	o: 

nname: 0
n 0(None)[import sys
if len(sys.argv) == 1:
	infile = sys.stdin
	outfile = sys.stdout
else:
	if len(sys.argv) == 2:
		infile = open(sys.argv[1], 'rb')
		outfile = sys.stdout
	else:
		if len(sys.argv) == 3:
			infile = open(sys.argv[1], 'rb')
			outfile = open(sys.argv[2], 'wb')
		else:
			raise SystemExit('%s [infile [outfile]]' % (sys.argv[0],))
try:
	obj = simplejson.load(infile)
except ValueError, e:
	raise SystemExit(e)
]:
	i: 
	o: 264()

nname: 0
n 0(None)[import sys
if len(sys.argv) == 1:
	infile = sys.stdin
	outfile = sys.stdout
else:
	if len(sys.argv) == 2:
		infile = open(sys.argv[1], 'rb')
		outfile = sys.stdout
	else:
		if len(sys.argv) == 3:
			infile = open(sys.argv[1], 'rb')
			outfile = open(sys.argv[2], 'wb')
		else:
			raise SystemExit('%s [infile [outfile]]' % (sys.argv[0],))
try:
	obj = simplejson.load(infile)
except ValueError, e:
	raise SystemExit(e)
simplejson.dump(obj, outfile, sort_keys=True, indent=4)
outfile.write('\n')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760ff2c>}
nname: 51
n 51(None)[]:
	i: 39(), 50()
	o: 

nname: 50
n 50(None)[]:
	i: 0(f)
	o: 51()

nname: 39
n 39(None)[main()
]:
	i: 0(t)
	o: 51()

nname: 0
n 0(__name__ == '__main__')[__doc__ = 'Using simplejson from the shell to validate and\npretty-print::\n\n    $ echo \'{"json":"obj"}\' | python -msimplejson.tool\n    {\n        "json": "obj"\n    }\n    $ echo \'{ 1.2:3.4}\' | python -msimplejson.tool\n    Expecting property name: line 1 column 2 (char 2)\n'
import simplejson
def main():
	import sys
	if len(sys.argv) == 1:
		infile = sys.stdin
		outfile = sys.stdout
	else:
		if len(sys.argv) == 2:
			infile = open(sys.argv[1], 'rb')
			outfile = sys.stdout
		else:
			if len(sys.argv) == 3:
				infile = open(sys.argv[1], 'rb')
				outfile = open(sys.argv[2], 'wb')
			else:
				raise SystemExit('%s [infile [outfile]]' % (sys.argv[0],))
	try:
		obj = simplejson.load(infile)
	except ValueError, e:
		raise SystemExit(e)
	simplejson.dump(obj, outfile, sort_keys=True, indent=4)
	outfile.write('\n')

]:
	i: 
	o: 39(t), 50(f)

nname: 0
n 0(None)[__doc__ = 'Using simplejson from the shell to validate and\npretty-print::\n\n    $ echo \'{"json":"obj"}\' | python -msimplejson.tool\n    {\n        "json": "obj"\n    }\n    $ echo \'{ 1.2:3.4}\' | python -msimplejson.tool\n    Expecting property name: line 1 column 2 (char 2)\n'
import simplejson
def main():
	import sys
	if len(sys.argv) == 1:
		infile = sys.stdin
		outfile = sys.stdout
	else:
		if len(sys.argv) == 2:
			infile = open(sys.argv[1], 'rb')
			outfile = sys.stdout
		else:
			if len(sys.argv) == 3:
				infile = open(sys.argv[1], 'rb')
				outfile = open(sys.argv[2], 'wb')
			else:
				raise SystemExit('%s [infile [outfile]]' % (sys.argv[0],))
	try:
		obj = simplejson.load(infile)
	except ValueError, e:
		raise SystemExit(e)
	simplejson.dump(obj, outfile, sort_keys=True, indent=4)
	outfile.write('\n')

if __name__ == '__main__':
	main()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7683c4c>}
__doc__ = 'Using simplejson from the shell to validate and\npretty-print::\n\n    $ echo \'{"json":"obj"}\' | python -msimplejson.tool\n    {\n        "json": "obj"\n    }\n    $ echo \'{ 1.2:3.4}\' | python -msimplejson.tool\n    Expecting property name: line 1 column 2 (char 2)\n'
import simplejson
def main():
	import sys
	if len(sys.argv) == 1:
		infile = sys.stdin
		outfile = sys.stdout
	else:
		if len(sys.argv) == 2:
			infile = open(sys.argv[1], 'rb')
			outfile = sys.stdout
		else:
			if len(sys.argv) == 3:
				infile = open(sys.argv[1], 'rb')
				outfile = open(sys.argv[2], 'wb')
			else:
				raise SystemExit('%s [infile [outfile]]' % (sys.argv[0],))
	try:
		obj = simplejson.load(infile)
	except ValueError, e:
		raise SystemExit(e)
	simplejson.dump(obj, outfile, sort_keys=True, indent=4)
	outfile.write('\n')

if __name__ == '__main__':
	main()
