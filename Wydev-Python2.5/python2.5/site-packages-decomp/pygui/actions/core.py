# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 0
n 0(None)[self.name = module.name
self.position = module.position
self.category = module.category.strip().lower()
self._module = module
self.default = getattr(module, 'default', False)
self.unique = getattr(module, 'unique', False)
GenericContainer.__init__(self, self.name, type_='action')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7710cec>}
nname: 0
n 0(None)[return self._module.is_available(context)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb77102ec>}
nname: 71
n 71(None)[]:
	i: 3(), 33(), 69(AE)
	o: 

nname: 69
n 69(None)[]:
	i: 23(f)
	o: 71(AE)

nname: 33
n 33(None)[#, e
log.error('get_action_info_list failed !')
PRINT_EXCEPTION(e)
return []
]:
	i: 23(t)
	o: 71()

nname: 23
n 23(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 33(t), 69(f)

nname: 3
n 3(None)[return self._module.get_action_info_list(context)
]:
	i: 0(try)
	o: 71()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 23(except)

nname: 23
n 23(None)[except Exception, e:
	log.error('get_action_info_list failed !')
	PRINT_EXCEPTION(e)
	return []
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	return self._module.get_action_info_list(context)
]:
	i: 
	o: 23()

nname: 0
n 0(None)[try:
	return self._module.get_action_info_list(context)
except Exception, e:
	log.error('get_action_info_list failed !')
	PRINT_EXCEPTION(e)
	return []
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7710fec>}
nname: 0
n 0(None)[return cmp(self.position, other.position)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb771026c>}
nname: 6
n 6(None)[__doc__ = '\n    A Container representing an actions module.\n    Each actions module should be a subdirectory.\n    ActionsGroup are used by hand menu to access the actions\n    '
def __init__(self, module):
	self.name = module.name
	self.position = module.position
	self.category = module.category.strip().lower()
	self._module = module
	self.default = getattr(module, 'default', False)
	self.unique = getattr(module, 'unique', False)
	GenericContainer.__init__(self, self.name, type_='action')

def is_available(self, context):
	return self._module.is_available(context)

def browse(self, context=None):
	try:
		return self._module.get_action_info_list(context)
	except Exception, e:
		log.error('get_action_info_list failed !')
		PRINT_EXCEPTION(e)
		return []

def __cmp__(self, other):
	return cmp(self.position, other.position)

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb770becc>}
nname: 89
n 89(None)[return chosen_group_list
]:
	i: 0(AL), 88()
	o: 

nname: 88
n 88(None)[]:
	i: 13(AF), 66()
	o: 89()

nname: 66
n 66(None)[group.sensitive = False
group.display_type = 'blank'
]:
	i: 20(f), 38()
	o: 88()

nname: 38
n 38(None)[group.sensitive = True
group.display_type = group._module.image
continue
]:
	i: 20(t)
	o: 66()

nname: 20
n 20(group.is_available(context))[for group in chosen_group_list:
]:
	i: 13(for)
	o: 38(t), 66(f)

nname: 13
n 13(None)[]:
	i: 0(loop)
	o: 20(for), 88(AF)

nname: 0
n 0(None)[chosen_group_list = category_dict[category]
]:
	i: 
	o: 13(loop), 89(AL)

nname: 89
n 89(None)[return chosen_group_list
]:
	i: 0(AL), 13(AF), 20()
	o: 

nname: 20
n 20(None)[for group in chosen_group_list:
if group.is_available(context):
	group.sensitive = True
	group.display_type = group._module.image
	continue
group.sensitive = False
group.display_type = 'blank'
]:
	i: 13(for)
	o: 89()

nname: 13
n 13(None)[]:
	i: 0(loop)
	o: 20(for), 89(AF)

nname: 0
n 0(None)[chosen_group_list = category_dict[category]
]:
	i: 
	o: 13(loop), 89(AL)

nname: 20
n 20(None)[for group in chosen_group_list:
	if group.is_available(context):
		group.sensitive = True
		group.display_type = group._module.image
		continue
	group.sensitive = False
	group.display_type = 'blank'
return chosen_group_list
]:
	i: 0(for)
	o: 

nname: 0
n 0(None)[chosen_group_list = category_dict[category]
]:
	i: 
	o: 20(for)

nname: 0
n 0(None)[chosen_group_list = category_dict[category]
for group in chosen_group_list:
	if group.is_available(context):
		group.sensitive = True
		group.display_type = group._module.image
		continue
	group.sensitive = False
	group.display_type = 'blank'
return chosen_group_list
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb770b66c>}
nname: 288
n 288(None)[def get_actiongroups_by_category(context, category):
	chosen_group_list = category_dict[category]
	for group in chosen_group_list:
		if group.is_available(context):
			group.sensitive = True
			group.display_type = group._module.image
			continue
		group.sensitive = False
		group.display_type = 'blank'
	return chosen_group_list

__all__ = ['get_actiongroups_by_category']
]:
	i: 255(AL), 287()
	o: 

nname: 287
n 287(None)[]:
	i: 258(AF), 271()
	o: 288()

nname: 271
n 271(None)[for group_list in category_dict.values():
group_list.sort()
]:
	i: 258(for)
	o: 287()

nname: 258
n 258(None)[]:
	i: 255(loop)
	o: 271(for), 287(AF)

nname: 255
n 255(None)[]:
	i: 0(AL), 254()
	o: 258(loop), 288(AL)

nname: 254
n 254(None)[]:
	i: 149(AF), 231()
	o: 255()

nname: 231
n 231(None)[category_dict[ag.category].append(ag)
]:
	i: 213(), 230()
	o: 254()

nname: 230
n 230(None)[]:
	i: 168(t)
	o: 231()

nname: 213
n 213(None)[category_dict[ag.category] = []
]:
	i: 168(f)
	o: 231()

nname: 168
n 168(category_dict.has_key(ag.category))[for action in config.plugins.get('hand_actions'):
exec 'from . import hand_%s as act_module' % action
ag = ActionsGroup(act_module)
]:
	i: 149(for)
	o: 213(f), 230(t)

nname: 149
n 149(None)[]:
	i: 0(loop)
	o: 168(for), 254(AF)

nname: 0
n 0(None)[from __future__ import absolute_import
import os
from pygui.item.core import ActionItem, Item
from pygui.item.containers import GenericContainer
import pygui.config as config
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
log = GET_LOGGER(__name__)
class ActionsGroup(GenericContainer):
	__doc__ = '\n    A Container representing an actions module.\n    Each actions module should be a subdirectory.\n    ActionsGroup are used by hand menu to access the actions\n    '
	def __init__(self, module):
		self.name = module.name
		self.position = module.position
		self.category = module.category.strip().lower()
		self._module = module
		self.default = getattr(module, 'default', False)
		self.unique = getattr(module, 'unique', False)
		GenericContainer.__init__(self, self.name, type_='action')

	def is_available(self, context):
		return self._module.is_available(context)

	def browse(self, context=None):
		try:
			return self._module.get_action_info_list(context)
		except Exception, e:
			log.error('get_action_info_list failed !')
			PRINT_EXCEPTION(e)
			return []

	def __cmp__(self, other):
		return cmp(self.position, other.position)



category_dict = dict()
]:
	i: 
	o: 149(loop), 255(AL)

nname: 288
n 288(None)[def get_actiongroups_by_category(context, category):
	chosen_group_list = category_dict[category]
	for group in chosen_group_list:
		if group.is_available(context):
			group.sensitive = True
			group.display_type = group._module.image
			continue
		group.sensitive = False
		group.display_type = 'blank'
	return chosen_group_list

__all__ = ['get_actiongroups_by_category']
]:
	i: 271()
	o: 

nname: 271
n 271(None)[for group_list in category_dict.values():
	group_list.sort()
]:
	i: 255(for)
	o: 288()

nname: 255
n 255(None)[]:
	i: 0(AL), 149(AF), 168()
	o: 271(for)

nname: 168
n 168(None)[for action in config.plugins.get('hand_actions'):
exec 'from . import hand_%s as act_module' % action
ag = ActionsGroup(act_module)
if not category_dict.has_key(ag.category):
	category_dict[ag.category] = []
category_dict[ag.category].append(ag)
]:
	i: 149(for)
	o: 255()

nname: 149
n 149(None)[]:
	i: 0(loop)
	o: 168(for), 255(AF)

nname: 0
n 0(None)[from __future__ import absolute_import
import os
from pygui.item.core import ActionItem, Item
from pygui.item.containers import GenericContainer
import pygui.config as config
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
log = GET_LOGGER(__name__)
class ActionsGroup(GenericContainer):
	__doc__ = '\n    A Container representing an actions module.\n    Each actions module should be a subdirectory.\n    ActionsGroup are used by hand menu to access the actions\n    '
	def __init__(self, module):
		self.name = module.name
		self.position = module.position
		self.category = module.category.strip().lower()
		self._module = module
		self.default = getattr(module, 'default', False)
		self.unique = getattr(module, 'unique', False)
		GenericContainer.__init__(self, self.name, type_='action')

	def is_available(self, context):
		return self._module.is_available(context)

	def browse(self, context=None):
		try:
			return self._module.get_action_info_list(context)
		except Exception, e:
			log.error('get_action_info_list failed !')
			PRINT_EXCEPTION(e)
			return []

	def __cmp__(self, other):
		return cmp(self.position, other.position)



category_dict = dict()
]:
	i: 
	o: 149(loop), 255(AL)

nname: 271
n 271(None)[for group_list in category_dict.values():
	group_list.sort()
def get_actiongroups_by_category(context, category):
	chosen_group_list = category_dict[category]
	for group in chosen_group_list:
		if group.is_available(context):
			group.sensitive = True
			group.display_type = group._module.image
			continue
		group.sensitive = False
		group.display_type = 'blank'
	return chosen_group_list

__all__ = ['get_actiongroups_by_category']
]:
	i: 168(for)
	o: 

nname: 168
n 168(None)[for action in config.plugins.get('hand_actions'):
	exec 'from . import hand_%s as act_module' % action
	ag = ActionsGroup(act_module)
	if not category_dict.has_key(ag.category):
		category_dict[ag.category] = []
	category_dict[ag.category].append(ag)
]:
	i: 0(for)
	o: 271(for)

nname: 0
n 0(None)[from __future__ import absolute_import
import os
from pygui.item.core import ActionItem, Item
from pygui.item.containers import GenericContainer
import pygui.config as config
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
log = GET_LOGGER(__name__)
class ActionsGroup(GenericContainer):
	__doc__ = '\n    A Container representing an actions module.\n    Each actions module should be a subdirectory.\n    ActionsGroup are used by hand menu to access the actions\n    '
	def __init__(self, module):
		self.name = module.name
		self.position = module.position
		self.category = module.category.strip().lower()
		self._module = module
		self.default = getattr(module, 'default', False)
		self.unique = getattr(module, 'unique', False)
		GenericContainer.__init__(self, self.name, type_='action')

	def is_available(self, context):
		return self._module.is_available(context)

	def browse(self, context=None):
		try:
			return self._module.get_action_info_list(context)
		except Exception, e:
			log.error('get_action_info_list failed !')
			PRINT_EXCEPTION(e)
			return []

	def __cmp__(self, other):
		return cmp(self.position, other.position)



category_dict = dict()
]:
	i: 
	o: 168(for)

nname: 271
n 271(None)[for group_list in category_dict.values():
	group_list.sort()
def get_actiongroups_by_category(context, category):
	chosen_group_list = category_dict[category]
	for group in chosen_group_list:
		if group.is_available(context):
			group.sensitive = True
			group.display_type = group._module.image
			continue
		group.sensitive = False
		group.display_type = 'blank'
	return chosen_group_list

__all__ = ['get_actiongroups_by_category']
]:
	i: 0(for)
	o: 

nname: 0
n 0(None)[from __future__ import absolute_import
import os
from pygui.item.core import ActionItem, Item
from pygui.item.containers import GenericContainer
import pygui.config as config
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
log = GET_LOGGER(__name__)
class ActionsGroup(GenericContainer):
	__doc__ = '\n    A Container representing an actions module.\n    Each actions module should be a subdirectory.\n    ActionsGroup are used by hand menu to access the actions\n    '
	def __init__(self, module):
		self.name = module.name
		self.position = module.position
		self.category = module.category.strip().lower()
		self._module = module
		self.default = getattr(module, 'default', False)
		self.unique = getattr(module, 'unique', False)
		GenericContainer.__init__(self, self.name, type_='action')

	def is_available(self, context):
		return self._module.is_available(context)

	def browse(self, context=None):
		try:
			return self._module.get_action_info_list(context)
		except Exception, e:
			log.error('get_action_info_list failed !')
			PRINT_EXCEPTION(e)
			return []

	def __cmp__(self, other):
		return cmp(self.position, other.position)



category_dict = dict()
for action in config.plugins.get('hand_actions'):
	exec 'from . import hand_%s as act_module' % action
	ag = ActionsGroup(act_module)
	if not category_dict.has_key(ag.category):
		category_dict[ag.category] = []
	category_dict[ag.category].append(ag)
]:
	i: 
	o: 271(for)

nname: 0
n 0(None)[from __future__ import absolute_import
import os
from pygui.item.core import ActionItem, Item
from pygui.item.containers import GenericContainer
import pygui.config as config
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
log = GET_LOGGER(__name__)
class ActionsGroup(GenericContainer):
	__doc__ = '\n    A Container representing an actions module.\n    Each actions module should be a subdirectory.\n    ActionsGroup are used by hand menu to access the actions\n    '
	def __init__(self, module):
		self.name = module.name
		self.position = module.position
		self.category = module.category.strip().lower()
		self._module = module
		self.default = getattr(module, 'default', False)
		self.unique = getattr(module, 'unique', False)
		GenericContainer.__init__(self, self.name, type_='action')

	def is_available(self, context):
		return self._module.is_available(context)

	def browse(self, context=None):
		try:
			return self._module.get_action_info_list(context)
		except Exception, e:
			log.error('get_action_info_list failed !')
			PRINT_EXCEPTION(e)
			return []

	def __cmp__(self, other):
		return cmp(self.position, other.position)



category_dict = dict()
for action in config.plugins.get('hand_actions'):
	exec 'from . import hand_%s as act_module' % action
	ag = ActionsGroup(act_module)
	if not category_dict.has_key(ag.category):
		category_dict[ag.category] = []
	category_dict[ag.category].append(ag)
for group_list in category_dict.values():
	group_list.sort()
def get_actiongroups_by_category(context, category):
	chosen_group_list = category_dict[category]
	for group in chosen_group_list:
		if group.is_available(context):
			group.sensitive = True
			group.display_type = group._module.image
			continue
		group.sensitive = False
		group.display_type = 'blank'
	return chosen_group_list

__all__ = ['get_actiongroups_by_category']
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb770b8ec>}
from __future__ import absolute_import
import os
from pygui.item.core import ActionItem, Item
from pygui.item.containers import GenericContainer
import pygui.config as config
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
log = GET_LOGGER(__name__)
class ActionsGroup(GenericContainer):
	__doc__ = '\n    A Container representing an actions module.\n    Each actions module should be a subdirectory.\n    ActionsGroup are used by hand menu to access the actions\n    '
	def __init__(self, module):
		self.name = module.name
		self.position = module.position
		self.category = module.category.strip().lower()
		self._module = module
		self.default = getattr(module, 'default', False)
		self.unique = getattr(module, 'unique', False)
		GenericContainer.__init__(self, self.name, type_='action')

	def is_available(self, context):
		return self._module.is_available(context)

	def browse(self, context=None):
		try:
			return self._module.get_action_info_list(context)
		except Exception, e:
			log.error('get_action_info_list failed !')
			PRINT_EXCEPTION(e)
			return []

	def __cmp__(self, other):
		return cmp(self.position, other.position)



category_dict = dict()
for action in config.plugins.get('hand_actions'):
	exec 'from . import hand_%s as act_module' % action
	ag = ActionsGroup(act_module)
	if not category_dict.has_key(ag.category):
		category_dict[ag.category] = []
	category_dict[ag.category].append(ag)
for group_list in category_dict.values():
	group_list.sort()
def get_actiongroups_by_category(context, category):
	chosen_group_list = category_dict[category]
	for group in chosen_group_list:
		if group.is_available(context):
			group.sensitive = True
			group.display_type = group._module.image
			continue
		group.sensitive = False
		group.display_type = 'blank'
	return chosen_group_list

__all__ = ['get_actiongroups_by_category']
