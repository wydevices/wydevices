# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 0
n 0(None)[return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75bd08c>}
nname: 369
n 369(None)[return act
]:
	i: 315(), 368()
	o: 

nname: 368
n 368(None)[]:
	i: 303(f)
	o: 369()

nname: 315
n 315(None)[act = [ActionItem(_('Display program guide'), type_='action', action=display_epg, args=[context['menu'], stack])]
]:
	i: 303(t)
	o: 369()

nname: 303
n 303(menu_type in ('tv_navigator',))[]:
	i: 252(JA), 298(), 302()
	o: 315(t), 368(f)

nname: 302
n 302(None)[]:
	i: 0(f)
	o: 303()

nname: 298
n 298(None)[]:
	i: 77(f)
	o: 303()

nname: 252
n 252(None)[act.append(ActionItem(name, type_='action', action=action, args=[context, stack]))
]:
	i: 175(), 233()
	o: 303(JA)

nname: 233
n 233(None)[name = _('Set to parent mode')
action = switch_to_parent_mode
]:
	i: 92(f)
	o: 252()

nname: 175
n 175(None)[val, name_hide = (True, _('Display hidden items'))
act.append(ActionItem(name_hide, type_='action', action=display_hidden_items, args=[val, context, stack]))
]:
	i: 140(), 159()
	o: 252()

nname: 159
n 159(None)[]:
	i: 107(f)
	o: 175()

nname: 140
n 140(None)[]:
	i: 107(t)
	o: 175()

nname: 107
n 107(user_config['security']['show_hidden'])[name = _('Set to child mode')
action = switch_to_children_mode
]:
	i: 92(t)
	o: 140(t), 159(f)

nname: 92
n 92(user_config['security']['parent_mode'])[]:
	i: 77(t)
	o: 107(t), 233(f)

nname: 77
n 77(user_config['security']['parental_control'])[]:
	i: 0(t)
	o: 92(t), 298(f)

nname: 0
n 0(menu_type in ('image', 'video', 'video_image', 'audio'))[stack = pygui_globs['menustack']
menu_type = context['menu'].type
act = [ActionItem(_('Search'), type_='action', action=push_search_menu, args=[context])]
]:
	i: 
	o: 77(t), 302(f)

nname: 303
n 303(None)[if menu_type in ('tv_navigator',):
	act = [ActionItem(_('Display program guide'), type_='action', action=display_epg, args=[context['menu'], stack])]
return act
]:
	i: 252(JA), 77(f), 0(f)
	o: 

nname: 252
n 252(None)[act.append(ActionItem(name, type_='action', action=action, args=[context, stack]))
]:
	i: 107(), 233()
	o: 303(JA)

nname: 233
n 233(None)[name = _('Set to parent mode')
action = switch_to_parent_mode
]:
	i: 92(f)
	o: 252()

nname: 107
n 107(None)[name = _('Set to child mode')
action = switch_to_children_mode
if user_config['security']['show_hidden']:
	pass
val, name_hide = (True, _('Display hidden items'))
act.append(ActionItem(name_hide, type_='action', action=display_hidden_items, args=[val, context, stack]))
]:
	i: 92(t)
	o: 252()

nname: 92
n 92(user_config['security']['parent_mode'])[]:
	i: 77(t)
	o: 107(t), 233(f)

nname: 77
n 77(user_config['security']['parental_control'])[]:
	i: 0(t)
	o: 92(t), 303(f)

nname: 0
n 0(menu_type in ('image', 'video', 'video_image', 'audio'))[stack = pygui_globs['menustack']
menu_type = context['menu'].type
act = [ActionItem(_('Search'), type_='action', action=push_search_menu, args=[context])]
]:
	i: 
	o: 77(t), 303(f)

nname: 303
n 303(None)[if menu_type in ('tv_navigator',):
	act = [ActionItem(_('Display program guide'), type_='action', action=display_epg, args=[context['menu'], stack])]
return act
]:
	i: 92(JA), 77(f), 0(f)
	o: 

nname: 92
n 92(None)[if user_config['security']['parent_mode']:
	name = _('Set to child mode')
	action = switch_to_children_mode
	if user_config['security']['show_hidden']:
		pass
	val, name_hide = (True, _('Display hidden items'))
	act.append(ActionItem(name_hide, type_='action', action=display_hidden_items, args=[val, context, stack]))
else:
	name = _('Set to parent mode')
	action = switch_to_parent_mode
act.append(ActionItem(name, type_='action', action=action, args=[context, stack]))
]:
	i: 77(t)
	o: 303(JA)

nname: 77
n 77(user_config['security']['parental_control'])[]:
	i: 0(t)
	o: 92(t), 303(f)

nname: 0
n 0(menu_type in ('image', 'video', 'video_image', 'audio'))[stack = pygui_globs['menustack']
menu_type = context['menu'].type
act = [ActionItem(_('Search'), type_='action', action=push_search_menu, args=[context])]
]:
	i: 
	o: 77(t), 303(f)

nname: 0
n 0(None)[stack = pygui_globs['menustack']
menu_type = context['menu'].type
act = [ActionItem(_('Search'), type_='action', action=push_search_menu, args=[context])]
if menu_type in ('image', 'video', 'video_image', 'audio'):
	if user_config['security']['parental_control']:
		if user_config['security']['parent_mode']:
			name = _('Set to child mode')
			action = switch_to_children_mode
			if user_config['security']['show_hidden']:
				pass
			val, name_hide = (True, _('Display hidden items'))
			act.append(ActionItem(name_hide, type_='action', action=display_hidden_items, args=[val, context, stack]))
		else:
			name = _('Set to parent mode')
			action = switch_to_parent_mode
		act.append(ActionItem(name, type_='action', action=action, args=[context, stack]))
if menu_type in ('tv_navigator',):
	act = [ActionItem(_('Display program guide'), type_='action', action=display_epg, args=[context['menu'], stack])]
return act
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75cc9ec>}
nname: 0
n 0(None)[from __future__ import absolute_import
name = 'Universe'
position = 1
image = 'hand_universe'
category = 'navigator'
default = False
unique = False
from pygui.actions.jobs.common import push_search_menu, switch_to_children_mode, switch_to_parent_mode, display_hidden_items
from pygui.actions.jobs.tv import display_epg
from pygui.item.core import ActionItem
from pygui.shared import pygui_globs
from pygui.config import user_config
def is_available(context):
	return True

def get_action_info_list(context):
	stack = pygui_globs['menustack']
	menu_type = context['menu'].type
	act = [ActionItem(_('Search'), type_='action', action=push_search_menu, args=[context])]
	if menu_type in ('image', 'video', 'video_image', 'audio'):
		if user_config['security']['parental_control']:
			if user_config['security']['parent_mode']:
				name = _('Set to child mode')
				action = switch_to_children_mode
				if user_config['security']['show_hidden']:
					pass
				val, name_hide = (True, _('Display hidden items'))
				act.append(ActionItem(name_hide, type_='action', action=display_hidden_items, args=[val, context, stack]))
			else:
				name = _('Set to parent mode')
				action = switch_to_parent_mode
			act.append(ActionItem(name, type_='action', action=action, args=[context, stack]))
	if menu_type in ('tv_navigator',):
		act = [ActionItem(_('Display program guide'), type_='action', action=display_epg, args=[context['menu'], stack])]
	return act

]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75b5b6c>}
from __future__ import absolute_import
name = 'Universe'
position = 1
image = 'hand_universe'
category = 'navigator'
default = False
unique = False
from pygui.actions.jobs.common import push_search_menu, switch_to_children_mode, switch_to_parent_mode, display_hidden_items
from pygui.actions.jobs.tv import display_epg
from pygui.item.core import ActionItem
from pygui.shared import pygui_globs
from pygui.config import user_config
def is_available(context):
	return True

def get_action_info_list(context):
	stack = pygui_globs['menustack']
	menu_type = context['menu'].type
	act = [ActionItem(_('Search'), type_='action', action=push_search_menu, args=[context])]
	if menu_type in ('image', 'video', 'video_image', 'audio'):
		if user_config['security']['parental_control']:
			if user_config['security']['parent_mode']:
				name = _('Set to child mode')
				action = switch_to_children_mode
				if user_config['security']['show_hidden']:
					pass
				val, name_hide = (True, _('Display hidden items'))
				act.append(ActionItem(name_hide, type_='action', action=display_hidden_items, args=[val, context, stack]))
			else:
				name = _('Set to parent mode')
				action = switch_to_parent_mode
			act.append(ActionItem(name, type_='action', action=action, args=[context, stack]))
	if menu_type in ('tv_navigator',):
		act = [ActionItem(_('Display program guide'), type_='action', action=display_epg, args=[context['menu'], stack])]
	return act

