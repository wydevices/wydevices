# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 454
n 454(None)[]:
	i: 437(), 453()
	o: 

nname: 453
n 453(None)[]:
	i: 416(f)
	o: 454()

nname: 437
n 437(None)[self.actions_dict = dict()
]:
	i: 416(t)
	o: 454()

nname: 416
n 416(len(self.actions_dict) == 1)[]:
	i: 0(AL), 415()
	o: 437(t), 453(f)

nname: 415
n 415(None)[]:
	i: 195(AF), 411()
	o: 416()

nname: 411
n 411(None)[]:
	i: 221(f), 364()
	o: 415()

nname: 364
n 364(None)[self.actions_dict[s] = dict(handler=self.subtitles, caption=caption, checked=s == sub_id, args=(s, True), kwargs=dict(), pos=s + 1)
continue
]:
	i: 311(f), 360()
	o: 411()

nname: 360
n 360(None)[]:
	i: 311(t)
	o: 364()

nname: 311
n 311(s == sub_id)[caption = '%i-%s' % (s, lang)
]:
	i: 268(), 296(), 309(AE)
	o: 360(t), 364(f)

nname: 309
n 309(None)[]:
	i: 286(f)
	o: 311(AE)

nname: 296
n 296(None)[lang = key
]:
	i: 286(t)
	o: 311()

nname: 286
n 286(<dummy_ex3> EXC_MATCH KeyError)[]:
	i: 264(except)
	o: 296(t), 309(f)

nname: 268
n 268(None)[lang = country_dict[key]['language']
]:
	i: 264(try)
	o: 311()

nname: 264
n 264(None)[]:
	i: 221(t)
	o: 268(try), 286(except)

nname: 221
n 221(key not in ('\xff\xff', ''))[for s in xrange(self._dvd.get_available_stream()['nb_sub']):
tt = self._dvd.get_sub_info(s)
key = tt['language']
]:
	i: 195(for)
	o: 264(t), 411(f)

nname: 195
n 195(None)[]:
	i: 0(loop)
	o: 221(for), 415(AF)

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
sub_id = self._dvd.get_sub_stream()
sub_ok = self._dvd.is_sub_enabled()
self.radio = True
self.actions_dict[-1] = {'handler': self.subtitles, 'caption': _('OFF'), 'checked': not sub_ok, 'args': (-1, False), 'kwargs': dict(), 'pos': 0}
]:
	i: 
	o: 195(loop), 416(AL)

nname: 416
n 416(None)[if len(self.actions_dict) == 1:
	self.actions_dict = dict()
]:
	i: 0(AL), 195(AF), 221(f), 364()
	o: 

nname: 364
n 364(None)[self.actions_dict[s] = dict(handler=self.subtitles, caption=caption, checked=s == sub_id, args=(s, True), kwargs=dict(), pos=s + 1)
continue
]:
	i: 286(f)
	o: 416()

nname: 286
n 286(None)[except KeyError:
	lang = key
caption = '%i-%s' % (s, lang)
if s == sub_id:
	pass
]:
	i: 264()
	o: 364()

nname: 264
n 264(None)[try:
	lang = country_dict[key]['language']
]:
	i: 221(t)
	o: 286()

nname: 221
n 221(key not in ('\xff\xff', ''))[for s in xrange(self._dvd.get_available_stream()['nb_sub']):
tt = self._dvd.get_sub_info(s)
key = tt['language']
]:
	i: 195(for)
	o: 264(t), 416(f)

nname: 195
n 195(None)[]:
	i: 0(loop)
	o: 221(for), 416(AF)

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
sub_id = self._dvd.get_sub_stream()
sub_ok = self._dvd.is_sub_enabled()
self.radio = True
self.actions_dict[-1] = {'handler': self.subtitles, 'caption': _('OFF'), 'checked': not sub_ok, 'args': (-1, False), 'kwargs': dict(), 'pos': 0}
]:
	i: 
	o: 195(loop), 416(AL)

nname: 416
n 416(None)[if len(self.actions_dict) == 1:
	self.actions_dict = dict()
]:
	i: 0(AL), 195(AF), 221(f), 364()
	o: 

nname: 364
n 364(None)[self.actions_dict[s] = dict(handler=self.subtitles, caption=caption, checked=s == sub_id, args=(s, True), kwargs=dict(), pos=s + 1)
continue
]:
	i: 264(f)
	o: 416()

nname: 264
n 264(None)[try:
	lang = country_dict[key]['language']
except KeyError:
	lang = key
caption = '%i-%s' % (s, lang)
if s == sub_id:
	pass
]:
	i: 221(t)
	o: 364()

nname: 221
n 221(key not in ('\xff\xff', ''))[for s in xrange(self._dvd.get_available_stream()['nb_sub']):
tt = self._dvd.get_sub_info(s)
key = tt['language']
]:
	i: 195(for)
	o: 264(t), 416(f)

nname: 195
n 195(None)[]:
	i: 0(loop)
	o: 221(for), 416(AF)

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
sub_id = self._dvd.get_sub_stream()
sub_ok = self._dvd.is_sub_enabled()
self.radio = True
self.actions_dict[-1] = {'handler': self.subtitles, 'caption': _('OFF'), 'checked': not sub_ok, 'args': (-1, False), 'kwargs': dict(), 'pos': 0}
]:
	i: 
	o: 195(loop), 416(AL)

nname: 416
n 416(None)[if len(self.actions_dict) == 1:
	self.actions_dict = dict()
]:
	i: 0(AL), 195(AF), 221(f), 264()
	o: 

nname: 264
n 264(None)[try:
	lang = country_dict[key]['language']
except KeyError:
	lang = key
caption = '%i-%s' % (s, lang)
if s == sub_id:
	pass
self.actions_dict[s] = dict(handler=self.subtitles, caption=caption, checked=s == sub_id, args=(s, True), kwargs=dict(), pos=s + 1)
continue
]:
	i: 221(t)
	o: 416()

nname: 221
n 221(key not in ('\xff\xff', ''))[for s in xrange(self._dvd.get_available_stream()['nb_sub']):
tt = self._dvd.get_sub_info(s)
key = tt['language']
]:
	i: 195(for)
	o: 264(t), 416(f)

nname: 195
n 195(None)[]:
	i: 0(loop)
	o: 221(for), 416(AF)

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
sub_id = self._dvd.get_sub_stream()
sub_ok = self._dvd.is_sub_enabled()
self.radio = True
self.actions_dict[-1] = {'handler': self.subtitles, 'caption': _('OFF'), 'checked': not sub_ok, 'args': (-1, False), 'kwargs': dict(), 'pos': 0}
]:
	i: 
	o: 195(loop), 416(AL)

nname: 221
n 221(None)[for s in xrange(self._dvd.get_available_stream()['nb_sub']):
	tt = self._dvd.get_sub_info(s)
	key = tt['language']
	if key not in ('\xff\xff', ''):
		try:
			lang = country_dict[key]['language']
		except KeyError:
			lang = key
		caption = '%i-%s' % (s, lang)
		if s == sub_id:
			pass
		self.actions_dict[s] = dict(handler=self.subtitles, caption=caption, checked=s == sub_id, args=(s, True), kwargs=dict(), pos=s + 1)
		continue
if len(self.actions_dict) == 1:
	self.actions_dict = dict()
]:
	i: 0(for)
	o: 

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
sub_id = self._dvd.get_sub_stream()
sub_ok = self._dvd.is_sub_enabled()
self.radio = True
self.actions_dict[-1] = {'handler': self.subtitles, 'caption': _('OFF'), 'checked': not sub_ok, 'args': (-1, False), 'kwargs': dict(), 'pos': 0}
]:
	i: 
	o: 221(for)

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
sub_id = self._dvd.get_sub_stream()
sub_ok = self._dvd.is_sub_enabled()
self.radio = True
self.actions_dict[-1] = {'handler': self.subtitles, 'caption': _('OFF'), 'checked': not sub_ok, 'args': (-1, False), 'kwargs': dict(), 'pos': 0}
for s in xrange(self._dvd.get_available_stream()['nb_sub']):
	tt = self._dvd.get_sub_info(s)
	key = tt['language']
	if key not in ('\xff\xff', ''):
		try:
			lang = country_dict[key]['language']
		except KeyError:
			lang = key
		caption = '%i-%s' % (s, lang)
		if s == sub_id:
			pass
		self.actions_dict[s] = dict(handler=self.subtitles, caption=caption, checked=s == sub_id, args=(s, True), kwargs=dict(), pos=s + 1)
		continue
if len(self.actions_dict) == 1:
	self.actions_dict = dict()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76b504c>}
nname: 0
n 0(None)[self._update_checked(sub)
self._dvd.set_sub_stream(sub_stream=max(0, sub), display=display)
self.menu._set_options_list(keep_selection=True)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76b52ec>}
nname: 6
n 6(None)[def __init__(self, item, menu, name, **kw):
	self.item = item
	self._dvd = menu.wydvd
	self.actions_dict = dict()
	ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
	sub_id = self._dvd.get_sub_stream()
	sub_ok = self._dvd.is_sub_enabled()
	self.radio = True
	self.actions_dict[-1] = {'handler': self.subtitles, 'caption': _('OFF'), 'checked': not sub_ok, 'args': (-1, False), 'kwargs': dict(), 'pos': 0}
	for s in xrange(self._dvd.get_available_stream()['nb_sub']):
		tt = self._dvd.get_sub_info(s)
		key = tt['language']
		if key not in ('\xff\xff', ''):
			try:
				lang = country_dict[key]['language']
			except KeyError:
				lang = key
			caption = '%i-%s' % (s, lang)
			if s == sub_id:
				pass
			self.actions_dict[s] = dict(handler=self.subtitles, caption=caption, checked=s == sub_id, args=(s, True), kwargs=dict(), pos=s + 1)
			continue
	if len(self.actions_dict) == 1:
		self.actions_dict = dict()

def subtitles(self, sub, display):
	self._update_checked(sub)
	self._dvd.set_sub_stream(sub_stream=max(0, sub), display=display)
	self.menu._set_options_list(keep_selection=True)

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb76a1bac>}
nname: 312
n 312(None)[]:
	i: 0(AL), 311()
	o: 

nname: 311
n 311(None)[]:
	i: 94(AF), 307()
	o: 312()

nname: 307
n 307(None)[]:
	i: 120(f), 210()
	o: 311()

nname: 210
n 210(None)[caption = '%s %s %d' % (lang, tt['coding'], tt['channels'])
self.actions_dict[s] = dict(handler=self.audiostreams, caption=caption, checked=s == audio_id, args=(s,), kwargs=dict(), pos=s)
continue
]:
	i: 167(), 195(), 208(AE)
	o: 307()

nname: 208
n 208(None)[]:
	i: 185(f)
	o: 210(AE)

nname: 195
n 195(None)[lang = key
]:
	i: 185(t)
	o: 210()

nname: 185
n 185(<dummy_ex3> EXC_MATCH KeyError)[]:
	i: 163(except)
	o: 195(t), 208(f)

nname: 167
n 167(None)[lang = country_dict[key]['language']
]:
	i: 163(try)
	o: 210()

nname: 163
n 163(None)[]:
	i: 120(t)
	o: 167(try), 185(except)

nname: 120
n 120(key not in ('\xff\xff', ''))[for s in xrange(self._dvd.get_available_stream()['nb_audio']):
tt = self._dvd.get_audio_info(s)
key = tt['language']
]:
	i: 94(for)
	o: 163(t), 307(f)

nname: 94
n 94(None)[]:
	i: 0(loop)
	o: 120(for), 311(AF)

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
audio_id = self._dvd.get_audio_stream()
self.radio = True
]:
	i: 
	o: 94(loop), 312(AL)

nname: 312
n 312(None)[]:
	i: 0(AL), 94(AF), 120(f), 185()
	o: 

nname: 185
n 185(None)[except KeyError:
	lang = key
caption = '%s %s %d' % (lang, tt['coding'], tt['channels'])
self.actions_dict[s] = dict(handler=self.audiostreams, caption=caption, checked=s == audio_id, args=(s,), kwargs=dict(), pos=s)
continue
]:
	i: 163()
	o: 312()

nname: 163
n 163(None)[try:
	lang = country_dict[key]['language']
]:
	i: 120(t)
	o: 185()

nname: 120
n 120(key not in ('\xff\xff', ''))[for s in xrange(self._dvd.get_available_stream()['nb_audio']):
tt = self._dvd.get_audio_info(s)
key = tt['language']
]:
	i: 94(for)
	o: 163(t), 312(f)

nname: 94
n 94(None)[]:
	i: 0(loop)
	o: 120(for), 312(AF)

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
audio_id = self._dvd.get_audio_stream()
self.radio = True
]:
	i: 
	o: 94(loop), 312(AL)

nname: 312
n 312(None)[]:
	i: 0(AL), 94(AF), 120(f), 163()
	o: 

nname: 163
n 163(None)[try:
	lang = country_dict[key]['language']
except KeyError:
	lang = key
caption = '%s %s %d' % (lang, tt['coding'], tt['channels'])
self.actions_dict[s] = dict(handler=self.audiostreams, caption=caption, checked=s == audio_id, args=(s,), kwargs=dict(), pos=s)
continue
]:
	i: 120(t)
	o: 312()

nname: 120
n 120(key not in ('\xff\xff', ''))[for s in xrange(self._dvd.get_available_stream()['nb_audio']):
tt = self._dvd.get_audio_info(s)
key = tt['language']
]:
	i: 94(for)
	o: 163(t), 312(f)

nname: 94
n 94(None)[]:
	i: 0(loop)
	o: 120(for), 312(AF)

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
audio_id = self._dvd.get_audio_stream()
self.radio = True
]:
	i: 
	o: 94(loop), 312(AL)

nname: 120
n 120(None)[for s in xrange(self._dvd.get_available_stream()['nb_audio']):
	tt = self._dvd.get_audio_info(s)
	key = tt['language']
	if key not in ('\xff\xff', ''):
		try:
			lang = country_dict[key]['language']
		except KeyError:
			lang = key
		caption = '%s %s %d' % (lang, tt['coding'], tt['channels'])
		self.actions_dict[s] = dict(handler=self.audiostreams, caption=caption, checked=s == audio_id, args=(s,), kwargs=dict(), pos=s)
		continue
]:
	i: 0(for)
	o: 

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
audio_id = self._dvd.get_audio_stream()
self.radio = True
]:
	i: 
	o: 120(for)

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
audio_id = self._dvd.get_audio_stream()
self.radio = True
for s in xrange(self._dvd.get_available_stream()['nb_audio']):
	tt = self._dvd.get_audio_info(s)
	key = tt['language']
	if key not in ('\xff\xff', ''):
		try:
			lang = country_dict[key]['language']
		except KeyError:
			lang = key
		caption = '%s %s %d' % (lang, tt['coding'], tt['channels'])
		self.actions_dict[s] = dict(handler=self.audiostreams, caption=caption, checked=s == audio_id, args=(s,), kwargs=dict(), pos=s)
		continue
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76b016c>}
nname: 0
n 0(None)[self._update_checked(stream)
self._dvd.set_audio_stream(stream)
self.menu._set_options_list(keep_selection=True)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76a1ecc>}
nname: 6
n 6(None)[def __init__(self, item, menu, name, **kw):
	self.item = item
	self._dvd = menu.wydvd
	self.actions_dict = dict()
	ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
	audio_id = self._dvd.get_audio_stream()
	self.radio = True
	for s in xrange(self._dvd.get_available_stream()['nb_audio']):
		tt = self._dvd.get_audio_info(s)
		key = tt['language']
		if key not in ('\xff\xff', ''):
			try:
				lang = country_dict[key]['language']
			except KeyError:
				lang = key
			caption = '%s %s %d' % (lang, tt['coding'], tt['channels'])
			self.actions_dict[s] = dict(handler=self.audiostreams, caption=caption, checked=s == audio_id, args=(s,), kwargs=dict(), pos=s)
			continue

def audiostreams(self, stream):
	self._update_checked(stream)
	self._dvd.set_audio_stream(stream)
	self.menu._set_options_list(keep_selection=True)

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb76a1aac>}
nname: 245
n 245(None)[]:
	i: 0(AL), 244()
	o: 

nname: 244
n 244(None)[]:
	i: 117(AF), 149()
	o: 245()

nname: 149
n 149(None)[for ptt in xrange(1, self._dvd.get_number_of_ptt(_title) + 1):
caption = _('Chapter %d') % ptt
self.actions_dict[ptt] = dict(handler=self.chapters, caption=caption, checked=ptt == _ptt, args=(ptt, _title, player), kwargs=dict(), pos=ptt)
]:
	i: 117(for)
	o: 244()

nname: 117
n 117(None)[]:
	i: 0(loop)
	o: 149(for), 244(AF)

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
_ptt = self._dvd.get_ptt_location()['num']
_title = self._dvd.get_title_location()['num']
self.radio = True
]:
	i: 
	o: 117(loop), 245(AL)

nname: 245
n 245(None)[]:
	i: 149()
	o: 

nname: 149
n 149(None)[for ptt in xrange(1, self._dvd.get_number_of_ptt(_title) + 1):
	caption = _('Chapter %d') % ptt
	self.actions_dict[ptt] = dict(handler=self.chapters, caption=caption, checked=ptt == _ptt, args=(ptt, _title, player), kwargs=dict(), pos=ptt)
]:
	i: 0(for)
	o: 245()

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
_ptt = self._dvd.get_ptt_location()['num']
_title = self._dvd.get_title_location()['num']
self.radio = True
]:
	i: 
	o: 149(for)

nname: 245
n 245(None)[]:
	i: 0()
	o: 

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
_ptt = self._dvd.get_ptt_location()['num']
_title = self._dvd.get_title_location()['num']
self.radio = True
for ptt in xrange(1, self._dvd.get_number_of_ptt(_title) + 1):
	caption = _('Chapter %d') % ptt
	self.actions_dict[ptt] = dict(handler=self.chapters, caption=caption, checked=ptt == _ptt, args=(ptt, _title, player), kwargs=dict(), pos=ptt)
]:
	i: 
	o: 245()

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
_ptt = self._dvd.get_ptt_location()['num']
_title = self._dvd.get_title_location()['num']
self.radio = True
for ptt in xrange(1, self._dvd.get_number_of_ptt(_title) + 1):
	caption = _('Chapter %d') % ptt
	self.actions_dict[ptt] = dict(handler=self.chapters, caption=caption, checked=ptt == _ptt, args=(ptt, _title, player), kwargs=dict(), pos=ptt)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76b09ac>}
nname: 36
n 36(None)[self._dvd.play_ptt(title=title, ptt=ptt)
self.menu._set_options_list(keep_selection=True)
]:
	i: 22(), 35()
	o: 

nname: 35
n 35(None)[]:
	i: 0(f)
	o: 36()

nname: 22
n 22(None)[player.speed = 1
]:
	i: 0(t)
	o: 36()

nname: 0
n 0(player._in_pause)[self._update_checked(ptt)
]:
	i: 
	o: 22(t), 35(f)

nname: 0
n 0(None)[self._update_checked(ptt)
if player._in_pause:
	player.speed = 1
self._dvd.play_ptt(title=title, ptt=ptt)
self.menu._set_options_list(keep_selection=True)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76b082c>}
nname: 6
n 6(None)[def __init__(self, item, player, menu, name, **kw):
	self.item = item
	self._dvd = menu.wydvd
	self.actions_dict = dict()
	ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
	_ptt = self._dvd.get_ptt_location()['num']
	_title = self._dvd.get_title_location()['num']
	self.radio = True
	for ptt in xrange(1, self._dvd.get_number_of_ptt(_title) + 1):
		caption = _('Chapter %d') % ptt
		self.actions_dict[ptt] = dict(handler=self.chapters, caption=caption, checked=ptt == _ptt, args=(ptt, _title, player), kwargs=dict(), pos=ptt)

def chapters(self, ptt, title, player):
	self._update_checked(ptt)
	if player._in_pause:
		player.speed = 1
	self._dvd.play_ptt(title=title, ptt=ptt)
	self.menu._set_options_list(keep_selection=True)

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb76a1a6c>}
nname: 238
n 238(None)[]:
	i: 0(AL), 237()
	o: 

nname: 237
n 237(None)[]:
	i: 113(AF), 148()
	o: 238()

nname: 148
n 148(None)[for angle in xrange(1, self._dvd.get_number_of_angle(title=_title) + 1):
caption = _('Angle %d') % angle
self.actions_dict[angle] = dict(handler=self.camera, caption=caption, checked=angle == _angle, args=(angle,), kwargs=dict(), pos=angle)
]:
	i: 113(for)
	o: 237()

nname: 113
n 113(None)[]:
	i: 0(loop)
	o: 148(for), 237(AF)

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
_title = self._dvd.get_title_location()['num']
_angle = self._dvd.get_current_angle()
self.radio = True
]:
	i: 
	o: 113(loop), 238(AL)

nname: 238
n 238(None)[]:
	i: 148()
	o: 

nname: 148
n 148(None)[for angle in xrange(1, self._dvd.get_number_of_angle(title=_title) + 1):
	caption = _('Angle %d') % angle
	self.actions_dict[angle] = dict(handler=self.camera, caption=caption, checked=angle == _angle, args=(angle,), kwargs=dict(), pos=angle)
]:
	i: 0(for)
	o: 238()

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
_title = self._dvd.get_title_location()['num']
_angle = self._dvd.get_current_angle()
self.radio = True
]:
	i: 
	o: 148(for)

nname: 238
n 238(None)[]:
	i: 0()
	o: 

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
_title = self._dvd.get_title_location()['num']
_angle = self._dvd.get_current_angle()
self.radio = True
for angle in xrange(1, self._dvd.get_number_of_angle(title=_title) + 1):
	caption = _('Angle %d') % angle
	self.actions_dict[angle] = dict(handler=self.camera, caption=caption, checked=angle == _angle, args=(angle,), kwargs=dict(), pos=angle)
]:
	i: 
	o: 238()

nname: 0
n 0(None)[self.item = item
self._dvd = menu.wydvd
self.actions_dict = dict()
ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
_title = self._dvd.get_title_location()['num']
_angle = self._dvd.get_current_angle()
self.radio = True
for angle in xrange(1, self._dvd.get_number_of_angle(title=_title) + 1):
	caption = _('Angle %d') % angle
	self.actions_dict[angle] = dict(handler=self.camera, caption=caption, checked=angle == _angle, args=(angle,), kwargs=dict(), pos=angle)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76b048c>}
nname: 0
n 0(None)[self._update_checked(angle)
self._dvd.set_angle(angle)
self.menu._set_options_list(keep_selection=True)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76a1fec>}
nname: 6
n 6(None)[def __init__(self, item, menu, name, **kw):
	self.item = item
	self._dvd = menu.wydvd
	self.actions_dict = dict()
	ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
	_title = self._dvd.get_title_location()['num']
	_angle = self._dvd.get_current_angle()
	self.radio = True
	for angle in xrange(1, self._dvd.get_number_of_angle(title=_title) + 1):
		caption = _('Angle %d') % angle
		self.actions_dict[angle] = dict(handler=self.camera, caption=caption, checked=angle == _angle, args=(angle,), kwargs=dict(), pos=angle)

def camera(self, angle):
	self._update_checked(angle)
	self._dvd.set_angle(angle)
	self.menu._set_options_list(keep_selection=True)

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb76a192c>}
nname: 140
n 140(None)[]:
	i: 82(), 105(), 129(), 138(AE)
	o: 

nname: 138
n 138(None)[]:
	i: 119(f)
	o: 140(AE)

nname: 129
n 129(None)[#, e
]:
	i: 119(t)
	o: 140()

nname: 119
n 119(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 101(except)
	o: 129(t), 138(f)

nname: 105
n 105(None)[_dvd.resume()
]:
	i: 101(try)
	o: 140()

nname: 101
n 101(None)[]:
	i: 0(f)
	o: 105(try), 119(except)

nname: 82
n 82(None)[_dvd.select_menu(menu='title')
]:
	i: 68(), 81()
	o: 140()

nname: 81
n 81(None)[]:
	i: 58(f)
	o: 82()

nname: 68
n 68(None)[_player.speed = 1
]:
	i: 58(t)
	o: 82()

nname: 58
n 58(_player._in_pause)[]:
	i: 0(t)
	o: 68(t), 81(f)

nname: 0
n 0(_dvd.domain not in ('VIDEO_MANAGER_MENU', 'VTS_MENU', 'AMGM_DOM'))[_dvd = context['menu'].wydvd
_player = context['selected'].player
pygui_globs['menustack'].back_to_menu(_player)
]:
	i: 
	o: 58(t), 101(f)

nname: 140
n 140(None)[]:
	i: 58(), 119()
	o: 

nname: 119
n 119(None)[except Exception, e:
]:
	i: 101()
	o: 140()

nname: 101
n 101(None)[try:
	_dvd.resume()
]:
	i: 0(f)
	o: 119()

nname: 58
n 58(None)[if _player._in_pause:
	_player.speed = 1
_dvd.select_menu(menu='title')
]:
	i: 0(t)
	o: 140()

nname: 0
n 0(_dvd.domain not in ('VIDEO_MANAGER_MENU', 'VTS_MENU', 'AMGM_DOM'))[_dvd = context['menu'].wydvd
_player = context['selected'].player
pygui_globs['menustack'].back_to_menu(_player)
]:
	i: 
	o: 58(t), 101(f)

nname: 140
n 140(None)[]:
	i: 58(), 101()
	o: 

nname: 101
n 101(None)[try:
	_dvd.resume()
except Exception, e:
]:
	i: 0(f)
	o: 140()

nname: 58
n 58(None)[if _player._in_pause:
	_player.speed = 1
_dvd.select_menu(menu='title')
]:
	i: 0(t)
	o: 140()

nname: 0
n 0(_dvd.domain not in ('VIDEO_MANAGER_MENU', 'VTS_MENU', 'AMGM_DOM'))[_dvd = context['menu'].wydvd
_player = context['selected'].player
pygui_globs['menustack'].back_to_menu(_player)
]:
	i: 
	o: 58(t), 101(f)

nname: 0
n 0(None)[_dvd = context['menu'].wydvd
_player = context['selected'].player
pygui_globs['menustack'].back_to_menu(_player)
if _dvd.domain not in ('VIDEO_MANAGER_MENU', 'VTS_MENU', 'AMGM_DOM'):
	if _player._in_pause:
		_player.speed = 1
	_dvd.select_menu(menu='title')
else:
	try:
		_dvd.resume()
	except Exception, e:
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76a1eac>}
nname: 0
n 0(None)[log.debug('clic clac')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76a192c>}
nname: 0
n 0(None)[stack = pygui_globs['menustack']
stack.back_to_home()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76a1bac>}
nname: 0
n 0(None)[log.debug('go to setup menu')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76a1dec>}
nname: 0
n 0(None)[from __future__ import absolute_import
from pygui.shared import pygui_globs
from pygui.facilities.codemapping import country_dict
from pygui.item.containers import ActionContainer
class DvDSubtitlesActionItem(ActionContainer):
	def __init__(self, item, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		sub_id = self._dvd.get_sub_stream()
		sub_ok = self._dvd.is_sub_enabled()
		self.radio = True
		self.actions_dict[-1] = {'handler': self.subtitles, 'caption': _('OFF'), 'checked': not sub_ok, 'args': (-1, False), 'kwargs': dict(), 'pos': 0}
		for s in xrange(self._dvd.get_available_stream()['nb_sub']):
			tt = self._dvd.get_sub_info(s)
			key = tt['language']
			if key not in ('\xff\xff', ''):
				try:
					lang = country_dict[key]['language']
				except KeyError:
					lang = key
				caption = '%i-%s' % (s, lang)
				if s == sub_id:
					pass
				self.actions_dict[s] = dict(handler=self.subtitles, caption=caption, checked=s == sub_id, args=(s, True), kwargs=dict(), pos=s + 1)
				continue
		if len(self.actions_dict) == 1:
			self.actions_dict = dict()

	def subtitles(self, sub, display):
		self._update_checked(sub)
		self._dvd.set_sub_stream(sub_stream=max(0, sub), display=display)
		self.menu._set_options_list(keep_selection=True)



class DvDAudioStreamsActionItem(ActionContainer):
	def __init__(self, item, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		audio_id = self._dvd.get_audio_stream()
		self.radio = True
		for s in xrange(self._dvd.get_available_stream()['nb_audio']):
			tt = self._dvd.get_audio_info(s)
			key = tt['language']
			if key not in ('\xff\xff', ''):
				try:
					lang = country_dict[key]['language']
				except KeyError:
					lang = key
				caption = '%s %s %d' % (lang, tt['coding'], tt['channels'])
				self.actions_dict[s] = dict(handler=self.audiostreams, caption=caption, checked=s == audio_id, args=(s,), kwargs=dict(), pos=s)
				continue

	def audiostreams(self, stream):
		self._update_checked(stream)
		self._dvd.set_audio_stream(stream)
		self.menu._set_options_list(keep_selection=True)



class DvDChaptersActionItem(ActionContainer):
	def __init__(self, item, player, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		_ptt = self._dvd.get_ptt_location()['num']
		_title = self._dvd.get_title_location()['num']
		self.radio = True
		for ptt in xrange(1, self._dvd.get_number_of_ptt(_title) + 1):
			caption = _('Chapter %d') % ptt
			self.actions_dict[ptt] = dict(handler=self.chapters, caption=caption, checked=ptt == _ptt, args=(ptt, _title, player), kwargs=dict(), pos=ptt)

	def chapters(self, ptt, title, player):
		self._update_checked(ptt)
		if player._in_pause:
			player.speed = 1
		self._dvd.play_ptt(title=title, ptt=ptt)
		self.menu._set_options_list(keep_selection=True)



class DvDCameraAnglesActionItem(ActionContainer):
	def __init__(self, item, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		_title = self._dvd.get_title_location()['num']
		_angle = self._dvd.get_current_angle()
		self.radio = True
		for angle in xrange(1, self._dvd.get_number_of_angle(title=_title) + 1):
			caption = _('Angle %d') % angle
			self.actions_dict[angle] = dict(handler=self.camera, caption=caption, checked=angle == _angle, args=(angle,), kwargs=dict(), pos=angle)

	def camera(self, angle):
		self._update_checked(angle)
		self._dvd.set_angle(angle)
		self.menu._set_options_list(keep_selection=True)



def go_to_menu(context):
	_dvd = context['menu'].wydvd
	_player = context['selected'].player
	pygui_globs['menustack'].back_to_menu(_player)
	if _dvd.domain not in ('VIDEO_MANAGER_MENU', 'VTS_MENU', 'AMGM_DOM'):
		if _player._in_pause:
			_player.speed = 1
		_dvd.select_menu(menu='title')
	else:
		try:
			_dvd.resume()
		except Exception, e:

def snap_picture():
	log.debug('clic clac')

def get_video_setup(context):
	stack = pygui_globs['menustack']
	stack.back_to_home()

def display_video_setup_menu():
	log.debug('go to setup menu')

]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb769acac>}
from __future__ import absolute_import
from pygui.shared import pygui_globs
from pygui.facilities.codemapping import country_dict
from pygui.item.containers import ActionContainer
class DvDSubtitlesActionItem(ActionContainer):
	def __init__(self, item, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		sub_id = self._dvd.get_sub_stream()
		sub_ok = self._dvd.is_sub_enabled()
		self.radio = True
		self.actions_dict[-1] = {'handler': self.subtitles, 'caption': _('OFF'), 'checked': not sub_ok, 'args': (-1, False), 'kwargs': dict(), 'pos': 0}
		for s in xrange(self._dvd.get_available_stream()['nb_sub']):
			tt = self._dvd.get_sub_info(s)
			key = tt['language']
			if key not in ('\xff\xff', ''):
				try:
					lang = country_dict[key]['language']
				except KeyError:
					lang = key
				caption = '%i-%s' % (s, lang)
				if s == sub_id:
					pass
				self.actions_dict[s] = dict(handler=self.subtitles, caption=caption, checked=s == sub_id, args=(s, True), kwargs=dict(), pos=s + 1)
				continue
		if len(self.actions_dict) == 1:
			self.actions_dict = dict()

	def subtitles(self, sub, display):
		self._update_checked(sub)
		self._dvd.set_sub_stream(sub_stream=max(0, sub), display=display)
		self.menu._set_options_list(keep_selection=True)



class DvDAudioStreamsActionItem(ActionContainer):
	def __init__(self, item, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		audio_id = self._dvd.get_audio_stream()
		self.radio = True
		for s in xrange(self._dvd.get_available_stream()['nb_audio']):
			tt = self._dvd.get_audio_info(s)
			key = tt['language']
			if key not in ('\xff\xff', ''):
				try:
					lang = country_dict[key]['language']
				except KeyError:
					lang = key
				caption = '%s %s %d' % (lang, tt['coding'], tt['channels'])
				self.actions_dict[s] = dict(handler=self.audiostreams, caption=caption, checked=s == audio_id, args=(s,), kwargs=dict(), pos=s)
				continue

	def audiostreams(self, stream):
		self._update_checked(stream)
		self._dvd.set_audio_stream(stream)
		self.menu._set_options_list(keep_selection=True)



class DvDChaptersActionItem(ActionContainer):
	def __init__(self, item, player, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		_ptt = self._dvd.get_ptt_location()['num']
		_title = self._dvd.get_title_location()['num']
		self.radio = True
		for ptt in xrange(1, self._dvd.get_number_of_ptt(_title) + 1):
			caption = _('Chapter %d') % ptt
			self.actions_dict[ptt] = dict(handler=self.chapters, caption=caption, checked=ptt == _ptt, args=(ptt, _title, player), kwargs=dict(), pos=ptt)

	def chapters(self, ptt, title, player):
		self._update_checked(ptt)
		if player._in_pause:
			player.speed = 1
		self._dvd.play_ptt(title=title, ptt=ptt)
		self.menu._set_options_list(keep_selection=True)



class DvDCameraAnglesActionItem(ActionContainer):
	def __init__(self, item, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		_title = self._dvd.get_title_location()['num']
		_angle = self._dvd.get_current_angle()
		self.radio = True
		for angle in xrange(1, self._dvd.get_number_of_angle(title=_title) + 1):
			caption = _('Angle %d') % angle
			self.actions_dict[angle] = dict(handler=self.camera, caption=caption, checked=angle == _angle, args=(angle,), kwargs=dict(), pos=angle)

	def camera(self, angle):
		self._update_checked(angle)
		self._dvd.set_angle(angle)
		self.menu._set_options_list(keep_selection=True)



def go_to_menu(context):
	_dvd = context['menu'].wydvd
	_player = context['selected'].player
	pygui_globs['menustack'].back_to_menu(_player)
	if _dvd.domain not in ('VIDEO_MANAGER_MENU', 'VTS_MENU', 'AMGM_DOM'):
		if _player._in_pause:
			_player.speed = 1
		_dvd.select_menu(menu='title')
	else:
		try:
			_dvd.resume()
		except Exception, e:

def snap_picture():
	log.debug('clic clac')

def get_video_setup(context):
	stack = pygui_globs['menustack']
	stack.back_to_home()

def display_video_setup_menu():
	log.debug('go to setup menu')

