# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 76
n 76(None)[]:
	i: 0(AL), 75()
	o: 

nname: 75
n 75(None)[]:
	i: 43(AF), 56()
	o: 76()

nname: 56
n 56(None)[for c in src.getchildren():
dest.append(c)
]:
	i: 43(for)
	o: 75()

nname: 43
n 43(None)[]:
	i: 0(loop)
	o: 56(for), 75(AF)

nname: 0
n 0(None)[_cp = dict(src.attrib)
_cp.update(dest.attrib)
dest.attrib = _cp
]:
	i: 
	o: 43(loop), 76(AL)

nname: 76
n 76(None)[]:
	i: 56()
	o: 

nname: 56
n 56(None)[for c in src.getchildren():
	dest.append(c)
]:
	i: 0(for)
	o: 76()

nname: 0
n 0(None)[_cp = dict(src.attrib)
_cp.update(dest.attrib)
dest.attrib = _cp
]:
	i: 
	o: 56(for)

nname: 76
n 76(None)[]:
	i: 0()
	o: 

nname: 0
n 0(None)[_cp = dict(src.attrib)
_cp.update(dest.attrib)
dest.attrib = _cp
for c in src.getchildren():
	dest.append(c)
]:
	i: 
	o: 76()

nname: 0
n 0(None)[_cp = dict(src.attrib)
_cp.update(dest.attrib)
dest.attrib = _cp
for c in src.getchildren():
	dest.append(c)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb773562c>}
nname: 925
n 925(None)[return containers_dict
]:
	i: 0(AL), 924()
	o: 

nname: 924
n 924(None)[]:
	i: 63(AF), 890()
	o: 925()

nname: 890
n 890(None)[object_name = subnode.attrib.get('name', 'unamed')
containers_dict[object_name] = subnode
]:
	i: 691(AL), 889()
	o: 924()

nname: 889
n 889(None)[]:
	i: 694(AF), 885()
	o: 890()

nname: 885
n 885(None)[]:
	i: 842(f), 857()
	o: 889()

nname: 857
n 857(None)[node_it.attrib['selected_marker_image'] = node_it.attrib['selected_marker_image'] % xml_variables
continue
]:
	i: 842(t)
	o: 885()

nname: 842
n 842('selected_marker_image' in node_it.attrib)[]:
	i: 813(), 841()
	o: 857(t), 885(f)

nname: 841
n 841(None)[]:
	i: 798(f)
	o: 842()

nname: 813
n 813(None)[node_it.attrib['marker_image'] = node_it.attrib['marker_image'] % xml_variables
]:
	i: 798(t)
	o: 842()

nname: 798
n 798('marker_image' in node_it.attrib)[]:
	i: 769(), 797()
	o: 813(t), 841(f)

nname: 797
n 797(None)[]:
	i: 754(f)
	o: 798()

nname: 769
n 769(None)[node_it.attrib['repository'] = node_it.attrib['repository'] % xml_variables
]:
	i: 754(t)
	o: 798()

nname: 754
n 754('repository' in node_it.attrib)[]:
	i: 725(), 753()
	o: 769(t), 797(f)

nname: 753
n 753(None)[]:
	i: 707(f)
	o: 754()

nname: 725
n 725(None)[node_it.attrib['file'] = node_it.attrib['file'] % xml_variables
]:
	i: 707(t)
	o: 754()

nname: 707
n 707('file' in node_it.attrib)[for node_it in subnode.getiterator():
]:
	i: 694(for)
	o: 725(t), 753(f)

nname: 694
n 694(None)[]:
	i: 691(loop)
	o: 707(for), 889(AF)

nname: 691
n 691(None)[]:
	i: 70(AL), 690()
	o: 694(loop), 890(AL)

nname: 690
n 690(None)[]:
	i: 76(AF), 687()
	o: 691()

nname: 687
n 687(None)[]:
	i: 685(AE)
	o: 690()

nname: 685
n 685(None)[]:
	i: 641(f), 651()
	o: 687(AE)

nname: 651
n 651(None)[#, e
log.error('%s:%s does not exist', node_it.tag, node_it.attrib)
continue
]:
	i: 641(t)
	o: 685()

nname: 641
n 641(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 89(except), 637()
	o: 651(t), 685(f)

nname: 637
n 637(None)[continue
]:
	i: 211(JA), 335(JA), 371(), 476(), 600(), 636()
	o: 641()

nname: 636
n 636(None)[]:
	i: 512(f)
	o: 637()

nname: 600
n 600(None)[del _[4]
_merge_node(node_it, ref_node)
del node_it.attrib['baseid']
]:
	i: 528(AF), 596()
	o: 637()

nname: 596
n 596(None)[]:
	i: 552(f), 585()
	o: 600()

nname: 585
n 585(None)[continue
]:
	i: 552(t)
	o: 596()

nname: 552
n 552(n.get('id') == node_it.get('baseid'))[for n in bibliotheque.findall('/templates/objects/*'):
]:
	i: 528(for)
	o: 585(t), 596(f)

nname: 528
n 528(None)[]:
	i: 512(t)
	o: 552(for), 600(AF)

nname: 512
n 512(node_it.get('baseid'))[]:
	i: 375&391(f)
	o: 528(t), 636(f)

nname: 476
n 476(None)[del _[3]
_merge_node(node_it, ref_node)
del node_it.attrib['tplid']
]:
	i: 404(AF), 472()
	o: 637()

nname: 472
n 472(None)[]:
	i: 428(f), 461()
	o: 476()

nname: 461
n 461(None)[continue
]:
	i: 428(t)
	o: 472()

nname: 428
n 428(n.get('id') == node_it.get('tplid'))[for n in objects.findall('*'):
]:
	i: 404(for)
	o: 461(t), 472(f)

nname: 404
n 404(None)[]:
	i: 375&391(t)
	o: 428(for), 476(AF)

nname: 375&391
n 375&391(node_it.get('tplid') and objects is not None)[]:
	i: 95(f)
	o: 404(t), 512(f)

nname: 371
n 371(None)[]:
	i: 247(f)
	o: 637()

nname: 335
n 335(None)[del _[2]
_merge_node(node_it, ref_node)
del node_it.attrib['baseid']
]:
	i: 263(AF), 331()
	o: 637(JA)

nname: 331
n 331(None)[]:
	i: 287(f), 320()
	o: 335()

nname: 320
n 320(None)[continue
]:
	i: 287(t)
	o: 331()

nname: 287
n 287(n.get('id') == node_it.get('baseid'))[for n in bibliotheque.findall('/templates/animations/animation'):
]:
	i: 263(for)
	o: 320(t), 331(f)

nname: 263
n 263(None)[]:
	i: 247(t)
	o: 287(for), 335(AF)

nname: 247
n 247(node_it.get('baseid'))[]:
	i: 110&126(f)
	o: 263(t), 371(f)

nname: 211
n 211(None)[del _[1]
_merge_node(node_it, ref_node)
del node_it.attrib['tplid']
]:
	i: 139(AF), 207()
	o: 637(JA)

nname: 207
n 207(None)[]:
	i: 163(f), 196()
	o: 211()

nname: 196
n 196(None)[continue
]:
	i: 163(t)
	o: 207()

nname: 163
n 163(n.get('id') == node_it.get('tplid'))[for n in animations.findall('animation'):
]:
	i: 139(for)
	o: 196(t), 207(f)

nname: 139
n 139(None)[]:
	i: 110&126(t)
	o: 163(for), 211(AF)

nname: 110&126
n 110&126(node_it.get('tplid') and animations is not None)[]:
	i: 95(t)
	o: 139(t), 247(f)

nname: 95
n 95(node_it.tag == 'animation')[]:
	i: 89(try)
	o: 110&126(t), 375&391(f)

nname: 89
n 89(None)[for node_it in subnode.getiterator():
]:
	i: 76(for)
	o: 95(try), 641(except)

nname: 76
n 76(None)[]:
	i: 70(loop)
	o: 89(for), 690(AF)

nname: 70
n 70(None)[for subnode in node:
]:
	i: 63(for)
	o: 76(loop), 691(AL)

nname: 63
n 63(None)[]:
	i: 0(loop)
	o: 70(for), 924(AF)

nname: 0
n 0(None)[xml_variables = dict(skins=config.themes_dir, version=config.version)
containers_dict = dict()
name = node.get('id')
def _merge_node(dest, src):
	_cp = dict(src.attrib)
	_cp.update(dest.attrib)
	dest.attrib = _cp
	for c in src.getchildren():
		dest.append(c)

]:
	i: 
	o: 63(loop), 925(AL)

nname: 925
n 925(None)[return containers_dict
]:
	i: 0(AL), 63(AF), 890()
	o: 

nname: 890
n 890(None)[object_name = subnode.attrib.get('name', 'unamed')
containers_dict[object_name] = subnode
]:
	i: 691(AL), 694(AF), 798(f)
	o: 925()

nname: 798
n 798(None)[if 'marker_image' in node_it.attrib:
	node_it.attrib['marker_image'] = node_it.attrib['marker_image'] % xml_variables
if 'selected_marker_image' in node_it.attrib:
	node_it.attrib['selected_marker_image'] = node_it.attrib['selected_marker_image'] % xml_variables
	continue
]:
	i: 707()
	o: 890()

nname: 707
n 707(None)[for node_it in subnode.getiterator():
if 'file' in node_it.attrib:
	node_it.attrib['file'] = node_it.attrib['file'] % xml_variables
if 'repository' in node_it.attrib:
	node_it.attrib['repository'] = node_it.attrib['repository'] % xml_variables
]:
	i: 694(for)
	o: 798()

nname: 694
n 694(None)[]:
	i: 691(loop)
	o: 707(for), 890(AF)

nname: 691
n 691(None)[]:
	i: 70(AL), 76(AF), 641(AE)
	o: 694(loop), 890(AL)

nname: 641
n 641(None)[except Exception, e:
	log.error('%s:%s does not exist', node_it.tag, node_it.attrib)
	continue
]:
	i: 637(), 89()
	o: 691(AE)

nname: 637
n 637(None)[continue
]:
	i: 211(JA), 335(JA), 476(), 600(), 247(f), 512(f)
	o: 641()

nname: 600
n 600(None)[del _[4]
_merge_node(node_it, ref_node)
del node_it.attrib['baseid']
]:
	i: 528(AF), 552()
	o: 637()

nname: 552
n 552(None)[for n in bibliotheque.findall('/templates/objects/*'):
if n.get('id') == node_it.get('baseid'):
	continue
]:
	i: 528(for)
	o: 600()

nname: 528
n 528(None)[]:
	i: 512(t)
	o: 552(for), 600(AF)

nname: 512
n 512(node_it.get('baseid'))[]:
	i: 375&391(f)
	o: 528(t), 637(f)

nname: 476
n 476(None)[del _[3]
_merge_node(node_it, ref_node)
del node_it.attrib['tplid']
]:
	i: 404(AF), 428()
	o: 637()

nname: 428
n 428(None)[for n in objects.findall('*'):
if n.get('id') == node_it.get('tplid'):
	continue
]:
	i: 404(for)
	o: 476()

nname: 404
n 404(None)[]:
	i: 375&391(t)
	o: 428(for), 476(AF)

nname: 375&391
n 375&391(node_it.get('tplid') and objects is not None)[]:
	i: 89(f)
	o: 404(t), 512(f)

nname: 335
n 335(None)[del _[2]
_merge_node(node_it, ref_node)
del node_it.attrib['baseid']
]:
	i: 263(AF), 287()
	o: 637(JA)

nname: 287
n 287(None)[for n in bibliotheque.findall('/templates/animations/animation'):
if n.get('id') == node_it.get('baseid'):
	continue
]:
	i: 263(for)
	o: 335()

nname: 263
n 263(None)[]:
	i: 247(t)
	o: 287(for), 335(AF)

nname: 247
n 247(node_it.get('baseid'))[]:
	i: 110&126(f)
	o: 263(t), 637(f)

nname: 211
n 211(None)[del _[1]
_merge_node(node_it, ref_node)
del node_it.attrib['tplid']
]:
	i: 139(AF), 163()
	o: 637(JA)

nname: 163
n 163(None)[for n in animations.findall('animation'):
if n.get('id') == node_it.get('tplid'):
	continue
]:
	i: 139(for)
	o: 211()

nname: 139
n 139(None)[]:
	i: 110&126(t)
	o: 163(for), 211(AF)

nname: 110&126
n 110&126(node_it.get('tplid') and animations is not None)[]:
	i: 89(t)
	o: 139(t), 247(f)

nname: 89
n 89(node_it.tag == 'animation')[for node_it in subnode.getiterator():
try:
	pass
]:
	i: 76(for)
	o: 110&126(t), 375&391(f), 641()

nname: 76
n 76(None)[]:
	i: 70(loop)
	o: 89(for), 691(AF)

nname: 70
n 70(None)[for subnode in node:
]:
	i: 63(for)
	o: 76(loop), 691(AL)

nname: 63
n 63(None)[]:
	i: 0(loop)
	o: 70(for), 925(AF)

nname: 0
n 0(None)[xml_variables = dict(skins=config.themes_dir, version=config.version)
containers_dict = dict()
name = node.get('id')
def _merge_node(dest, src):
	_cp = dict(src.attrib)
	_cp.update(dest.attrib)
	dest.attrib = _cp
	for c in src.getchildren():
		dest.append(c)

]:
	i: 
	o: 63(loop), 925(AL)

nname: 925
n 925(None)[return containers_dict
]:
	i: 0(AL), 63(AF), 890()
	o: 

nname: 890
n 890(None)[object_name = subnode.attrib.get('name', 'unamed')
containers_dict[object_name] = subnode
]:
	i: 691(AL), 694(AF), 707(f)
	o: 925()

nname: 707
n 707(None)[for node_it in subnode.getiterator():
if 'file' in node_it.attrib:
	node_it.attrib['file'] = node_it.attrib['file'] % xml_variables
if 'repository' in node_it.attrib:
	node_it.attrib['repository'] = node_it.attrib['repository'] % xml_variables
if 'marker_image' in node_it.attrib:
	node_it.attrib['marker_image'] = node_it.attrib['marker_image'] % xml_variables
if 'selected_marker_image' in node_it.attrib:
	node_it.attrib['selected_marker_image'] = node_it.attrib['selected_marker_image'] % xml_variables
	continue
]:
	i: 694(for)
	o: 890()

nname: 694
n 694(None)[]:
	i: 691(loop)
	o: 707(for), 890(AF)

nname: 691
n 691(None)[]:
	i: 70(AL), 76(AF), 641(AE)
	o: 694(loop), 890(AL)

nname: 641
n 641(None)[except Exception, e:
	log.error('%s:%s does not exist', node_it.tag, node_it.attrib)
	continue
]:
	i: 637(), 89()
	o: 691(AE)

nname: 637
n 637(None)[continue
]:
	i: 211(JA), 335(JA), 476(), 600(), 247(f), 512(f)
	o: 641()

nname: 600
n 600(None)[del _[4]
_merge_node(node_it, ref_node)
del node_it.attrib['baseid']
]:
	i: 528(AF), 552()
	o: 637()

nname: 552
n 552(None)[for n in bibliotheque.findall('/templates/objects/*'):
if n.get('id') == node_it.get('baseid'):
	continue
]:
	i: 528(for)
	o: 600()

nname: 528
n 528(None)[]:
	i: 512(t)
	o: 552(for), 600(AF)

nname: 512
n 512(node_it.get('baseid'))[]:
	i: 375&391(f)
	o: 528(t), 637(f)

nname: 476
n 476(None)[del _[3]
_merge_node(node_it, ref_node)
del node_it.attrib['tplid']
]:
	i: 404(AF), 428()
	o: 637()

nname: 428
n 428(None)[for n in objects.findall('*'):
if n.get('id') == node_it.get('tplid'):
	continue
]:
	i: 404(for)
	o: 476()

nname: 404
n 404(None)[]:
	i: 375&391(t)
	o: 428(for), 476(AF)

nname: 375&391
n 375&391(node_it.get('tplid') and objects is not None)[]:
	i: 89(f)
	o: 404(t), 512(f)

nname: 335
n 335(None)[del _[2]
_merge_node(node_it, ref_node)
del node_it.attrib['baseid']
]:
	i: 263(AF), 287()
	o: 637(JA)

nname: 287
n 287(None)[for n in bibliotheque.findall('/templates/animations/animation'):
if n.get('id') == node_it.get('baseid'):
	continue
]:
	i: 263(for)
	o: 335()

nname: 263
n 263(None)[]:
	i: 247(t)
	o: 287(for), 335(AF)

nname: 247
n 247(node_it.get('baseid'))[]:
	i: 110&126(f)
	o: 263(t), 637(f)

nname: 211
n 211(None)[del _[1]
_merge_node(node_it, ref_node)
del node_it.attrib['tplid']
]:
	i: 139(AF), 163()
	o: 637(JA)

nname: 163
n 163(None)[for n in animations.findall('animation'):
if n.get('id') == node_it.get('tplid'):
	continue
]:
	i: 139(for)
	o: 211()

nname: 139
n 139(None)[]:
	i: 110&126(t)
	o: 163(for), 211(AF)

nname: 110&126
n 110&126(node_it.get('tplid') and animations is not None)[]:
	i: 89(t)
	o: 139(t), 247(f)

nname: 89
n 89(node_it.tag == 'animation')[for node_it in subnode.getiterator():
try:
	pass
]:
	i: 76(for)
	o: 110&126(t), 375&391(f), 641()

nname: 76
n 76(None)[]:
	i: 70(loop)
	o: 89(for), 691(AF)

nname: 70
n 70(None)[for subnode in node:
]:
	i: 63(for)
	o: 76(loop), 691(AL)

nname: 63
n 63(None)[]:
	i: 0(loop)
	o: 70(for), 925(AF)

nname: 0
n 0(None)[xml_variables = dict(skins=config.themes_dir, version=config.version)
containers_dict = dict()
name = node.get('id')
def _merge_node(dest, src):
	_cp = dict(src.attrib)
	_cp.update(dest.attrib)
	dest.attrib = _cp
	for c in src.getchildren():
		dest.append(c)

]:
	i: 
	o: 63(loop), 925(AL)

nname: 925
n 925(None)[return containers_dict
]:
	i: 0(AL), 63(AF), 707()
	o: 

nname: 707
n 707(None)[for node_it in subnode.getiterator():
	if 'file' in node_it.attrib:
		node_it.attrib['file'] = node_it.attrib['file'] % xml_variables
	if 'repository' in node_it.attrib:
		node_it.attrib['repository'] = node_it.attrib['repository'] % xml_variables
	if 'marker_image' in node_it.attrib:
		node_it.attrib['marker_image'] = node_it.attrib['marker_image'] % xml_variables
	if 'selected_marker_image' in node_it.attrib:
		node_it.attrib['selected_marker_image'] = node_it.attrib['selected_marker_image'] % xml_variables
		continue
object_name = subnode.attrib.get('name', 'unamed')
containers_dict[object_name] = subnode
]:
	i: 691(for)
	o: 925()

nname: 691
n 691(None)[]:
	i: 70(AL), 76(AF), 641(AE)
	o: 707(for)

nname: 641
n 641(None)[except Exception, e:
	log.error('%s:%s does not exist', node_it.tag, node_it.attrib)
	continue
]:
	i: 637(), 89()
	o: 691(AE)

nname: 637
n 637(None)[continue
]:
	i: 211(JA), 335(JA), 476(), 600(), 247(f), 512(f)
	o: 641()

nname: 600
n 600(None)[del _[4]
_merge_node(node_it, ref_node)
del node_it.attrib['baseid']
]:
	i: 528(AF), 552()
	o: 637()

nname: 552
n 552(None)[for n in bibliotheque.findall('/templates/objects/*'):
if n.get('id') == node_it.get('baseid'):
	continue
]:
	i: 528(for)
	o: 600()

nname: 528
n 528(None)[]:
	i: 512(t)
	o: 552(for), 600(AF)

nname: 512
n 512(node_it.get('baseid'))[]:
	i: 375&391(f)
	o: 528(t), 637(f)

nname: 476
n 476(None)[del _[3]
_merge_node(node_it, ref_node)
del node_it.attrib['tplid']
]:
	i: 404(AF), 428()
	o: 637()

nname: 428
n 428(None)[for n in objects.findall('*'):
if n.get('id') == node_it.get('tplid'):
	continue
]:
	i: 404(for)
	o: 476()

nname: 404
n 404(None)[]:
	i: 375&391(t)
	o: 428(for), 476(AF)

nname: 375&391
n 375&391(node_it.get('tplid') and objects is not None)[]:
	i: 89(f)
	o: 404(t), 512(f)

nname: 335
n 335(None)[del _[2]
_merge_node(node_it, ref_node)
del node_it.attrib['baseid']
]:
	i: 263(AF), 287()
	o: 637(JA)

nname: 287
n 287(None)[for n in bibliotheque.findall('/templates/animations/animation'):
if n.get('id') == node_it.get('baseid'):
	continue
]:
	i: 263(for)
	o: 335()

nname: 263
n 263(None)[]:
	i: 247(t)
	o: 287(for), 335(AF)

nname: 247
n 247(node_it.get('baseid'))[]:
	i: 110&126(f)
	o: 263(t), 637(f)

nname: 211
n 211(None)[del _[1]
_merge_node(node_it, ref_node)
del node_it.attrib['tplid']
]:
	i: 139(AF), 163()
	o: 637(JA)

nname: 163
n 163(None)[for n in animations.findall('animation'):
if n.get('id') == node_it.get('tplid'):
	continue
]:
	i: 139(for)
	o: 211()

nname: 139
n 139(None)[]:
	i: 110&126(t)
	o: 163(for), 211(AF)

nname: 110&126
n 110&126(node_it.get('tplid') and animations is not None)[]:
	i: 89(t)
	o: 139(t), 247(f)

nname: 89
n 89(node_it.tag == 'animation')[for node_it in subnode.getiterator():
try:
	pass
]:
	i: 76(for)
	o: 110&126(t), 375&391(f), 641()

nname: 76
n 76(None)[]:
	i: 70(loop)
	o: 89(for), 691(AF)

nname: 70
n 70(None)[for subnode in node:
]:
	i: 63(for)
	o: 76(loop), 691(AL)

nname: 63
n 63(None)[]:
	i: 0(loop)
	o: 70(for), 925(AF)

nname: 0
n 0(None)[xml_variables = dict(skins=config.themes_dir, version=config.version)
containers_dict = dict()
name = node.get('id')
def _merge_node(dest, src):
	_cp = dict(src.attrib)
	_cp.update(dest.attrib)
	dest.attrib = _cp
	for c in src.getchildren():
		dest.append(c)

]:
	i: 
	o: 63(loop), 925(AL)

nname: 925
n 925(None)[return containers_dict
]:
	i: 0(AL), 63(AF), 691()
	o: 

nname: 691
n 691(None)[for node_it in subnode.getiterator():
	if 'file' in node_it.attrib:
		node_it.attrib['file'] = node_it.attrib['file'] % xml_variables
	if 'repository' in node_it.attrib:
		node_it.attrib['repository'] = node_it.attrib['repository'] % xml_variables
	if 'marker_image' in node_it.attrib:
		node_it.attrib['marker_image'] = node_it.attrib['marker_image'] % xml_variables
	if 'selected_marker_image' in node_it.attrib:
		node_it.attrib['selected_marker_image'] = node_it.attrib['selected_marker_image'] % xml_variables
		continue
object_name = subnode.attrib.get('name', 'unamed')
containers_dict[object_name] = subnode
]:
	i: 70(AL), 76(AF), 641(AE)
	o: 925()

nname: 641
n 641(None)[except Exception, e:
	log.error('%s:%s does not exist', node_it.tag, node_it.attrib)
	continue
]:
	i: 637(), 89()
	o: 691(AE)

nname: 637
n 637(None)[continue
]:
	i: 211(JA), 335(JA), 476(), 600(), 247(f), 512(f)
	o: 641()

nname: 600
n 600(None)[del _[4]
_merge_node(node_it, ref_node)
del node_it.attrib['baseid']
]:
	i: 528(AF), 552()
	o: 637()

nname: 552
n 552(None)[for n in bibliotheque.findall('/templates/objects/*'):
if n.get('id') == node_it.get('baseid'):
	continue
]:
	i: 528(for)
	o: 600()

nname: 528
n 528(None)[]:
	i: 512(t)
	o: 552(for), 600(AF)

nname: 512
n 512(node_it.get('baseid'))[]:
	i: 375&391(f)
	o: 528(t), 637(f)

nname: 476
n 476(None)[del _[3]
_merge_node(node_it, ref_node)
del node_it.attrib['tplid']
]:
	i: 404(AF), 428()
	o: 637()

nname: 428
n 428(None)[for n in objects.findall('*'):
if n.get('id') == node_it.get('tplid'):
	continue
]:
	i: 404(for)
	o: 476()

nname: 404
n 404(None)[]:
	i: 375&391(t)
	o: 428(for), 476(AF)

nname: 375&391
n 375&391(node_it.get('tplid') and objects is not None)[]:
	i: 89(f)
	o: 404(t), 512(f)

nname: 335
n 335(None)[del _[2]
_merge_node(node_it, ref_node)
del node_it.attrib['baseid']
]:
	i: 263(AF), 287()
	o: 637(JA)

nname: 287
n 287(None)[for n in bibliotheque.findall('/templates/animations/animation'):
if n.get('id') == node_it.get('baseid'):
	continue
]:
	i: 263(for)
	o: 335()

nname: 263
n 263(None)[]:
	i: 247(t)
	o: 287(for), 335(AF)

nname: 247
n 247(node_it.get('baseid'))[]:
	i: 110&126(f)
	o: 263(t), 637(f)

nname: 211
n 211(None)[del _[1]
_merge_node(node_it, ref_node)
del node_it.attrib['tplid']
]:
	i: 139(AF), 163()
	o: 637(JA)

nname: 163
n 163(None)[for n in animations.findall('animation'):
if n.get('id') == node_it.get('tplid'):
	continue
]:
	i: 139(for)
	o: 211()

nname: 139
n 139(None)[]:
	i: 110&126(t)
	o: 163(for), 211(AF)

nname: 110&126
n 110&126(node_it.get('tplid') and animations is not None)[]:
	i: 89(t)
	o: 139(t), 247(f)

nname: 89
n 89(node_it.tag == 'animation')[for node_it in subnode.getiterator():
try:
	pass
]:
	i: 76(for)
	o: 110&126(t), 375&391(f), 641()

nname: 76
n 76(None)[]:
	i: 70(loop)
	o: 89(for), 691(AF)

nname: 70
n 70(None)[for subnode in node:
]:
	i: 63(for)
	o: 76(loop), 691(AL)

nname: 63
n 63(None)[]:
	i: 0(loop)
	o: 70(for), 925(AF)

nname: 0
n 0(None)[xml_variables = dict(skins=config.themes_dir, version=config.version)
containers_dict = dict()
name = node.get('id')
def _merge_node(dest, src):
	_cp = dict(src.attrib)
	_cp.update(dest.attrib)
	dest.attrib = _cp
	for c in src.getchildren():
		dest.append(c)

]:
	i: 
	o: 63(loop), 925(AL)

self.nodes: {0: <unpyclib.structure.node instance at 0xb7722a8c>, 512: <unpyclib.structure.node instance at 0xb76be80c>, 263: <unpyclib.structure.node instance at 0xb76be18c>, 925: <unpyclib.structure.node instance at 0xb772868c>, 139: <unpyclib.structure.node instance at 0xb7722e8c>, 528: <unpyclib.structure.node instance at 0xb772b7ec>, 600: <unpyclib.structure.node instance at 0xb772b9ec>, 404: <unpyclib.structure.node instance at 0xb76be58c>, 287: <unpyclib.structure.node instance at 0xb772b94c>, 163: <unpyclib.structure.node instance at 0xb772b8ec>, 552: <unpyclib.structure.node instance at 0xb772b86c>, 428: <unpyclib.structure.node instance at 0xb772bfcc>, 691: <unpyclib.structure.node instance at 0xb772b96c>, '110&126': <unpyclib.structure.node instance at 0xb7728c4c>, 641: <unpyclib.structure.node instance at 0xb772ba6c>, 63: <unpyclib.structure.node instance at 0xb7722b0c>, 70: <unpyclib.structure.node instance at 0xb7722b8c>, 247: <unpyclib.structure.node instance at 0xb76be10c>, 76: <unpyclib.structure.node instance at 0xb7722c0c>, 211: <unpyclib.structure.node instance at 0xb76be08c>, 89: <unpyclib.structure.node instance at 0xb772beec>, 335: <unpyclib.structure.node instance at 0xb76be38c>, 476: <unpyclib.structure.node instance at 0xb76be78c>, '375&391': <unpyclib.structure.node instance at 0xb7729e4c>, 637: <unpyclib.structure.node instance at 0xb772baec>}
nname: 300
n 300(None)[log.info('widgets loaded from XML')
return None
]:
	i: 180(AL), 299()
	o: 

nname: 299
n 299(None)[]:
	i: 183(AF), 296()
	o: 300()

nname: 296
n 296(None)[]:
	i: 294(AE)
	o: 299()

nname: 294
n 294(None)[]:
	i: 253(f), 263()
	o: 296(AE)

nname: 263
n 263(None)[#, e
raise SystemExit("Invalid XML '%s' : %s" % (_file, e))
continue
]:
	i: 253(t)
	o: 294()

nname: 253
n 253(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 190(except), 202()
	o: 263(t), 294(f)

nname: 202
n 202(None)[log.debug(' + add_widget(%s):', _file)
self.add_widgets(os.path.join(root, _file), bibliotheque)
continue
]:
	i: 190(try)
	o: 253()

nname: 190
n 190(None)[]:
	i: 183(for)
	o: 202(try), 253(except)

nname: 183
n 183(None)[]:
	i: 180(loop)
	o: 190(for), 299(AF)

nname: 180
n 180(None)[]:
	i: 93(), 165(), 178(AE)
	o: 183(loop), 300(AL)

nname: 178
n 178(None)[]:
	i: 155(f)
	o: 180(AE)

nname: 165
n 165(None)[]:
	i: 155(t)
	o: 180()

nname: 155
n 155(<dummy_ex3> EXC_MATCH ValueError)[]:
	i: 84(except)
	o: 165(t), 178(f)

nname: 93
n 93(None)[del file_list[index]
]:
	i: 84(try)
	o: 180()

nname: 84
n 84(None)[del _[1]
for file_list in os.walk(directory):
]:
	i: 0(AF), 81()
	o: 93(try), 155(except)

nname: 81
n 81(None)[]:
	i: 23(AF), 77()
	o: 84()

nname: 77
n 77(None)[]:
	i: 42(f), 60()
	o: 81()

nname: 60
n 60(None)[continue
]:
	i: 42(t)
	o: 77()

nname: 42
n 42(xmlfile.endswith('xml'))[for xmlfile in files:
]:
	i: 23(for)
	o: 60(t), 77(f)

nname: 23
n 23(None)[]:
	i: 0(for)
	o: 42(for), 81(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 23(for), 84(AF)

nname: 300
n 300(None)[log.info('widgets loaded from XML')
return None
]:
	i: 155(AL), 183(AF), 253(AE)
	o: 

nname: 253
n 253(None)[except Exception, e:
	raise SystemExit("Invalid XML '%s' : %s" % (_file, e))
	continue
]:
	i: 190()
	o: 300(AE)

nname: 190
n 190(None)[try:
	log.debug(' + add_widget(%s):', _file)
	self.add_widgets(os.path.join(root, _file), bibliotheque)
	continue
]:
	i: 183(for)
	o: 253()

nname: 183
n 183(None)[]:
	i: 155(loop)
	o: 190(for), 300(AF)

nname: 155
n 155(None)[except ValueError:
	pass
]:
	i: 84()
	o: 183(loop), 300(AL)

nname: 84
n 84(None)[del _[1]
for file_list in os.walk(directory):
try:
	del file_list[index]
]:
	i: 0(AF), 23(AF), 42()
	o: 155()

nname: 42
n 42(None)[for xmlfile in files:
if xmlfile.endswith('xml'):
	continue
]:
	i: 23(for)
	o: 84()

nname: 23
n 23(None)[]:
	i: 0(for)
	o: 42(for), 84(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 23(for), 84(AF)

nname: 300
n 300(None)[log.info('widgets loaded from XML')
return None
]:
	i: 84(AL), 183(AF), 190(AE)
	o: 

nname: 190
n 190(None)[try:
	log.debug(' + add_widget(%s):', _file)
	self.add_widgets(os.path.join(root, _file), bibliotheque)
	continue
except Exception, e:
	raise SystemExit("Invalid XML '%s' : %s" % (_file, e))
	continue
]:
	i: 183(for)
	o: 300(AE)

nname: 183
n 183(None)[]:
	i: 84(loop)
	o: 190(for), 300(AF)

nname: 84
n 84(None)[del _[1]
for file_list in os.walk(directory):
try:
	del file_list[index]
except ValueError:
	pass
]:
	i: 0(AF), 23(AF), 42()
	o: 183(loop), 300(AL)

nname: 42
n 42(None)[for xmlfile in files:
if xmlfile.endswith('xml'):
	continue
]:
	i: 23(for)
	o: 84()

nname: 23
n 23(None)[]:
	i: 0(for)
	o: 42(for), 84(AF)

nname: 0
n 0(None)[]:
	i: 
	o: 23(for), 84(AF)

self.nodes: {0: <unpyclib.structure.node instance at 0xb772922c>, 42: <unpyclib.structure.node instance at 0xb7728e0c>, 183: <unpyclib.structure.node instance at 0xb772960c>, 300: <unpyclib.structure.node instance at 0xb77298ac>, 84: <unpyclib.structure.node instance at 0xb77282ec>, 23: <unpyclib.structure.node instance at 0xb772966c>, 190: <unpyclib.structure.node instance at 0xb77284cc>}
DFADecompile Exception need more than 0 values to unpack
nname: 133
n 133(None)[133]:
	i: 128(AE)
	o: 

nname: 128
n 128(None)[]:
	i: 0(finally), 124()
	o: 133(AE)

nname: 124
n 124(None)[]:
	i: 22(), 98(), 122(AE)
	o: 128()

nname: 122
n 122(None)[]:
	i: 88(f)
	o: 124(AE)

nname: 98
n 98(None)[log.warning('%s does not exist, check your wybox_theme packages' % datapack)
]:
	i: 88(t)
	o: 124()

nname: 88
n 88(<dummy_ex3> EXC_MATCH IOError)[]:
	i: 19(except)
	o: 98(t), 122(f)

nname: 22
n 22(None)[import cPickle
_file = open(datapack, 'rb')
self.widgets_dict.update(cPickle.load(_file))
_file.close()
]:
	i: 19(try)
	o: 124()

nname: 19
n 19(None)[]:
	i: 0(ASF)
	o: 22(try), 88(except)

nname: 0
n 0(None)[log.debug('Load XML from serialized object %s', datapack)
]:
	i: 
	o: 19(ASF2), 128(finally)

nname: 133
n 133(None)[133]:
	i: 128(AE)
	o: 

nname: 128
n 128(None)[]:
	i: 0(finally), 88()
	o: 133(AE)

nname: 88
n 88(None)[except IOError:
	log.warning('%s does not exist, check your wybox_theme packages' % datapack)
]:
	i: 19()
	o: 128()

nname: 19
n 19(None)[try:
	import cPickle
	_file = open(datapack, 'rb')
	self.widgets_dict.update(cPickle.load(_file))
	_file.close()
]:
	i: 0(ASF2)
	o: 88()

nname: 0
n 0(None)[log.debug('Load XML from serialized object %s', datapack)
]:
	i: 
	o: 19(ASF2), 128(finally)

nname: 133
n 133(None)[133]:
	i: 128(AE)
	o: 

nname: 128
n 128(None)[]:
	i: 0(finally), 19()
	o: 133(AE)

nname: 19
n 19(None)[try:
	import cPickle
	_file = open(datapack, 'rb')
	self.widgets_dict.update(cPickle.load(_file))
	_file.close()
except IOError:
	log.warning('%s does not exist, check your wybox_theme packages' % datapack)
]:
	i: 0(ASF2)
	o: 128()

nname: 0
n 0(None)[log.debug('Load XML from serialized object %s', datapack)
]:
	i: 
	o: 19(ASF2), 128(finally)

nname: 128
n 128(None)[finally:
	pass
133]:
	i: 0()
	o: 

nname: 0
n 0(None)[log.debug('Load XML from serialized object %s', datapack)
try:
	import cPickle
	_file = open(datapack, 'rb')
	self.widgets_dict.update(cPickle.load(_file))
	_file.close()
except IOError:
	log.warning('%s does not exist, check your wybox_theme packages' % datapack)
]:
	i: 
	o: 128()

nname: 0
n 0(None)[log.debug('Load XML from serialized object %s', datapack)
try:
	import cPickle
	_file = open(datapack, 'rb')
	self.widgets_dict.update(cPickle.load(_file))
	_file.close()
except IOError:
	log.warning('%s does not exist, check your wybox_theme packages' % datapack)
finally:
	pass
133]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb772b32c>}
nname: 154
n 154(None)[]:
	i: 0(AL), 153()
	o: 

nname: 153
n 153(None)[]:
	i: 72(AF), 79()
	o: 154()

nname: 79
n 79(None)[for node in widget_node_list:
widget = merge_node(node, bibliotheque, templates_object_node, templates_animation_node)
wd[node.get('id')] = widget
log.debug('---> file %s new widget %s added', _file, node.get('id'))
]:
	i: 72(for)
	o: 153()

nname: 72
n 72(None)[]:
	i: 0(loop)
	o: 79(for), 153(AF)

nname: 0
n 0(None)[root = ET.parse(_file)
templates_object_node = root.find('/templates/objects/')
templates_animation_node = root.find('/templates/animations/')
widget_node_list = root.findall('/pages/page')
wd = self.widgets_dict
]:
	i: 
	o: 72(loop), 154(AL)

nname: 154
n 154(None)[]:
	i: 79()
	o: 

nname: 79
n 79(None)[for node in widget_node_list:
	widget = merge_node(node, bibliotheque, templates_object_node, templates_animation_node)
	wd[node.get('id')] = widget
	log.debug('---> file %s new widget %s added', _file, node.get('id'))
]:
	i: 0(for)
	o: 154()

nname: 0
n 0(None)[root = ET.parse(_file)
templates_object_node = root.find('/templates/objects/')
templates_animation_node = root.find('/templates/animations/')
widget_node_list = root.findall('/pages/page')
wd = self.widgets_dict
]:
	i: 
	o: 79(for)

nname: 154
n 154(None)[]:
	i: 0()
	o: 

nname: 0
n 0(None)[root = ET.parse(_file)
templates_object_node = root.find('/templates/objects/')
templates_animation_node = root.find('/templates/animations/')
widget_node_list = root.findall('/pages/page')
wd = self.widgets_dict
for node in widget_node_list:
	widget = merge_node(node, bibliotheque, templates_object_node, templates_animation_node)
	wd[node.get('id')] = widget
	log.debug('---> file %s new widget %s added', _file, node.get('id'))
]:
	i: 
	o: 154()

nname: 0
n 0(None)[root = ET.parse(_file)
templates_object_node = root.find('/templates/objects/')
templates_animation_node = root.find('/templates/animations/')
widget_node_list = root.findall('/pages/page')
wd = self.widgets_dict
for node in widget_node_list:
	widget = merge_node(node, bibliotheque, templates_object_node, templates_animation_node)
	wd[node.get('id')] = widget
	log.debug('---> file %s new widget %s added', _file, node.get('id'))
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb772b60c>}
nname: 48
n 48(None)[return WidgetLibrary.object_creator.create(WidgetLibrary.widgets_dict[pagename][key], menu)
]:
	i: 15(), 47()
	o: 

nname: 47
n 47(None)[]:
	i: 0(f)
	o: 48()

nname: 15
n 15(None)[from .objectfactory import ObjectCreator
WidgetLibrary.object_creator = ObjectCreator()
]:
	i: 0(t)
	o: 48()

nname: 0
n 0(WidgetLibrary.object_creator is None)[]:
	i: 
	o: 15(t), 47(f)

nname: 0
n 0(None)[if WidgetLibrary.object_creator is None:
	from .objectfactory import ObjectCreator
	WidgetLibrary.object_creator = ObjectCreator()
return WidgetLibrary.object_creator.create(WidgetLibrary.widgets_dict[pagename][key], menu)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb772b2cc>}
nname: 6
n 6(None)[__doc__ = '\n    The widget library is a singleton class which maintain all displayable IHM.\n    IHM are loaded from a xml file.\n    '
widgets_dict = dict()
object_creator = None
def load_xml(self, directory):
	pass

def load_pickle(self, datapack):
	log.debug('Load XML from serialized object %s', datapack)
	try:
		import cPickle
		_file = open(datapack, 'rb')
		self.widgets_dict.update(cPickle.load(_file))
		_file.close()
	except IOError:
		log.warning('%s does not exist, check your wybox_theme packages' % datapack)
	finally:
		pass
	133
def add_widgets(self, _file, bibliotheque):
	root = ET.parse(_file)
	templates_object_node = root.find('/templates/objects/')
	templates_animation_node = root.find('/templates/animations/')
	widget_node_list = root.findall('/pages/page')
	wd = self.widgets_dict
	for node in widget_node_list:
		widget = merge_node(node, bibliotheque, templates_object_node, templates_animation_node)
		wd[node.get('id')] = widget
		log.debug('---> file %s new widget %s added', _file, node.get('id'))

def get_container(self, pagename, key='main', menu=None):
	if WidgetLibrary.object_creator is None:
		from .objectfactory import ObjectCreator
		WidgetLibrary.object_creator = ObjectCreator()
	return WidgetLibrary.object_creator.create(WidgetLibrary.widgets_dict[pagename][key], menu)

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb7712fec>}
nname: 134
n 134(None)[class WidgetLibrary(object):
	__doc__ = '\n    The widget library is a singleton class which maintain all displayable IHM.\n    IHM are loaded from a xml file.\n    '
	widgets_dict = dict()
	object_creator = None
	def load_xml(self, directory):
		pass

	def load_pickle(self, datapack):
		log.debug('Load XML from serialized object %s', datapack)
		try:
			import cPickle
			_file = open(datapack, 'rb')
			self.widgets_dict.update(cPickle.load(_file))
			_file.close()
		except IOError:
			log.warning('%s does not exist, check your wybox_theme packages' % datapack)
		finally:
			pass
		133
	def add_widgets(self, _file, bibliotheque):
		root = ET.parse(_file)
		templates_object_node = root.find('/templates/objects/')
		templates_animation_node = root.find('/templates/animations/')
		widget_node_list = root.findall('/pages/page')
		wd = self.widgets_dict
		for node in widget_node_list:
			widget = merge_node(node, bibliotheque, templates_object_node, templates_animation_node)
			wd[node.get('id')] = widget
			log.debug('---> file %s new widget %s added', _file, node.get('id'))

	def get_container(self, pagename, key='main', menu=None):
		if WidgetLibrary.object_creator is None:
			from .objectfactory import ObjectCreator
			WidgetLibrary.object_creator = ObjectCreator()
		return WidgetLibrary.object_creator.create(WidgetLibrary.widgets_dict[pagename][key], menu)



]:
	i: 95(), 115()
	o: 

nname: 115
n 115(None)[import xml.etree.cElementTree as ET
]:
	i: 0(f)
	o: 134()

nname: 95
n 95(None)[from peewee.xml_facilities import SerializableElement
]:
	i: 0(t)
	o: 134()

nname: 0
n 0(config.use_serialized_theme)[from __future__ import absolute_import
import os
import pygui.config as config
from peewee.debug import GET_LOGGER
log = GET_LOGGER(__name__)
def merge_node(node, bibliotheque, objects=None, animations=None):
	xml_variables = dict(skins=config.themes_dir, version=config.version)
	containers_dict = dict()
	name = node.get('id')
	def _merge_node(dest, src):
		_cp = dict(src.attrib)
		_cp.update(dest.attrib)
		dest.attrib = _cp
		for c in src.getchildren():
			dest.append(c)


]:
	i: 
	o: 95(t), 115(f)

nname: 0
n 0(None)[from __future__ import absolute_import
import os
import pygui.config as config
from peewee.debug import GET_LOGGER
log = GET_LOGGER(__name__)
def merge_node(node, bibliotheque, objects=None, animations=None):
	xml_variables = dict(skins=config.themes_dir, version=config.version)
	containers_dict = dict()
	name = node.get('id')
	def _merge_node(dest, src):
		_cp = dict(src.attrib)
		_cp.update(dest.attrib)
		dest.attrib = _cp
		for c in src.getchildren():
			dest.append(c)


if config.use_serialized_theme:
	from peewee.xml_facilities import SerializableElement
else:
	import xml.etree.cElementTree as ET
class WidgetLibrary(object):
	__doc__ = '\n    The widget library is a singleton class which maintain all displayable IHM.\n    IHM are loaded from a xml file.\n    '
	widgets_dict = dict()
	object_creator = None
	def load_xml(self, directory):
		pass

	def load_pickle(self, datapack):
		log.debug('Load XML from serialized object %s', datapack)
		try:
			import cPickle
			_file = open(datapack, 'rb')
			self.widgets_dict.update(cPickle.load(_file))
			_file.close()
		except IOError:
			log.warning('%s does not exist, check your wybox_theme packages' % datapack)
		finally:
			pass
		133
	def add_widgets(self, _file, bibliotheque):
		root = ET.parse(_file)
		templates_object_node = root.find('/templates/objects/')
		templates_animation_node = root.find('/templates/animations/')
		widget_node_list = root.findall('/pages/page')
		wd = self.widgets_dict
		for node in widget_node_list:
			widget = merge_node(node, bibliotheque, templates_object_node, templates_animation_node)
			wd[node.get('id')] = widget
			log.debug('---> file %s new widget %s added', _file, node.get('id'))

	def get_container(self, pagename, key='main', menu=None):
		if WidgetLibrary.object_creator is None:
			from .objectfactory import ObjectCreator
			WidgetLibrary.object_creator = ObjectCreator()
		return WidgetLibrary.object_creator.create(WidgetLibrary.widgets_dict[pagename][key], menu)



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb771236c>}
from __future__ import absolute_import
import os
import pygui.config as config
from peewee.debug import GET_LOGGER
log = GET_LOGGER(__name__)
def merge_node(node, bibliotheque, objects=None, animations=None):
	xml_variables = dict(skins=config.themes_dir, version=config.version)
	containers_dict = dict()
	name = node.get('id')
	def _merge_node(dest, src):
		_cp = dict(src.attrib)
		_cp.update(dest.attrib)
		dest.attrib = _cp
		for c in src.getchildren():
			dest.append(c)


if config.use_serialized_theme:
	from peewee.xml_facilities import SerializableElement
else:
	import xml.etree.cElementTree as ET
class WidgetLibrary(object):
	__doc__ = '\n    The widget library is a singleton class which maintain all displayable IHM.\n    IHM are loaded from a xml file.\n    '
	widgets_dict = dict()
	object_creator = None
	def load_xml(self, directory):
		pass

	def load_pickle(self, datapack):
		log.debug('Load XML from serialized object %s', datapack)
		try:
			import cPickle
			_file = open(datapack, 'rb')
			self.widgets_dict.update(cPickle.load(_file))
			_file.close()
		except IOError:
			log.warning('%s does not exist, check your wybox_theme packages' % datapack)
		finally:
			pass
		133
	def add_widgets(self, _file, bibliotheque):
		root = ET.parse(_file)
		templates_object_node = root.find('/templates/objects/')
		templates_animation_node = root.find('/templates/animations/')
		widget_node_list = root.findall('/pages/page')
		wd = self.widgets_dict
		for node in widget_node_list:
			widget = merge_node(node, bibliotheque, templates_object_node, templates_animation_node)
			wd[node.get('id')] = widget
			log.debug('---> file %s new widget %s added', _file, node.get('id'))

	def get_container(self, pagename, key='main', menu=None):
		if WidgetLibrary.object_creator is None:
			from .objectfactory import ObjectCreator
			WidgetLibrary.object_creator = ObjectCreator()
		return WidgetLibrary.object_creator.create(WidgetLibrary.widgets_dict[pagename][key], menu)



