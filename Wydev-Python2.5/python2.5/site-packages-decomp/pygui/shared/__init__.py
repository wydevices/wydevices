# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 6
n 6(None)[]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb75a368c>}
nname: 69
n 69(None)[]:
	i: 51(), 68()
	o: 

nname: 68
n 68(None)[]:
	i: 0(f)
	o: 69()

nname: 51
n 51(None)[log.warning('BE CAREFUL ! Too many elements in shared namespace !')
]:
	i: 0(t)
	o: 69()

nname: 0
n 0(len(self.provided_resource) > 10)[log.debug('%s given.' % name)
self.provided_resource[name] = value
]:
	i: 
	o: 51(t), 68(f)

nname: 0
n 0(None)[log.debug('%s given.' % name)
self.provided_resource[name] = value
if len(self.provided_resource) > 10:
	log.warning('BE CAREFUL ! Too many elements in shared namespace !')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75a52ac>}
nname: 91
n 91(None)[]:
	i: 19(), 66(), 89(AE)
	o: 

nname: 89
n 89(None)[]:
	i: 56(f)
	o: 91(AE)

nname: 66
n 66(None)[raise NotYetProvidedError('%s is not available' % name)
]:
	i: 56(t)
	o: 91()

nname: 56
n 56(<dummy_ex3> EXC_MATCH KeyError)[]:
	i: 0(except)
	o: 66(t), 89(f)

nname: 19
n 19(None)[res = self.provided_resource[name]
log.debug('%s acquired.', name)
return res
]:
	i: 0(try)
	o: 91()

nname: 0
n 0(None)[log.debug('acquire %s.', name)
]:
	i: 
	o: 19(try), 56(except)

nname: 56
n 56(None)[except KeyError:
	raise NotYetProvidedError('%s is not available' % name)
]:
	i: 0()
	o: 

nname: 0
n 0(None)[log.debug('acquire %s.', name)
try:
	res = self.provided_resource[name]
	log.debug('%s acquired.', name)
	return res
]:
	i: 
	o: 56()

nname: 0
n 0(None)[log.debug('acquire %s.', name)
try:
	res = self.provided_resource[name]
	log.debug('%s acquired.', name)
	return res
except KeyError:
	raise NotYetProvidedError('%s is not available' % name)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75a5a2c>}
nname: 91
n 91(None)[]:
	i: 20(), 66(), 89(AE)
	o: 

nname: 89
n 89(None)[]:
	i: 56(f)
	o: 91(AE)

nname: 66
n 66(None)[raise NotYetProvidedError('%s is not available' % name)
]:
	i: 56(t)
	o: 91()

nname: 56
n 56(<dummy_ex3> EXC_MATCH KeyError)[]:
	i: 0(except)
	o: 66(t), 89(f)

nname: 20
n 20(None)[self.provided_resource.pop(name)
log.debug('%s removed.', name)
]:
	i: 0(try)
	o: 91()

nname: 0
n 0(None)[log.debug('remove %s.' % name)
]:
	i: 
	o: 20(try), 56(except)

nname: 56
n 56(None)[except KeyError:
	raise NotYetProvidedError('%s is not available' % name)
]:
	i: 0()
	o: 

nname: 0
n 0(None)[log.debug('remove %s.' % name)
try:
	self.provided_resource.pop(name)
	log.debug('%s removed.', name)
]:
	i: 
	o: 56()

nname: 0
n 0(None)[log.debug('remove %s.' % name)
try:
	self.provided_resource.pop(name)
	log.debug('%s removed.', name)
except KeyError:
	raise NotYetProvidedError('%s is not available' % name)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75a58cc>}
nname: 6
n 6(None)[provided_resource = dict()
def __setitem__(self, name, value):
	log.debug('%s given.' % name)
	self.provided_resource[name] = value
	if len(self.provided_resource) > 10:
		log.warning('BE CAREFUL ! Too many elements in shared namespace !')

def __getitem__(self, name):
	log.debug('acquire %s.', name)
	try:
		res = self.provided_resource[name]
		log.debug('%s acquired.', name)
		return res
	except KeyError:
		raise NotYetProvidedError('%s is not available' % name)

def __delitem__(self, name):
	log.debug('remove %s.' % name)
	try:
		self.provided_resource.pop(name)
		log.debug('%s removed.', name)
	except KeyError:
		raise NotYetProvidedError('%s is not available' % name)

__contains__ = provided_resource.__contains__
__iter__ = provided_resource.__iter__
]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb75a3c4c>}
nname: 167
n 167(None)[]:
	i: 147(), 160()
	o: 

nname: 160
n 160(None)[pygui_globs = {}
]:
	i: 0&140(f)
	o: 167()

nname: 147
n 147(None)[pygui_globs = _Globals()
]:
	i: 0&140(t)
	o: 167()

nname: 0&140
n 0&140(config.DEBUG or log_level)[from __future__ import absolute_import
__all__ = ['pygui_globs']
import sys
from peewee.debug import log, log_level
import pygui.config as config
class NotYetProvidedError(KeyError):
	pass

class _Globals(object):
	provided_resource = dict()
	def __setitem__(self, name, value):
		log.debug('%s given.' % name)
		self.provided_resource[name] = value
		if len(self.provided_resource) > 10:
			log.warning('BE CAREFUL ! Too many elements in shared namespace !')

	def __getitem__(self, name):
		log.debug('acquire %s.', name)
		try:
			res = self.provided_resource[name]
			log.debug('%s acquired.', name)
			return res
		except KeyError:
			raise NotYetProvidedError('%s is not available' % name)

	def __delitem__(self, name):
		log.debug('remove %s.' % name)
		try:
			self.provided_resource.pop(name)
			log.debug('%s removed.', name)
		except KeyError:
			raise NotYetProvidedError('%s is not available' % name)

	__contains__ = provided_resource.__contains__
	__iter__ = provided_resource.__iter__


log.debug('import shared variables provider')
]:
	i: 
	o: 147(t), 160(f)

nname: 0&140
n 0&140(None)[from __future__ import absolute_import
__all__ = ['pygui_globs']
import sys
from peewee.debug import log, log_level
import pygui.config as config
class NotYetProvidedError(KeyError):
	pass

class _Globals(object):
	provided_resource = dict()
	def __setitem__(self, name, value):
		log.debug('%s given.' % name)
		self.provided_resource[name] = value
		if len(self.provided_resource) > 10:
			log.warning('BE CAREFUL ! Too many elements in shared namespace !')

	def __getitem__(self, name):
		log.debug('acquire %s.', name)
		try:
			res = self.provided_resource[name]
			log.debug('%s acquired.', name)
			return res
		except KeyError:
			raise NotYetProvidedError('%s is not available' % name)

	def __delitem__(self, name):
		log.debug('remove %s.' % name)
		try:
			self.provided_resource.pop(name)
			log.debug('%s removed.', name)
		except KeyError:
			raise NotYetProvidedError('%s is not available' % name)

	__contains__ = provided_resource.__contains__
	__iter__ = provided_resource.__iter__


log.debug('import shared variables provider')
if config.DEBUG or log_level:
	pygui_globs = _Globals()
else:
	pygui_globs = {}
]:
	i: 
	o: 

self.nodes: {'0&140': <unpyclib.structure.node instance at 0xb759a8ec>}
from __future__ import absolute_import
__all__ = ['pygui_globs']
import sys
from peewee.debug import log, log_level
import pygui.config as config
class NotYetProvidedError(KeyError):
	pass

class _Globals(object):
	provided_resource = dict()
	def __setitem__(self, name, value):
		log.debug('%s given.' % name)
		self.provided_resource[name] = value
		if len(self.provided_resource) > 10:
			log.warning('BE CAREFUL ! Too many elements in shared namespace !')

	def __getitem__(self, name):
		log.debug('acquire %s.', name)
		try:
			res = self.provided_resource[name]
			log.debug('%s acquired.', name)
			return res
		except KeyError:
			raise NotYetProvidedError('%s is not available' % name)

	def __delitem__(self, name):
		log.debug('remove %s.' % name)
		try:
			self.provided_resource.pop(name)
			log.debug('%s removed.', name)
		except KeyError:
			raise NotYetProvidedError('%s is not available' % name)

	__contains__ = provided_resource.__contains__
	__iter__ = provided_resource.__iter__


log.debug('import shared variables provider')
if config.DEBUG or log_level:
	pygui_globs = _Globals()
else:
	pygui_globs = {}
