# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 142
n 142(None)[import socket
socket.setdefaulttimeout(config.socket_timeout)
]:
	i: 100(), 141()
	o: 

nname: 141
n 141(None)[]:
	i: 66&84(f)
	o: 142()

nname: 100
n 100(None)[import rpdb2
rpdb2.start_embedded_debugger('pygui', fAllowRemote=True, timeout=60)
]:
	i: 66&84(t)
	o: 142()

nname: 66&84
n 66&84(os.environ.get('RPDB') or 'rpdb' in config.plugins)[]:
	i: 42(), 59(), 65(AE)
	o: 100(t), 141(f)

nname: 59
n 59(None)[]:
	i: 0(except)
	o: 66&84()

nname: 42
n 42(None)[file('/tmp/ready', 'w')
]:
	i: 0(try)
	o: 66&84()

nname: 0
n 0(None)[debug.log.debug('Loading deferred')
from pygui.deferred_startup import init_startup
init_startup()
]:
	i: 
	o: 42(try), 59(except)

nname: 142
n 142(None)[import socket
socket.setdefaulttimeout(config.socket_timeout)
]:
	i: 59()
	o: 

nname: 59
n 59(None)[except:
	pass
if os.environ.get('RPDB') or 'rpdb' in config.plugins:
	import rpdb2
	rpdb2.start_embedded_debugger('pygui', fAllowRemote=True, timeout=60)
]:
	i: 0()
	o: 142()

nname: 0
n 0(None)[debug.log.debug('Loading deferred')
from pygui.deferred_startup import init_startup
init_startup()
try:
	file('/tmp/ready', 'w')
]:
	i: 
	o: 59()

nname: 142
n 142(None)[import socket
socket.setdefaulttimeout(config.socket_timeout)
]:
	i: 0()
	o: 

nname: 0
n 0(None)[debug.log.debug('Loading deferred')
from pygui.deferred_startup import init_startup
init_startup()
try:
	file('/tmp/ready', 'w')
except:
	pass
if os.environ.get('RPDB') or 'rpdb' in config.plugins:
	import rpdb2
	rpdb2.start_embedded_debugger('pygui', fAllowRemote=True, timeout=60)
]:
	i: 
	o: 142()

nname: 0
n 0(None)[debug.log.debug('Loading deferred')
from pygui.deferred_startup import init_startup
init_startup()
try:
	file('/tmp/ready', 'w')
except:
	pass
if os.environ.get('RPDB') or 'rpdb' in config.plugins:
	import rpdb2
	rpdb2.start_embedded_debugger('pygui', fAllowRemote=True, timeout=60)
import socket
socket.setdefaulttimeout(config.socket_timeout)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76bff4c>}
nname: 27
n 27(None)[from pygui.facilities.power import restore_last_universe
restore_last_universe()
]:
	i: 0(AL), 26()
	o: 

nname: 26
n 26(None)[]:
	i: 8(AF), 15()
	o: 27()

nname: 15
n 15(None)[for i in engine_loader:
yield None
]:
	i: 8(for)
	o: 26()

nname: 8
n 8(None)[]:
	i: 0(loop)
	o: 15(for), 26(AF)

nname: 0
n 0(None)[yield None
]:
	i: 
	o: 8(loop), 27(AL)

nname: 27
n 27(None)[from pygui.facilities.power import restore_last_universe
restore_last_universe()
]:
	i: 15()
	o: 

nname: 15
n 15(None)[for i in engine_loader:
	yield None
]:
	i: 0(for)
	o: 27()

nname: 0
n 0(None)[yield None
]:
	i: 
	o: 15(for)

nname: 27
n 27(None)[from pygui.facilities.power import restore_last_universe
restore_last_universe()
]:
	i: 0()
	o: 

nname: 0
n 0(None)[yield None
for i in engine_loader:
	yield None
]:
	i: 
	o: 27()

nname: 0
n 0(None)[yield None
for i in engine_loader:
	yield None
from pygui.facilities.power import restore_last_universe
restore_last_universe()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0x9e5bbac>}
nname: 1189
n 1189(None)[notifier.Task(deferred_startup).start(7)
notifier.loop()
return None
]:
	i: 1154(), 1168(), 1187(AE)
	o: 

nname: 1187
n 1187(None)[]:
	i: 1158(f)
	o: 1189(AE)

nname: 1168
n 1168(None)[#, e
debug.PRINT_EXCEPTION()
]:
	i: 1158(t)
	o: 1189()

nname: 1158
n 1158(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 158(except)
	o: 1168(t), 1187(f)

nname: 1154
n 1154(None)[]:
	i: 1101(), 1137(), 1153(AE)
	o: 1189()

nname: 1137
n 1137(None)[debug.PRINT_EXCEPTION()
]:
	i: 1098(except)
	o: 1154()

nname: 1101
n 1101(None)[from pygui.facilities.power import PowerManager
PowerManager().notify_new_max_power_state(3)
]:
	i: 1098(try)
	o: 1154()

nname: 1098
n 1098(None)[]:
	i: 956(), 1040(), 1097()
	o: 1101(try), 1137(except)

nname: 1097
n 1097(None)[]:
	i: 1004&1022(f)
	o: 1098()

nname: 1040
n 1040(None)[from pygui.item.parameters.advanced import LaunchDemoItem
notifier.Task(LaunchDemoItem(_('Run demo mode')).execute).start(10)
]:
	i: 1004&1022(t)
	o: 1098()

nname: 1004&1022
n 1004&1022(config.user_config['advanced']['demo_mode'] and config.user_config['advanced']['start_on_demo_mode'])[]:
	i: 939(f)
	o: 1040(t), 1097(f)

nname: 956
n 956(None)[from pygui.menu.menu.firstboot import FirstBootMenu
notifier.Task(FirstBootMenu().show).start(10)
]:
	i: 939(t)
	o: 1098()

nname: 939
n 939(config.user_config['base']['firstboot'])[]:
	i: 911(), 938()
	o: 956(t), 1004&1022(f)

nname: 938
n 938(None)[]:
	i: 896(f)
	o: 939()

nname: 911
n 911(None)[from pygui.facilities.eventlogger import EventLoggerPlugin
EventLoggerPlugin()
]:
	i: 896(t)
	o: 939()

nname: 896
n 896('event_logger' in config.plugins)[]:
	i: 811(), 864()
	o: 911(t), 938(f)

nname: 864
n 864(None)[notifier.Task(engine_loader.next).start(1.0, loop=True)
]:
	i: 736&792(f)
	o: 896()

nname: 811
n 811(None)[def load_and_restore():
	yield None
	for i in engine_loader:
		yield None
	from pygui.facilities.power import restore_last_universe
	restore_last_universe()

notifier.Task(load_and_restore().next).start(1.0, loop=True)
]:
	i: 736&792(t)
	o: 896()

nname: 736&792
n 736&792('restore_last_universe' in config.plugins and not config.user_config['base']['firstboot'])[import peewee.notifier as notifier
RootMenu().show()
HomeMenu().show()
]:
	i: 722(), 735()
	o: 811(t), 864(f)

nname: 735
n 735(None)[]:
	i: 619(f)
	o: 736&792()

nname: 722
n 722(None)[previous_objects.clear()
]:
	i: 628(AL), 721()
	o: 736&792()

nname: 721
n 721(None)[]:
	i: 632(AF), 683()
	o: 722()

nname: 683
n 683(None)[oo.animate('color', a=0, duration=2, end_callback=oo.unparent)
]:
	i: 645(f), 669()
	o: 721()

nname: 669
n 669(None)[oo.unparent()
continue
]:
	i: 645(t)
	o: 683()

nname: 645
n 645(name.startswith('bar'))[for name, oo in previous_objects.iteritems():
]:
	i: 632(for)
	o: 669(t), 683(f)

nname: 632
n 632(None)[]:
	i: 628(loop)
	o: 645(for), 721(AF)

nname: 628
n 628(None)[]:
	i: 619(t)
	o: 632(loop), 722(AL)

nname: 619
n 619(previous_objects)[focus = False
]:
	i: 601(), 615()
	o: 628(t), 735(f)

nname: 615
n 615(None)[]:
	i: 410(f)
	o: 619()

nname: 601
n 601(None)[]:
	i: 410(t)
	o: 619()

nname: 410
n 410(len(sys.argv) > 1)[from pygui.shared import pygui_globs
pygui_globs['display'] = display
pygui_globs['demomode'] = None
pygui_globs['wydbus'] = None
from pygui.menu.stack import MenuManager
menumanager = MenuManager()
import pygui.gui.engine as gui_engine
engine = gui_engine.ViewManager(display, config.theme_engine)
engine_loader = engine.loader_iterator()
engine_loader.next()
menumanager.engines.append(engine)
from pygui.menu.menu.home import RootMenu, HomeMenu
]:
	i: 362(), 376(), 408(AE)
	o: 601(t), 615(f)

nname: 408
n 408(None)[]:
	i: 366(f)
	o: 410(AE)

nname: 376
n 376(None)[#, e
print 'Unable to initialize main Canvas, program exits:'
raise SystemExit(str(e))
]:
	i: 366(t)
	o: 410()

nname: 366
n 366(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 161(except)
	o: 376(t), 408(f)

nname: 362
n 362(None)[]:
	i: 301(), 361()
	o: 410()

nname: 361
n 361(None)[]:
	i: 238(f)
	o: 362()

nname: 301
n 301(None)[display = wyvas.Canvas((config.display_width, config.display_height), event=0, font_path=os.path.join(config.themes_dir, 'fonts'), fps=config.fps, key_repeat=config.key_repeat, queue_size=config.key_q_size)
]:
	i: 290(), 297()
	o: 362()

nname: 297
n 297(None)[]:
	i: 250(f)
	o: 301()

nname: 290
n 290(None)[]:
	i: 250(t)
	o: 301()

nname: 250
n 250('input.dfbevents' in config.plugins)[]:
	i: 238(t)
	o: 290(t), 297(f)

nname: 238
n 238(display is None)[]:
	i: 167(), 199(), 236(AE)
	o: 250(t), 361(f)

nname: 236
n 236(None)[]:
	i: 183(f)
	o: 238(AE)

nname: 199
n 199(None)[print 'Unable to load wyvas, loading fakevas...'
wyvas = __import__('fakevas')
sys.modules['wyvas'] = wyvas
]:
	i: 183(t)
	o: 238()

nname: 183
n 183(<dummy_ex3> EXC_MATCH (ImportError, AssertionError))[]:
	i: 164(except)
	o: 199(t), 236(f)

nname: 167
n 167(None)[import wyvas
]:
	i: 164(try)
	o: 238()

nname: 164
n 164(None)[]:
	i: 161(try)
	o: 167(try), 183(except)

nname: 161
n 161(None)[]:
	i: 158(try)
	o: 164(try), 366(except)

nname: 158
n 158(None)[]:
	i: 98(), 125(), 157(AE)
	o: 161(try), 1158(except)

nname: 125
n 125(None)[debug.PRINT_EXCEPTION()
debug.log.error('Time configuration failed')
]:
	i: 0(except)
	o: 158()

nname: 98
n 98(None)[TimeManager().time_setter = config.user_config['base']['timeupdatemode']
]:
	i: 76(), 97()
	o: 158()

nname: 97
n 97(None)[]:
	i: 37(f)
	o: 98()

nname: 76
n 76(None)[config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER
]:
	i: 37(t)
	o: 98()

nname: 37
n 37(config.user_config['base']['firstboot'])[from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
]:
	i: 0(try)
	o: 76(t), 97(f)

nname: 0
n 0(None)[from pygui.facilities.optionparser import parser
options, args = parser.parse_args()
]:
	i: 
	o: 37(try), 125(except)

nname: 1189
n 1189(None)[notifier.Task(deferred_startup).start(7)
notifier.loop()
return None
]:
	i: 1137(), 1158()
	o: 

nname: 1158
n 1158(None)[except Exception, e:
	debug.PRINT_EXCEPTION()
]:
	i: 158()
	o: 1189()

nname: 1137
n 1137(None)[except:
	debug.PRINT_EXCEPTION()
]:
	i: 1098()
	o: 1189()

nname: 1098
n 1098(None)[try:
	from pygui.facilities.power import PowerManager
	PowerManager().notify_new_max_power_state(3)
]:
	i: 736&792()
	o: 1137()

nname: 736&792
n 736&792(None)[import peewee.notifier as notifier
RootMenu().show()
HomeMenu().show()
if 'restore_last_universe' in config.plugins and not config.user_config['base']['firstboot']:
	def load_and_restore():
		yield None
		for i in engine_loader:
			yield None
		from pygui.facilities.power import restore_last_universe
		restore_last_universe()

	notifier.Task(load_and_restore().next).start(1.0, loop=True)
else:
	notifier.Task(engine_loader.next).start(1.0, loop=True)
if 'event_logger' in config.plugins:
	from pygui.facilities.eventlogger import EventLoggerPlugin
	EventLoggerPlugin()
if config.user_config['base']['firstboot']:
	from pygui.menu.menu.firstboot import FirstBootMenu
	notifier.Task(FirstBootMenu().show).start(10)
else:
	if config.user_config['advanced']['demo_mode'] and config.user_config['advanced']['start_on_demo_mode']:
		from pygui.item.parameters.advanced import LaunchDemoItem
		notifier.Task(LaunchDemoItem(_('Run demo mode')).execute).start(10)
]:
	i: 722(), 410(f)
	o: 1098()

nname: 722
n 722(None)[previous_objects.clear()
]:
	i: 628(AL), 632(AF), 645()
	o: 736&792()

nname: 645
n 645(None)[for name, oo in previous_objects.iteritems():
if name.startswith('bar'):
	oo.unparent()
	continue
oo.animate('color', a=0, duration=2, end_callback=oo.unparent)
]:
	i: 632(for)
	o: 722()

nname: 632
n 632(None)[]:
	i: 628(loop)
	o: 645(for), 722(AF)

nname: 628
n 628(None)[]:
	i: 410(t)
	o: 632(loop), 722(AL)

nname: 410
n 410(previous_objects)[from pygui.shared import pygui_globs
pygui_globs['display'] = display
pygui_globs['demomode'] = None
pygui_globs['wydbus'] = None
from pygui.menu.stack import MenuManager
menumanager = MenuManager()
import pygui.gui.engine as gui_engine
engine = gui_engine.ViewManager(display, config.theme_engine)
engine_loader = engine.loader_iterator()
engine_loader.next()
menumanager.engines.append(engine)
from pygui.menu.menu.home import RootMenu, HomeMenu
if len(sys.argv) > 1:
	pass
focus = False
]:
	i: 366(), 250(), 238(f)
	o: 628(t), 736&792(f)

nname: 366
n 366(None)[except Exception, e:
	print 'Unable to initialize main Canvas, program exits:'
	raise SystemExit(str(e))
]:
	i: 164()
	o: 410()

nname: 250
n 250(None)[if 'input.dfbevents' in config.plugins:
	pass
display = wyvas.Canvas((config.display_width, config.display_height), event=0, font_path=os.path.join(config.themes_dir, 'fonts'), fps=config.fps, key_repeat=config.key_repeat, queue_size=config.key_q_size)
]:
	i: 238(t)
	o: 410()

nname: 238
n 238(display is None)[]:
	i: 167()
	o: 250(t), 410(f)

nname: 167
n 167(None)[try:
	import wyvas
except (ImportError, AssertionError):
	print 'Unable to load wyvas, loading fakevas...'
	wyvas = __import__('fakevas')
	sys.modules['wyvas'] = wyvas
]:
	i: 164(try)
	o: 238()

nname: 164
n 164(None)[try:
	pass
]:
	i: 158(try)
	o: 167(try), 366()

nname: 158
n 158(None)[try:
	pass
]:
	i: 98(), 125()
	o: 164(try), 1158()

nname: 125
n 125(None)[except:
	debug.PRINT_EXCEPTION()
	debug.log.error('Time configuration failed')
]:
	i: 0()
	o: 158()

nname: 98
n 98(None)[TimeManager().time_setter = config.user_config['base']['timeupdatemode']
]:
	i: 0()
	o: 158()

nname: 0
n 0(None)[from pygui.facilities.optionparser import parser
options, args = parser.parse_args()
try:
	from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
	if config.user_config['base']['firstboot']:
		config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER
]:
	i: 
	o: 98(), 125()

nname: 1189
n 1189(None)[notifier.Task(deferred_startup).start(7)
notifier.loop()
return None
]:
	i: 736&792(), 1158()
	o: 

nname: 1158
n 1158(None)[except Exception, e:
	debug.PRINT_EXCEPTION()
]:
	i: 158()
	o: 1189()

nname: 736&792
n 736&792(None)[import peewee.notifier as notifier
RootMenu().show()
HomeMenu().show()
if 'restore_last_universe' in config.plugins and not config.user_config['base']['firstboot']:
	def load_and_restore():
		yield None
		for i in engine_loader:
			yield None
		from pygui.facilities.power import restore_last_universe
		restore_last_universe()

	notifier.Task(load_and_restore().next).start(1.0, loop=True)
else:
	notifier.Task(engine_loader.next).start(1.0, loop=True)
if 'event_logger' in config.plugins:
	from pygui.facilities.eventlogger import EventLoggerPlugin
	EventLoggerPlugin()
if config.user_config['base']['firstboot']:
	from pygui.menu.menu.firstboot import FirstBootMenu
	notifier.Task(FirstBootMenu().show).start(10)
else:
	if config.user_config['advanced']['demo_mode'] and config.user_config['advanced']['start_on_demo_mode']:
		from pygui.item.parameters.advanced import LaunchDemoItem
		notifier.Task(LaunchDemoItem(_('Run demo mode')).execute).start(10)
try:
	from pygui.facilities.power import PowerManager
	PowerManager().notify_new_max_power_state(3)
except:
	debug.PRINT_EXCEPTION()
]:
	i: 645(), 410(f)
	o: 1189()

nname: 645
n 645(None)[for name, oo in previous_objects.iteritems():
	if name.startswith('bar'):
		oo.unparent()
		continue
	oo.animate('color', a=0, duration=2, end_callback=oo.unparent)
previous_objects.clear()
]:
	i: 628(for)
	o: 736&792()

nname: 628
n 628(None)[]:
	i: 410(t)
	o: 645(for)

nname: 410
n 410(previous_objects)[from pygui.shared import pygui_globs
pygui_globs['display'] = display
pygui_globs['demomode'] = None
pygui_globs['wydbus'] = None
from pygui.menu.stack import MenuManager
menumanager = MenuManager()
import pygui.gui.engine as gui_engine
engine = gui_engine.ViewManager(display, config.theme_engine)
engine_loader = engine.loader_iterator()
engine_loader.next()
menumanager.engines.append(engine)
from pygui.menu.menu.home import RootMenu, HomeMenu
if len(sys.argv) > 1:
	pass
focus = False
]:
	i: 366(), 167(f)
	o: 628(t), 736&792(f)

nname: 366
n 366(None)[except Exception, e:
	print 'Unable to initialize main Canvas, program exits:'
	raise SystemExit(str(e))
]:
	i: 164()
	o: 410()

nname: 167
n 167(None)[try:
	import wyvas
except (ImportError, AssertionError):
	print 'Unable to load wyvas, loading fakevas...'
	wyvas = __import__('fakevas')
	sys.modules['wyvas'] = wyvas
if display is None:
	if 'input.dfbevents' in config.plugins:
		pass
	display = wyvas.Canvas((config.display_width, config.display_height), event=0, font_path=os.path.join(config.themes_dir, 'fonts'), fps=config.fps, key_repeat=config.key_repeat, queue_size=config.key_q_size)
]:
	i: 164(try)
	o: 410()

nname: 164
n 164(None)[try:
	pass
]:
	i: 158(try)
	o: 167(try), 366()

nname: 158
n 158(None)[try:
	pass
]:
	i: 98(), 125()
	o: 164(try), 1158()

nname: 125
n 125(None)[except:
	debug.PRINT_EXCEPTION()
	debug.log.error('Time configuration failed')
]:
	i: 0()
	o: 158()

nname: 98
n 98(None)[TimeManager().time_setter = config.user_config['base']['timeupdatemode']
]:
	i: 0()
	o: 158()

nname: 0
n 0(None)[from pygui.facilities.optionparser import parser
options, args = parser.parse_args()
try:
	from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
	if config.user_config['base']['firstboot']:
		config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER
]:
	i: 
	o: 98(), 125()

nname: 1189
n 1189(None)[notifier.Task(deferred_startup).start(7)
notifier.loop()
return None
]:
	i: 736&792(), 1158()
	o: 

nname: 1158
n 1158(None)[except Exception, e:
	debug.PRINT_EXCEPTION()
]:
	i: 158()
	o: 1189()

nname: 736&792
n 736&792(None)[import peewee.notifier as notifier
RootMenu().show()
HomeMenu().show()
if 'restore_last_universe' in config.plugins and not config.user_config['base']['firstboot']:
	def load_and_restore():
		yield None
		for i in engine_loader:
			yield None
		from pygui.facilities.power import restore_last_universe
		restore_last_universe()

	notifier.Task(load_and_restore().next).start(1.0, loop=True)
else:
	notifier.Task(engine_loader.next).start(1.0, loop=True)
if 'event_logger' in config.plugins:
	from pygui.facilities.eventlogger import EventLoggerPlugin
	EventLoggerPlugin()
if config.user_config['base']['firstboot']:
	from pygui.menu.menu.firstboot import FirstBootMenu
	notifier.Task(FirstBootMenu().show).start(10)
else:
	if config.user_config['advanced']['demo_mode'] and config.user_config['advanced']['start_on_demo_mode']:
		from pygui.item.parameters.advanced import LaunchDemoItem
		notifier.Task(LaunchDemoItem(_('Run demo mode')).execute).start(10)
try:
	from pygui.facilities.power import PowerManager
	PowerManager().notify_new_max_power_state(3)
except:
	debug.PRINT_EXCEPTION()
]:
	i: 628(), 410(f)
	o: 1189()

nname: 628
n 628(None)[for name, oo in previous_objects.iteritems():
	if name.startswith('bar'):
		oo.unparent()
		continue
	oo.animate('color', a=0, duration=2, end_callback=oo.unparent)
previous_objects.clear()
]:
	i: 410(t)
	o: 736&792()

nname: 410
n 410(previous_objects)[from pygui.shared import pygui_globs
pygui_globs['display'] = display
pygui_globs['demomode'] = None
pygui_globs['wydbus'] = None
from pygui.menu.stack import MenuManager
menumanager = MenuManager()
import pygui.gui.engine as gui_engine
engine = gui_engine.ViewManager(display, config.theme_engine)
engine_loader = engine.loader_iterator()
engine_loader.next()
menumanager.engines.append(engine)
from pygui.menu.menu.home import RootMenu, HomeMenu
if len(sys.argv) > 1:
	pass
focus = False
]:
	i: 366(), 167(f)
	o: 628(t), 736&792(f)

nname: 366
n 366(None)[except Exception, e:
	print 'Unable to initialize main Canvas, program exits:'
	raise SystemExit(str(e))
]:
	i: 164()
	o: 410()

nname: 167
n 167(None)[try:
	import wyvas
except (ImportError, AssertionError):
	print 'Unable to load wyvas, loading fakevas...'
	wyvas = __import__('fakevas')
	sys.modules['wyvas'] = wyvas
if display is None:
	if 'input.dfbevents' in config.plugins:
		pass
	display = wyvas.Canvas((config.display_width, config.display_height), event=0, font_path=os.path.join(config.themes_dir, 'fonts'), fps=config.fps, key_repeat=config.key_repeat, queue_size=config.key_q_size)
]:
	i: 164(try)
	o: 410()

nname: 164
n 164(None)[try:
	pass
]:
	i: 158(try)
	o: 167(try), 366()

nname: 158
n 158(None)[try:
	pass
]:
	i: 98(), 125()
	o: 164(try), 1158()

nname: 125
n 125(None)[except:
	debug.PRINT_EXCEPTION()
	debug.log.error('Time configuration failed')
]:
	i: 0()
	o: 158()

nname: 98
n 98(None)[TimeManager().time_setter = config.user_config['base']['timeupdatemode']
]:
	i: 0()
	o: 158()

nname: 0
n 0(None)[from pygui.facilities.optionparser import parser
options, args = parser.parse_args()
try:
	from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
	if config.user_config['base']['firstboot']:
		config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER
]:
	i: 
	o: 98(), 125()

nname: 1189
n 1189(None)[notifier.Task(deferred_startup).start(7)
notifier.loop()
return None
]:
	i: 410(), 1158()
	o: 

nname: 1158
n 1158(None)[except Exception, e:
	debug.PRINT_EXCEPTION()
]:
	i: 158()
	o: 1189()

nname: 410
n 410(None)[from pygui.shared import pygui_globs
pygui_globs['display'] = display
pygui_globs['demomode'] = None
pygui_globs['wydbus'] = None
from pygui.menu.stack import MenuManager
menumanager = MenuManager()
import pygui.gui.engine as gui_engine
engine = gui_engine.ViewManager(display, config.theme_engine)
engine_loader = engine.loader_iterator()
engine_loader.next()
menumanager.engines.append(engine)
from pygui.menu.menu.home import RootMenu, HomeMenu
if len(sys.argv) > 1:
	pass
focus = False
if previous_objects:
	for name, oo in previous_objects.iteritems():
		if name.startswith('bar'):
			oo.unparent()
			continue
		oo.animate('color', a=0, duration=2, end_callback=oo.unparent)
	previous_objects.clear()
import peewee.notifier as notifier
RootMenu().show()
HomeMenu().show()
if 'restore_last_universe' in config.plugins and not config.user_config['base']['firstboot']:
	def load_and_restore():
		yield None
		for i in engine_loader:
			yield None
		from pygui.facilities.power import restore_last_universe
		restore_last_universe()

	notifier.Task(load_and_restore().next).start(1.0, loop=True)
else:
	notifier.Task(engine_loader.next).start(1.0, loop=True)
if 'event_logger' in config.plugins:
	from pygui.facilities.eventlogger import EventLoggerPlugin
	EventLoggerPlugin()
if config.user_config['base']['firstboot']:
	from pygui.menu.menu.firstboot import FirstBootMenu
	notifier.Task(FirstBootMenu().show).start(10)
else:
	if config.user_config['advanced']['demo_mode'] and config.user_config['advanced']['start_on_demo_mode']:
		from pygui.item.parameters.advanced import LaunchDemoItem
		notifier.Task(LaunchDemoItem(_('Run demo mode')).execute).start(10)
try:
	from pygui.facilities.power import PowerManager
	PowerManager().notify_new_max_power_state(3)
except:
	debug.PRINT_EXCEPTION()
]:
	i: 366(), 167(f)
	o: 1189()

nname: 366
n 366(None)[except Exception, e:
	print 'Unable to initialize main Canvas, program exits:'
	raise SystemExit(str(e))
]:
	i: 164()
	o: 410()

nname: 167
n 167(None)[try:
	import wyvas
except (ImportError, AssertionError):
	print 'Unable to load wyvas, loading fakevas...'
	wyvas = __import__('fakevas')
	sys.modules['wyvas'] = wyvas
if display is None:
	if 'input.dfbevents' in config.plugins:
		pass
	display = wyvas.Canvas((config.display_width, config.display_height), event=0, font_path=os.path.join(config.themes_dir, 'fonts'), fps=config.fps, key_repeat=config.key_repeat, queue_size=config.key_q_size)
]:
	i: 164(try)
	o: 410()

nname: 164
n 164(None)[try:
	pass
]:
	i: 158(try)
	o: 167(try), 366()

nname: 158
n 158(None)[try:
	pass
]:
	i: 98(), 125()
	o: 164(try), 1158()

nname: 125
n 125(None)[except:
	debug.PRINT_EXCEPTION()
	debug.log.error('Time configuration failed')
]:
	i: 0()
	o: 158()

nname: 98
n 98(None)[TimeManager().time_setter = config.user_config['base']['timeupdatemode']
]:
	i: 0()
	o: 158()

nname: 0
n 0(None)[from pygui.facilities.optionparser import parser
options, args = parser.parse_args()
try:
	from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
	if config.user_config['base']['firstboot']:
		config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER
]:
	i: 
	o: 98(), 125()

self.nodes: {0: <unpyclib.structure.node instance at 0x9e5508c>, 1158: <unpyclib.structure.node instance at 0x9e559cc>, 366: <unpyclib.structure.node instance at 0x9e556ac>, 410: <unpyclib.structure.node instance at 0x9e5578c>, 158: <unpyclib.structure.node instance at 0x9e5522c>, 164: <unpyclib.structure.node instance at 0x9e41bec>, 167: <unpyclib.structure.node instance at 0x9e553cc>, 1189: <unpyclib.structure.node instance at 0x9e4aeec>, 98: <unpyclib.structure.node instance at 0x9e4196c>, 125: <unpyclib.structure.node instance at 0x9e419ec>}
nname: 0
n 0(None)[return main(display, previous_objects)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76c436c>}
nname: 0
n 0(None)[return main(display, previous_objects)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76c438c>}
nname: 0
n 0(None)[return main(display, previous_objects)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76c42ac>}
nname: 0
n 0(None)[return main(display, previous_objects)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76c4c0c>}
nname: 396
n 396(None)[print '\nbye bye!\n'
]:
	i: 264(), 328(), 382()
	o: 

nname: 382
n 382(None)[main(display, previous_objects)
]:
	i: 318(f)
	o: 396()

nname: 328
n 328(None)[from peewee import analyse
analyse.Profiler().start((lambda : main(display, previous_objects)))
]:
	i: 318(t)
	o: 396()

nname: 318
n 318(config.code_profiler)[]:
	i: 163(f)
	o: 328(t), 382(f)

nname: 264
n 264(None)[from peewee import analyse
analyse.Cover().start((lambda : main(display, previous_objects)))
]:
	i: 163(t)
	o: 396()

nname: 163
n 163(config.code_coverage)[def deferred_startup():
	debug.log.debug('Loading deferred')
	from pygui.deferred_startup import init_startup
	init_startup()
	try:
		file('/tmp/ready', 'w')
	except:
		pass
	if os.environ.get('RPDB') or 'rpdb' in config.plugins:
		import rpdb2
		rpdb2.start_embedded_debugger('pygui', fAllowRemote=True, timeout=60)
	import socket
	socket.setdefaulttimeout(config.socket_timeout)

debug.log = debug.GET_LOGGER('pygui')
from pygui.facilities import l10n
l10n.set_language()
def main(display, previous_objects):
	from pygui.facilities.optionparser import parser
	options, args = parser.parse_args()
	try:
		from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
		if config.user_config['base']['firstboot']:
			config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER

]:
	i: 133(), 162()
	o: 264(t), 318(f)

nname: 162
n 162(None)[]:
	i: 124(f)
	o: 163()

nname: 133
n 133(None)[import fakewydbus
sys.modules['wydbus'] = fakewydbus
]:
	i: 124(t)
	o: 163()

nname: 124
n 124(config.no_DBUS)[]:
	i: 58(), 90(), 122(AE)
	o: 133(t), 162(f)

nname: 122
n 122(None)[]:
	i: 74(f)
	o: 124(AE)

nname: 90
n 90(None)[import fakewymedia
sys.modules['wymedia'] = fakewymedia
]:
	i: 74(t)
	o: 124()

nname: 74
n 74(<dummy_ex3> EXC_MATCH (ImportError, AssertionError))[]:
	i: 0(except)
	o: 90(t), 122(f)

nname: 58
n 58(None)[import wymedia
]:
	i: 0(try)
	o: 124()

nname: 0
n 0(None)[import os
import sys
import pygui.config as config
from peewee import debug
]:
	i: 
	o: 58(try), 74(except)

nname: 163
n 163(None)[def deferred_startup():
	debug.log.debug('Loading deferred')
	from pygui.deferred_startup import init_startup
	init_startup()
	try:
		file('/tmp/ready', 'w')
	except:
		pass
	if os.environ.get('RPDB') or 'rpdb' in config.plugins:
		import rpdb2
		rpdb2.start_embedded_debugger('pygui', fAllowRemote=True, timeout=60)
	import socket
	socket.setdefaulttimeout(config.socket_timeout)

debug.log = debug.GET_LOGGER('pygui')
from pygui.facilities import l10n
l10n.set_language()
def main(display, previous_objects):
	from pygui.facilities.optionparser import parser
	options, args = parser.parse_args()
	try:
		from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
		if config.user_config['base']['firstboot']:
			config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER

if config.code_coverage:
	from peewee import analyse
	analyse.Cover().start((lambda : main(display, previous_objects)))
else:
	if config.code_profiler:
		from peewee import analyse
		analyse.Profiler().start((lambda : main(display, previous_objects)))
	else:
		main(display, previous_objects)
print '\nbye bye!\n'
]:
	i: 74()
	o: 

nname: 74
n 74(None)[except (ImportError, AssertionError):
	import fakewymedia
	sys.modules['wymedia'] = fakewymedia
if config.no_DBUS:
	import fakewydbus
	sys.modules['wydbus'] = fakewydbus
]:
	i: 0()
	o: 163()

nname: 0
n 0(None)[import os
import sys
import pygui.config as config
from peewee import debug
try:
	import wymedia
]:
	i: 
	o: 74()

nname: 163
n 163(None)[def deferred_startup():
	debug.log.debug('Loading deferred')
	from pygui.deferred_startup import init_startup
	init_startup()
	try:
		file('/tmp/ready', 'w')
	except:
		pass
	if os.environ.get('RPDB') or 'rpdb' in config.plugins:
		import rpdb2
		rpdb2.start_embedded_debugger('pygui', fAllowRemote=True, timeout=60)
	import socket
	socket.setdefaulttimeout(config.socket_timeout)

debug.log = debug.GET_LOGGER('pygui')
from pygui.facilities import l10n
l10n.set_language()
def main(display, previous_objects):
	from pygui.facilities.optionparser import parser
	options, args = parser.parse_args()
	try:
		from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
		if config.user_config['base']['firstboot']:
			config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER

if config.code_coverage:
	from peewee import analyse
	analyse.Cover().start((lambda : main(display, previous_objects)))
else:
	if config.code_profiler:
		from peewee import analyse
		analyse.Profiler().start((lambda : main(display, previous_objects)))
	else:
		main(display, previous_objects)
print '\nbye bye!\n'
]:
	i: 0()
	o: 

nname: 0
n 0(None)[import os
import sys
import pygui.config as config
from peewee import debug
try:
	import wymedia
except (ImportError, AssertionError):
	import fakewymedia
	sys.modules['wymedia'] = fakewymedia
if config.no_DBUS:
	import fakewydbus
	sys.modules['wydbus'] = fakewydbus
]:
	i: 
	o: 163()

nname: 0
n 0(None)[import os
import sys
import pygui.config as config
from peewee import debug
try:
	import wymedia
except (ImportError, AssertionError):
	import fakewymedia
	sys.modules['wymedia'] = fakewymedia
if config.no_DBUS:
	import fakewydbus
	sys.modules['wydbus'] = fakewydbus
def deferred_startup():
	debug.log.debug('Loading deferred')
	from pygui.deferred_startup import init_startup
	init_startup()
	try:
		file('/tmp/ready', 'w')
	except:
		pass
	if os.environ.get('RPDB') or 'rpdb' in config.plugins:
		import rpdb2
		rpdb2.start_embedded_debugger('pygui', fAllowRemote=True, timeout=60)
	import socket
	socket.setdefaulttimeout(config.socket_timeout)

debug.log = debug.GET_LOGGER('pygui')
from pygui.facilities import l10n
l10n.set_language()
def main(display, previous_objects):
	from pygui.facilities.optionparser import parser
	options, args = parser.parse_args()
	try:
		from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
		if config.user_config['base']['firstboot']:
			config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER

if config.code_coverage:
	from peewee import analyse
	analyse.Cover().start((lambda : main(display, previous_objects)))
else:
	if config.code_profiler:
		from peewee import analyse
		analyse.Profiler().start((lambda : main(display, previous_objects)))
	else:
		main(display, previous_objects)
print '\nbye bye!\n'
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76b2b4c>}
nname: 89
n 89(None)[]:
	i: 77(), 88()
	o: 

nname: 88
n 88(None)[]:
	i: 0(f)
	o: 89()

nname: 77
n 77(None)[startup()
]:
	i: 0(t)
	o: 89()

nname: 0
n 0(__name__ == '__main__')[from __future__ import absolute_import
import gettext
gettext.NullTranslations().install()
__version__ = '1.3.0'
def startup(display=None, previous_objects=None):
	import os
	import sys
	import pygui.config as config
	from peewee import debug
	try:
		import wymedia
	except (ImportError, AssertionError):
		import fakewymedia
		sys.modules['wymedia'] = fakewymedia
	if config.no_DBUS:
		import fakewydbus
		sys.modules['wydbus'] = fakewydbus
	def deferred_startup():
		debug.log.debug('Loading deferred')
		from pygui.deferred_startup import init_startup
		init_startup()
		try:
			file('/tmp/ready', 'w')
		except:
			pass
		if os.environ.get('RPDB') or 'rpdb' in config.plugins:
			import rpdb2
			rpdb2.start_embedded_debugger('pygui', fAllowRemote=True, timeout=60)
		import socket
		socket.setdefaulttimeout(config.socket_timeout)

	debug.log = debug.GET_LOGGER('pygui')
	from pygui.facilities import l10n
	l10n.set_language()
	def main(display, previous_objects):
		from pygui.facilities.optionparser import parser
		options, args = parser.parse_args()
		try:
			from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
			if config.user_config['base']['firstboot']:
				config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER

	if config.code_coverage:
		from peewee import analyse
		analyse.Cover().start((lambda : main(display, previous_objects)))
	else:
		if config.code_profiler:
			from peewee import analyse
			analyse.Profiler().start((lambda : main(display, previous_objects)))
		else:
			main(display, previous_objects)
	print '\nbye bye!\n'

]:
	i: 
	o: 77(t), 88(f)

nname: 0
n 0(None)[from __future__ import absolute_import
import gettext
gettext.NullTranslations().install()
__version__ = '1.3.0'
def startup(display=None, previous_objects=None):
	import os
	import sys
	import pygui.config as config
	from peewee import debug
	try:
		import wymedia
	except (ImportError, AssertionError):
		import fakewymedia
		sys.modules['wymedia'] = fakewymedia
	if config.no_DBUS:
		import fakewydbus
		sys.modules['wydbus'] = fakewydbus
	def deferred_startup():
		debug.log.debug('Loading deferred')
		from pygui.deferred_startup import init_startup
		init_startup()
		try:
			file('/tmp/ready', 'w')
		except:
			pass
		if os.environ.get('RPDB') or 'rpdb' in config.plugins:
			import rpdb2
			rpdb2.start_embedded_debugger('pygui', fAllowRemote=True, timeout=60)
		import socket
		socket.setdefaulttimeout(config.socket_timeout)

	debug.log = debug.GET_LOGGER('pygui')
	from pygui.facilities import l10n
	l10n.set_language()
	def main(display, previous_objects):
		from pygui.facilities.optionparser import parser
		options, args = parser.parse_args()
		try:
			from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
			if config.user_config['base']['firstboot']:
				config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER

	if config.code_coverage:
		from peewee import analyse
		analyse.Cover().start((lambda : main(display, previous_objects)))
	else:
		if config.code_profiler:
			from peewee import analyse
			analyse.Profiler().start((lambda : main(display, previous_objects)))
		else:
			main(display, previous_objects)
	print '\nbye bye!\n'

if __name__ == '__main__':
	startup()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76a8f0c>}
from __future__ import absolute_import
import gettext
gettext.NullTranslations().install()
__version__ = '1.3.0'
def startup(display=None, previous_objects=None):
	import os
	import sys
	import pygui.config as config
	from peewee import debug
	try:
		import wymedia
	except (ImportError, AssertionError):
		import fakewymedia
		sys.modules['wymedia'] = fakewymedia
	if config.no_DBUS:
		import fakewydbus
		sys.modules['wydbus'] = fakewydbus
	def deferred_startup():
		debug.log.debug('Loading deferred')
		from pygui.deferred_startup import init_startup
		init_startup()
		try:
			file('/tmp/ready', 'w')
		except:
			pass
		if os.environ.get('RPDB') or 'rpdb' in config.plugins:
			import rpdb2
			rpdb2.start_embedded_debugger('pygui', fAllowRemote=True, timeout=60)
		import socket
		socket.setdefaulttimeout(config.socket_timeout)

	debug.log = debug.GET_LOGGER('pygui')
	from pygui.facilities import l10n
	l10n.set_language()
	def main(display, previous_objects):
		from pygui.facilities.optionparser import parser
		options, args = parser.parse_args()
		try:
			from peewee.dateutils import TimeManager, WYCLOCK_AUTO_SETTER
			if config.user_config['base']['firstboot']:
				config.user_config['base']['timeupdatemode'] = WYCLOCK_AUTO_SETTER

	if config.code_coverage:
		from peewee import analyse
		analyse.Cover().start((lambda : main(display, previous_objects)))
	else:
		if config.code_profiler:
			from peewee import analyse
			analyse.Profiler().start((lambda : main(display, previous_objects)))
		else:
			main(display, previous_objects)
	print '\nbye bye!\n'

if __name__ == '__main__':
	startup()
