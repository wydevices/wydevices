# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 143
n 143(None)[]:
	i: 57(), 83()
	o: 

nname: 57
n 57(None)[log.error("Can't load lirc plugin")
del self.lircd
]:
	i: 0(except)
	o: 143()

nname: 83
n 83(None)[self.kbmap_get = DIRECTFB_MAP.get
self.setDaemon(True)
self.setName('LircPlugin')
Task(self.start).start(1.0)
]:
	i: 19(), 82(AE)
	o: 143()

nname: 19
n 19(None)[self.lircd = socket(AF_UNIX, SOCK_STREAM)
self.lircd.connect('/dev/lircd')
]:
	i: 0(try)
	o: 83()

nname: 0
n 0(None)[threading.Thread.__init__(self)
]:
	i: 
	o: 19(try), 57(except)

nname: 143
n 143(None)[]:
	i: 57()
	o: 

nname: 57
n 57(None)[except:
	log.error("Can't load lirc plugin")
	del self.lircd
else:
	self.kbmap_get = DIRECTFB_MAP.get
	self.setDaemon(True)
	self.setName('LircPlugin')
	Task(self.start).start(1.0)
]:
	i: 0()
	o: 143()

nname: 0
n 0(None)[threading.Thread.__init__(self)
try:
	self.lircd = socket(AF_UNIX, SOCK_STREAM)
	self.lircd.connect('/dev/lircd')
]:
	i: 
	o: 57()

nname: 143
n 143(None)[]:
	i: 0()
	o: 

nname: 0
n 0(None)[threading.Thread.__init__(self)
try:
	self.lircd = socket(AF_UNIX, SOCK_STREAM)
	self.lircd.connect('/dev/lircd')
except:
	log.error("Can't load lirc plugin")
	del self.lircd
else:
	self.kbmap_get = DIRECTFB_MAP.get
	self.setDaemon(True)
	self.setName('LircPlugin')
	Task(self.start).start(1.0)
]:
	i: 
	o: 143()

nname: 0
n 0(None)[threading.Thread.__init__(self)
try:
	self.lircd = socket(AF_UNIX, SOCK_STREAM)
	self.lircd.connect('/dev/lircd')
except:
	log.error("Can't load lirc plugin")
	del self.lircd
else:
	self.kbmap_get = DIRECTFB_MAP.get
	self.setDaemon(True)
	self.setName('LircPlugin')
	Task(self.start).start(1.0)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76e7b6c>}
nname: 361
n 361(None)[return None
]:
	i: 0(AL), 359()
	o: 

nname: 359
n 359(None)[]:
	i: 3(f), 356()
	o: 361()

nname: 356
n 356(None)[]:
	i: 254(JA), 309(JA), 327(JA), 355()
	o: 359()

nname: 355
n 355(None)[]:
	i: 222&237(f), 352()
	o: 356()

nname: 352
n 352(None)[continue
]:
	i: 350(AE)
	o: 355()

nname: 350
n 350(None)[]:
	i: 316(f)
	o: 352(AE)

nname: 327
n 327(None)[log.warn('Unmapped key: %s.', keycode)
]:
	i: 316(t)
	o: 356(JA)

nname: 316
n 316(<dummy_ex3> EXC_MATCH KeyError)[]:
	i: 299(f)
	o: 327(t), 350(f)

nname: 309
n 309(None)[]:
	i: 299(t)
	o: 356(JA)

nname: 299
n 299(<dummy_ex3> EXC_MATCH Full)[]:
	i: 250(except)
	o: 309(t), 316(f)

nname: 254
n 254(None)[ts = time() + 0.20000000000000001
mapped.post(dict(count=1, timeout=ts))
]:
	i: 250(try)
	o: 356(JA)

nname: 250
n 250(None)[]:
	i: 222&237(t)
	o: 254(try), 299(except)

nname: 222&237
n 222&237(keycode is not None and mapped is not None)[mapped = None
]:
	i: 196(), 218()
	o: 250(t), 355(f)

nname: 218
n 218(None)[]:
	i: 190(f)
	o: 222&237()

nname: 196
n 196(None)[]:
	i: 190(t)
	o: 222&237()

nname: 190
n 190(keycode)[]:
	i: 134(), 148(), 188(AE)
	o: 196(t), 218(f)

nname: 188
n 188(None)[]:
	i: 138(f)
	o: 190(AE)

nname: 148
n 148(None)[#, e
log.error('Invalid keycode %s // %s %s', e, rep, keycode, garbage)
keycode = None
]:
	i: 138(t)
	o: 190()

nname: 138
n 138(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 9(except)
	o: 148(t), 188(f)

nname: 134
n 134(None)[]:
	i: 123(), 133()
	o: 190()

nname: 133
n 133(None)[]:
	i: 96&99&106(f)
	o: 134()

nname: 123
n 123(None)[keycode = None
]:
	i: 96&99&106(t)
	o: 134()

nname: 96&99&106
n 96&99&106(0 < rep or rep and keycode[0] == 'P')[]:
	i: 84(), 94()
	o: 123(t), 133(f)

nname: 94
n 94(None)[rep
]:
	i: 13(f)
	o: 96&99&106()

nname: 84
n 84(None)[]:
	i: 13(t)
	o: 96&99&106()

nname: 13
n 13(0 < rep)[code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
rep = int(rep, 16)
]:
	i: 9(try)
	o: 84(t), 94(f)

nname: 9
n 9(None)[]:
	i: 3(t)
	o: 13(try), 138(except)

nname: 3
n 3(True)[]:
	i: 0(loop)
	o: 9(t), 359(f)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 361(AL)

nname: 361
n 361(None)[return None
]:
	i: 0(AL), 3(f), 254(JA), 327(JA), 316(f), 299(t), 190(f), 352()
	o: 

nname: 327
n 327(None)[log.warn('Unmapped key: %s.', keycode)
]:
	i: 316(t)
	o: 361(JA)

nname: 316
n 316(<dummy_ex3> EXC_MATCH KeyError)[]:
	i: 299(f)
	o: 327(t), 361(f)

nname: 299
n 299(<dummy_ex3> EXC_MATCH Full)[]:
	i: 250(except)
	o: 361(t), 316(f)

nname: 254
n 254(None)[ts = time() + 0.20000000000000001
mapped.post(dict(count=1, timeout=ts))
]:
	i: 250(try)
	o: 361(JA)

nname: 250
n 250(None)[]:
	i: 190(t)
	o: 254(try), 299(except)

nname: 190
n 190(keycode is not None and mapped is not None)[if keycode:
	pass
mapped = None
]:
	i: 138(), 96&99&106()
	o: 250(t), 361(f)

nname: 138
n 138(None)[except Exception, e:
	log.error('Invalid keycode %s // %s %s', e, rep, keycode, garbage)
	keycode = None
]:
	i: 9()
	o: 190()

nname: 96&99&106
n 96&99&106(None)[if 0 < rep or rep and keycode[0] == 'P':
	keycode = None
]:
	i: 9()
	o: 190()

nname: 9
n 9(None)[try:
	code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
	rep = int(rep, 16)
	if 0 < rep:
		pass
	else:
		rep
]:
	i: 3(t)
	o: 96&99&106(), 138()

nname: 3
n 3(True)[]:
	i: 0(loop)
	o: 9(t), 361(f)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 361(AL)

nname: 361
n 361(None)[return None
]:
	i: 0(AL), 3(f), 299(t), 190(f), 352()
	o: 

nname: 299
n 299(None)[except:
	if not <dummy_ex3> EXC_MATCH Full:
		except KeyError:
			log.warn('Unmapped key: %s.', keycode)
]:
	i: 250()
	o: 361(JA)

nname: 250
n 250(None)[try:
	ts = time() + 0.20000000000000001
	mapped.post(dict(count=1, timeout=ts))
]:
	i: 190(t)
	o: 299()

nname: 190
n 190(keycode is not None and mapped is not None)[if keycode:
	pass
mapped = None
]:
	i: 138(), 96&99&106()
	o: 250(t), 361(f)

nname: 138
n 138(None)[except Exception, e:
	log.error('Invalid keycode %s // %s %s', e, rep, keycode, garbage)
	keycode = None
]:
	i: 9()
	o: 190()

nname: 96&99&106
n 96&99&106(None)[if 0 < rep or rep and keycode[0] == 'P':
	keycode = None
]:
	i: 9()
	o: 190()

nname: 9
n 9(None)[try:
	code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
	rep = int(rep, 16)
	if 0 < rep:
		pass
	else:
		rep
]:
	i: 3(t)
	o: 96&99&106(), 138()

nname: 3
n 3(True)[]:
	i: 0(loop)
	o: 9(t), 361(f)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 361(AL)

nname: 361
n 361(None)[return None
]:
	i: 0(AL), 3(f), 250(t), 190(f), 352()
	o: 

nname: 250
n 250(None)[try:
	ts = time() + 0.20000000000000001
	mapped.post(dict(count=1, timeout=ts))
except:
	if not <dummy_ex3> EXC_MATCH Full:
		except KeyError:
			log.warn('Unmapped key: %s.', keycode)
]:
	i: 190(t)
	o: 361(JA)

nname: 190
n 190(keycode is not None and mapped is not None)[if keycode:
	pass
mapped = None
]:
	i: 138(), 96&99&106()
	o: 250(t), 361(f)

nname: 138
n 138(None)[except Exception, e:
	log.error('Invalid keycode %s // %s %s', e, rep, keycode, garbage)
	keycode = None
]:
	i: 9()
	o: 190()

nname: 96&99&106
n 96&99&106(None)[if 0 < rep or rep and keycode[0] == 'P':
	keycode = None
]:
	i: 9()
	o: 190()

nname: 9
n 9(None)[try:
	code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
	rep = int(rep, 16)
	if 0 < rep:
		pass
	else:
		rep
]:
	i: 3(t)
	o: 96&99&106(), 138()

nname: 3
n 3(True)[]:
	i: 0(loop)
	o: 9(t), 361(f)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 361(AL)

nname: 361
n 361(None)[return None
]:
	i: 0(AL), 3(f), 190(f), 352()
	o: 

nname: 190
n 190(None)[if keycode:
	pass
mapped = None
if keycode is not None and mapped is not None:
	try:
		ts = time() + 0.20000000000000001
		mapped.post(dict(count=1, timeout=ts))
	except:
		if not <dummy_ex3> EXC_MATCH Full:
			except KeyError:
				log.warn('Unmapped key: %s.', keycode)
]:
	i: 138(), 96&99&106()
	o: 361(JA)

nname: 138
n 138(None)[except Exception, e:
	log.error('Invalid keycode %s // %s %s', e, rep, keycode, garbage)
	keycode = None
]:
	i: 9()
	o: 190()

nname: 96&99&106
n 96&99&106(None)[if 0 < rep or rep and keycode[0] == 'P':
	keycode = None
]:
	i: 9()
	o: 190()

nname: 9
n 9(None)[try:
	code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
	rep = int(rep, 16)
	if 0 < rep:
		pass
	else:
		rep
]:
	i: 3(t)
	o: 96&99&106(), 138()

nname: 3
n 3(True)[]:
	i: 0(loop)
	o: 9(t), 361(f)

nname: 0
n 0(None)[]:
	i: 
	o: 3(loop), 361(AL)

self.nodes: {0: <unpyclib.structure.node instance at 0xb76ea86c>, 3: <unpyclib.structure.node instance at 0xb76ea8ac>, 9: <unpyclib.structure.node instance at 0xb76ff58c>, 138: <unpyclib.structure.node instance at 0xb76ff4ec>, '96&99&106': <unpyclib.structure.node instance at 0xb76fffcc>, 190: <unpyclib.structure.node instance at 0xb76ffacc>, 352: <unpyclib.structure.node instance at 0xb76f558c>, 350: <unpyclib.structure.node instance at 0xb76f550c>, 361: <unpyclib.structure.node instance at 0xb76f578c>}
nname: 6
n 6(None)[__doc__ = '\n    Plugin for stdin control.\n    '
def __init__(self, *args):
	threading.Thread.__init__(self)
	try:
		self.lircd = socket(AF_UNIX, SOCK_STREAM)
		self.lircd.connect('/dev/lircd')
	except:
		log.error("Can't load lirc plugin")
		del self.lircd
	else:
		self.kbmap_get = DIRECTFB_MAP.get
		self.setDaemon(True)
		self.setName('LircPlugin')
		Task(self.start).start(1.0)

def run(self):
	pass

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb76e2e0c>}
nname: 0
n 0(None)[from __future__ import absolute_import
from peewee.notifier import Task
from peewee.gettime import time
from peewee.debug import GET_LOGGER
from Queue import Full
from pygui.input import DIRECTFB_MAP
from socket import socket, AF_UNIX, SOCK_STREAM
import threading
log = GET_LOGGER(__name__)
class PluginInterface(.):
	__doc__ = '\n    Plugin for stdin control.\n    '
	def __init__(self, *args):
		threading.Thread.__init__(self)
		try:
			self.lircd = socket(AF_UNIX, SOCK_STREAM)
			self.lircd.connect('/dev/lircd')
		except:
			log.error("Can't load lirc plugin")
			del self.lircd
		else:
			self.kbmap_get = DIRECTFB_MAP.get
			self.setDaemon(True)
			self.setName('LircPlugin')
			Task(self.start).start(1.0)

	def run(self):
		pass



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76dbe4c>}
from __future__ import absolute_import
from peewee.notifier import Task
from peewee.gettime import time
from peewee.debug import GET_LOGGER
from Queue import Full
from pygui.input import DIRECTFB_MAP
from socket import socket, AF_UNIX, SOCK_STREAM
import threading
log = GET_LOGGER(__name__)
class PluginInterface(.):
	__doc__ = '\n    Plugin for stdin control.\n    '
	def __init__(self, *args):
		threading.Thread.__init__(self)
		try:
			self.lircd = socket(AF_UNIX, SOCK_STREAM)
			self.lircd.connect('/dev/lircd')
		except:
			log.error("Can't load lirc plugin")
			del self.lircd
		else:
			self.kbmap_get = DIRECTFB_MAP.get
			self.setDaemon(True)
			self.setName('LircPlugin')
			Task(self.start).start(1.0)

	def run(self):
		pass



