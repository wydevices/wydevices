# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 116
n 116(None)[]:
	i: 41(), 67()
	o: 

nname: 41
n 41(None)[log.error("Can't load lirc plugin")
del self.lircd
]:
	i: 0(except)
	o: 116()

nname: 67
n 67(None)[notifier.descriptor_watch(self.lircd.fileno(), self.handle)
self.kbmap_get = DIRECTFB_MAP.get
self.post_key = post_key
]:
	i: 3(), 66(AE)
	o: 116()

nname: 3
n 3(None)[self.lircd = socket(AF_UNIX, SOCK_STREAM)
self.lircd.connect('/dev/lircd')
]:
	i: 0(try)
	o: 67()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 41(except)

nname: 116
n 116(None)[]:
	i: 41()
	o: 

nname: 41
n 41(None)[except:
	log.error("Can't load lirc plugin")
	del self.lircd
else:
	notifier.descriptor_watch(self.lircd.fileno(), self.handle)
	self.kbmap_get = DIRECTFB_MAP.get
	self.post_key = post_key
]:
	i: 0()
	o: 116()

nname: 0
n 0(None)[try:
	self.lircd = socket(AF_UNIX, SOCK_STREAM)
	self.lircd.connect('/dev/lircd')
]:
	i: 
	o: 41()

nname: 116
n 116(None)[]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	self.lircd = socket(AF_UNIX, SOCK_STREAM)
	self.lircd.connect('/dev/lircd')
except:
	log.error("Can't load lirc plugin")
	del self.lircd
else:
	notifier.descriptor_watch(self.lircd.fileno(), self.handle)
	self.kbmap_get = DIRECTFB_MAP.get
	self.post_key = post_key
]:
	i: 
	o: 116()

nname: 0
n 0(None)[try:
	self.lircd = socket(AF_UNIX, SOCK_STREAM)
	self.lircd.connect('/dev/lircd')
except:
	log.error("Can't load lirc plugin")
	del self.lircd
else:
	notifier.descriptor_watch(self.lircd.fileno(), self.handle)
	self.kbmap_get = DIRECTFB_MAP.get
	self.post_key = post_key
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ceaac>}
nname: 277
n 277(None)[return True
]:
	i: 210(JA), 237(JA), 255(JA), 273(), 276()
	o: 

nname: 276
n 276(None)[]:
	i: 178&193(f)
	o: 277()

nname: 273
n 273(None)[]:
	i: 271(AE)
	o: 277()

nname: 271
n 271(None)[]:
	i: 244(f)
	o: 273(AE)

nname: 255
n 255(None)[print 'Unmapped key: %s.' % keycode
]:
	i: 244(t)
	o: 277(JA)

nname: 244
n 244(<dummy_ex3> EXC_MATCH KeyError)[]:
	i: 227(f)
	o: 255(t), 271(f)

nname: 237
n 237(None)[]:
	i: 227(t)
	o: 277(JA)

nname: 227
n 227(<dummy_ex3> EXC_MATCH Full)[]:
	i: 206(except)
	o: 237(t), 244(f)

nname: 210
n 210(None)[self.post_key(mapped)
]:
	i: 206(try)
	o: 277(JA)

nname: 206
n 206(None)[]:
	i: 178&193(t)
	o: 210(try), 227(except)

nname: 178&193
n 178&193(keycode is not None and mapped is not None)[mapped = None
]:
	i: 152(), 174()
	o: 206(t), 276(f)

nname: 174
n 174(None)[]:
	i: 146(f)
	o: 178&193()

nname: 152
n 152(None)[]:
	i: 146(t)
	o: 178&193()

nname: 146
n 146(keycode)[]:
	i: 100(), 114(), 144(AE)
	o: 152(t), 174(f)

nname: 144
n 144(None)[]:
	i: 104(f)
	o: 146(AE)

nname: 114
n 114(None)[#, e
print 'Invalid keycode',
print str(e)
keycode = None
]:
	i: 104(t)
	o: 146()

nname: 104
n 104(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 114(t), 144(f)

nname: 100
n 100(None)[]:
	i: 89(), 99()
	o: 146()

nname: 99
n 99(None)[]:
	i: 86(f)
	o: 100()

nname: 89
n 89(None)[keycode = None
]:
	i: 86(t)
	o: 100()

nname: 86
n 86(0 < rep)[]:
	i: 74(), 84()
	o: 89(t), 99(f)

nname: 84
n 84(None)[rep
]:
	i: 3(f)
	o: 86()

nname: 74
n 74(None)[]:
	i: 3(t)
	o: 86()

nname: 3
n 3(0 < rep)[code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
rep = int(rep, 16)
]:
	i: 0(try)
	o: 74(t), 84(f)

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 104(except)

nname: 277
n 277(None)[return True
]:
	i: 210(JA), 255(JA), 244(f), 227(t), 271(AE), 146(f)
	o: 

nname: 255
n 255(None)[print 'Unmapped key: %s.' % keycode
]:
	i: 244(t)
	o: 277(JA)

nname: 244
n 244(<dummy_ex3> EXC_MATCH KeyError)[]:
	i: 227(f)
	o: 255(t), 277(f)

nname: 227
n 227(<dummy_ex3> EXC_MATCH Full)[]:
	i: 206(except)
	o: 277(t), 244(f)

nname: 210
n 210(None)[self.post_key(mapped)
]:
	i: 206(try)
	o: 277(JA)

nname: 206
n 206(None)[]:
	i: 146(t)
	o: 210(try), 227(except)

nname: 146
n 146(keycode is not None and mapped is not None)[if keycode:
	pass
mapped = None
]:
	i: 86(), 104()
	o: 206(t), 277(f)

nname: 104
n 104(None)[except Exception, e:
	print 'Invalid keycode',
	print str(e)
	keycode = None
]:
	i: 0()
	o: 146()

nname: 86
n 86(None)[if 0 < rep:
	keycode = None
]:
	i: 0()
	o: 146()

nname: 0
n 0(None)[try:
	code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
	rep = int(rep, 16)
	if 0 < rep:
		pass
	else:
		rep
]:
	i: 
	o: 86(), 104()

nname: 277
n 277(None)[return True
]:
	i: 227(t), 146(f)
	o: 

nname: 227
n 227(None)[except:
	if not <dummy_ex3> EXC_MATCH Full:
		except KeyError:
			print 'Unmapped key: %s.' % keycode
]:
	i: 206()
	o: 277(JA)

nname: 206
n 206(None)[try:
	self.post_key(mapped)
]:
	i: 146(t)
	o: 227()

nname: 146
n 146(keycode is not None and mapped is not None)[if keycode:
	pass
mapped = None
]:
	i: 86(), 104()
	o: 206(t), 277(f)

nname: 104
n 104(None)[except Exception, e:
	print 'Invalid keycode',
	print str(e)
	keycode = None
]:
	i: 0()
	o: 146()

nname: 86
n 86(None)[if 0 < rep:
	keycode = None
]:
	i: 0()
	o: 146()

nname: 0
n 0(None)[try:
	code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
	rep = int(rep, 16)
	if 0 < rep:
		pass
	else:
		rep
]:
	i: 
	o: 86(), 104()

nname: 277
n 277(None)[return True
]:
	i: 206(t), 146(f)
	o: 

nname: 206
n 206(None)[try:
	self.post_key(mapped)
except:
	if not <dummy_ex3> EXC_MATCH Full:
		except KeyError:
			print 'Unmapped key: %s.' % keycode
]:
	i: 146(t)
	o: 277(JA)

nname: 146
n 146(keycode is not None and mapped is not None)[if keycode:
	pass
mapped = None
]:
	i: 86(), 104()
	o: 206(t), 277(f)

nname: 104
n 104(None)[except Exception, e:
	print 'Invalid keycode',
	print str(e)
	keycode = None
]:
	i: 0()
	o: 146()

nname: 86
n 86(None)[if 0 < rep:
	keycode = None
]:
	i: 0()
	o: 146()

nname: 0
n 0(None)[try:
	code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
	rep = int(rep, 16)
	if 0 < rep:
		pass
	else:
		rep
]:
	i: 
	o: 86(), 104()

nname: 146
n 146(None)[if keycode:
	pass
mapped = None
if keycode is not None and mapped is not None:
	try:
		self.post_key(mapped)
	except:
		if not <dummy_ex3> EXC_MATCH Full:
			except KeyError:
				print 'Unmapped key: %s.' % keycode
return True
]:
	i: 86(), 104()
	o: 

nname: 104
n 104(None)[except Exception, e:
	print 'Invalid keycode',
	print str(e)
	keycode = None
]:
	i: 0()
	o: 146()

nname: 86
n 86(None)[if 0 < rep:
	keycode = None
]:
	i: 0()
	o: 146()

nname: 0
n 0(None)[try:
	code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
	rep = int(rep, 16)
	if 0 < rep:
		pass
	else:
		rep
]:
	i: 
	o: 86(), 104()

self.nodes: {0: <unpyclib.structure.node instance at 0xb75de54c>, 146: <unpyclib.structure.node instance at 0xb75de1ec>, 86: <unpyclib.structure.node instance at 0xb75de36c>, 104: <unpyclib.structure.node instance at 0xb75dec6c>}
nname: 6
n 6(None)[__doc__ = '\n    Plugin for stdin control.\n    '
def __init__(self, post_key):
	try:
		self.lircd = socket(AF_UNIX, SOCK_STREAM)
		self.lircd.connect('/dev/lircd')
	except:
		log.error("Can't load lirc plugin")
		del self.lircd
	else:
		notifier.descriptor_watch(self.lircd.fileno(), self.handle)
		self.kbmap_get = DIRECTFB_MAP.get
		self.post_key = post_key

def handle(self):
	try:
		code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
		rep = int(rep, 16)
		if 0 < rep:
			pass
		else:
			rep

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb75c7f8c>}
nname: 0
n 0(None)[from __future__ import absolute_import
import peewee.notifier as notifier
from peewee.debug import log
from Queue import Full
from pygui.input import DIRECTFB_MAP
from socket import socket, AF_UNIX, SOCK_STREAM
class PluginInterface(object):
	__doc__ = '\n    Plugin for stdin control.\n    '
	def __init__(self, post_key):
		try:
			self.lircd = socket(AF_UNIX, SOCK_STREAM)
			self.lircd.connect('/dev/lircd')
		except:
			log.error("Can't load lirc plugin")
			del self.lircd
		else:
			notifier.descriptor_watch(self.lircd.fileno(), self.handle)
			self.kbmap_get = DIRECTFB_MAP.get
			self.post_key = post_key

	def handle(self):
		try:
			code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
			rep = int(rep, 16)
			if 0 < rep:
				pass
			else:
				rep



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75c72ec>}
from __future__ import absolute_import
import peewee.notifier as notifier
from peewee.debug import log
from Queue import Full
from pygui.input import DIRECTFB_MAP
from socket import socket, AF_UNIX, SOCK_STREAM
class PluginInterface(object):
	__doc__ = '\n    Plugin for stdin control.\n    '
	def __init__(self, post_key):
		try:
			self.lircd = socket(AF_UNIX, SOCK_STREAM)
			self.lircd.connect('/dev/lircd')
		except:
			log.error("Can't load lirc plugin")
			del self.lircd
		else:
			notifier.descriptor_watch(self.lircd.fileno(), self.handle)
			self.kbmap_get = DIRECTFB_MAP.get
			self.post_key = post_key

	def handle(self):
		try:
			code, rep, keycode, garbage = self.lircd.recv(512).split(None, 3)
			rep = int(rep, 16)
			if 0 < rep:
				pass
			else:
				rep



