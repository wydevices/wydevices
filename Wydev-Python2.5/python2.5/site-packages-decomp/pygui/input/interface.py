# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 77
n 77(None)[]:
	i: 3(), 55(), 75(AE)
	o: 

nname: 75
n 75(None)[]:
	i: 45(f)
	o: 77(AE)

nname: 55
n 55(None)[log.warning('EVENT DROPPED')
]:
	i: 45(t)
	o: 77()

nname: 45
n 45(<dummy_ex3> EXC_MATCH Full)[]:
	i: 0(except)
	o: 55(t), 75(f)

nname: 3
n 3(None)[event = event_map[key]
event.post(dict(count=1, timeout=timeout))
]:
	i: 0(try)
	o: 77()

nname: 0
n 0(None)[]:
	i: 
	o: 3(try), 45(except)

nname: 45
n 45(None)[except Full:
	log.warning('EVENT DROPPED')
]:
	i: 0()
	o: 

nname: 0
n 0(None)[try:
	event = event_map[key]
	event.post(dict(count=1, timeout=timeout))
]:
	i: 
	o: 45()

nname: 0
n 0(None)[try:
	event = event_map[key]
	event.post(dict(count=1, timeout=timeout))
except Full:
	log.warning('EVENT DROPPED')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb771cc6c>}
nname: 0
n 0(None)[from __future__ import absolute_import
__all__ = ['post_key']
from Queue import Full
from .eventlogger import EventPlayer
from pygui.eventmanager import event_map
from peewee.debug import GET_LOGGER
log = GET_LOGGER(__name__)
def post_key(key, timeout=None):
	try:
		event = event_map[key]
		event.post(dict(count=1, timeout=timeout))
	except Full:
		log.warning('EVENT DROPPED')

EP = EventPlayer(post_key)
EP.start()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb77152ac>}
from __future__ import absolute_import
__all__ = ['post_key']
from Queue import Full
from .eventlogger import EventPlayer
from pygui.eventmanager import event_map
from peewee.debug import GET_LOGGER
log = GET_LOGGER(__name__)
def post_key(key, timeout=None):
	try:
		event = event_map[key]
		event.post(dict(count=1, timeout=timeout))
	except Full:
		log.warning('EVENT DROPPED')

EP = EventPlayer(post_key)
EP.start()
