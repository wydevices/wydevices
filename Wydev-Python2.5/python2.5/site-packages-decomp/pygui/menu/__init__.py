# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 114
n 114(None)[return ret
]:
	i: 62(AL), 113()
	o: 

nname: 113
n 113(None)[]:
	i: 65(AF), 81()
	o: 114()

nname: 81
n 81(None)[for it in self._getitems_keywords.iterkeys():
louie_send(it, sender=self, value=self[it])
]:
	i: 65(for)
	o: 113()

nname: 65
n 65(None)[]:
	i: 62(loop)
	o: 81(for), 113(AF)

nname: 62
n 62(None)[]:
	i: 9(), 41(), 60(AE)
	o: 65(loop), 114(AL)

nname: 60
n 60(None)[]:
	i: 31(f)
	o: 62(AE)

nname: 41
n 41(None)[#, e
PRINT_EXCEPTION(e)
]:
	i: 31(t)
	o: 62()

nname: 31
n 31(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 0(except)
	o: 41(t), 60(f)

nname: 9
n 9(None)[ret = fn(self, *args, **kw)
]:
	i: 0(try)
	o: 62()

nname: 0
n 0(None)[ret = None
]:
	i: 
	o: 9(try), 31(except)

nname: 113
n 113(None)[return ret
]:
	i: 65()
	o: 

nname: 65
n 65(None)[for it in self._getitems_keywords.iterkeys():
	louie_send(it, sender=self, value=self[it])
]:
	i: 31(loop)
	o: 113()

nname: 31
n 31(None)[except Exception, e:
	PRINT_EXCEPTION(e)
]:
	i: 0()
	o: 65(loop)

nname: 0
n 0(None)[ret = None
try:
	ret = fn(self, *args, **kw)
]:
	i: 
	o: 31()

nname: 65
n 65(None)[for it in self._getitems_keywords.iterkeys():
	louie_send(it, sender=self, value=self[it])
return ret
]:
	i: 0(loop)
	o: 

nname: 0
n 0(None)[ret = None
try:
	ret = fn(self, *args, **kw)
except Exception, e:
	PRINT_EXCEPTION(e)
]:
	i: 
	o: 65(loop)

nname: 0
n 0(None)[ret = None
try:
	ret = fn(self, *args, **kw)
except Exception, e:
	PRINT_EXCEPTION(e)
for it in self._getitems_keywords.iterkeys():
	louie_send(it, sender=self, value=self[it])
return ret
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb766b8cc>}
nname: 0
n 0(None)[def _do_updates(self, *args, **args):
	ret = None
	try:
		ret = fn(self, *args, **kw)
	except Exception, e:
		PRINT_EXCEPTION(e)
	for it in self._getitems_keywords.iterkeys():
		louie_send(it, sender=self, value=self[it])
	return ret

return _do_updates
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb766cdac>}
nname: 114
n 114(None)[return ret
]:
	i: 0(AL), 113()
	o: 

nname: 113
n 113(None)[]:
	i: 21(AF), 88()
	o: 114()

nname: 88
n 88(None)[louie_send(it, sender=self, value=res)
]:
	i: 34(), 58(), 86(AE)
	o: 113()

nname: 86
n 86(None)[]:
	i: 48(f)
	o: 88(AE)

nname: 58
n 58(None)[#, e
log.warning('Unable to update widget specified for %s with %s', it, res)
]:
	i: 48(t)
	o: 88()

nname: 48
n 48(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 28(except)
	o: 58(t), 86(f)

nname: 34
n 34(None)[res = self[it]
]:
	i: 28(try)
	o: 88()

nname: 28
n 28(None)[for it in names:
]:
	i: 21(for)
	o: 34(try), 48(except)

nname: 21
n 21(None)[]:
	i: 0(loop)
	o: 28(for), 113(AF)

nname: 0
n 0(None)[ret = fn(self, *args, **kw)
]:
	i: 
	o: 21(loop), 114(AL)

nname: 114
n 114(None)[return ret
]:
	i: 0(AL), 21(AF), 48()
	o: 

nname: 48
n 48(None)[except Exception, e:
	log.warning('Unable to update widget specified for %s with %s', it, res)
louie_send(it, sender=self, value=res)
]:
	i: 28()
	o: 114()

nname: 28
n 28(None)[for it in names:
try:
	res = self[it]
]:
	i: 21(for)
	o: 48()

nname: 21
n 21(None)[]:
	i: 0(loop)
	o: 28(for), 114(AF)

nname: 0
n 0(None)[ret = fn(self, *args, **kw)
]:
	i: 
	o: 21(loop), 114(AL)

nname: 114
n 114(None)[return ret
]:
	i: 0(AL), 21(AF), 28()
	o: 

nname: 28
n 28(None)[for it in names:
try:
	res = self[it]
except Exception, e:
	log.warning('Unable to update widget specified for %s with %s', it, res)
louie_send(it, sender=self, value=res)
]:
	i: 21(for)
	o: 114()

nname: 21
n 21(None)[]:
	i: 0(loop)
	o: 28(for), 114(AF)

nname: 0
n 0(None)[ret = fn(self, *args, **kw)
]:
	i: 
	o: 21(loop), 114(AL)

nname: 28
n 28(None)[for it in names:
	try:
		res = self[it]
	except Exception, e:
		log.warning('Unable to update widget specified for %s with %s', it, res)
	louie_send(it, sender=self, value=res)
return ret
]:
	i: 0(for)
	o: 

nname: 0
n 0(None)[ret = fn(self, *args, **kw)
]:
	i: 
	o: 28(for)

nname: 0
n 0(None)[ret = fn(self, *args, **kw)
for it in names:
	try:
		res = self[it]
	except Exception, e:
		log.warning('Unable to update widget specified for %s with %s', it, res)
	louie_send(it, sender=self, value=res)
return ret
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb766bbcc>}
nname: 0
n 0(None)[return _do_updates(self, fn, *args, **kw)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb766b52c>}
nname: 0
n 0(None)[return (lambda self, *args, **args: _do_updates(self, fn, *args, **kw))
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb766b24c>}
nname: 0
n 0(None)[def _do_updates(self, fn, *args, **args):
	ret = fn(self, *args, **kw)
	for it in names:
		try:
			res = self[it]
		except Exception, e:
			log.warning('Unable to update widget specified for %s with %s', it, res)
		louie_send(it, sender=self, value=res)
	return ret

return (lambda fn: (lambda self, *args, **args: _do_updates(self, fn, *args, **kw)))
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb766cfcc>}
nname: 0
n 0(None)[from __future__ import absolute_import
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from peewee.messages import send as louie_send
from peewee.notifier import Task
from pygui.facilities.l10n import UnicodeDict
log = GET_LOGGER(__name__)
__all__ = ['gui_updater', 'selective_gui_updater']
def gui_updater(fn):
	def _do_updates(self, *args, **args):
		ret = None
		try:
			ret = fn(self, *args, **kw)
		except Exception, e:
			PRINT_EXCEPTION(e)
		for it in self._getitems_keywords.iterkeys():
			louie_send(it, sender=self, value=self[it])
		return ret

	return _do_updates

def selective_gui_updater(*names):
	def _do_updates(self, fn, *args, **args):
		ret = fn(self, *args, **kw)
		for it in names:
			try:
				res = self[it]
			except Exception, e:
				log.warning('Unable to update widget specified for %s with %s', it, res)
			louie_send(it, sender=self, value=res)
		return ret

	return (lambda fn: (lambda self, *args, **args: _do_updates(self, fn, *args, **kw)))

UNIVERSE_NAME_DICT = UnicodeDict({'video_image': 'Video/Photo', 'video_image_thumbnail': 'Video/Photo', 'video': 'Video', 'image': 'Image', 'image_thumbnail': 'Image', 'audio': 'Music', 'games': 'Games', 'radio': 'Radio', 'tv': 'TV', 'tv_navigator': 'TV', 'scheduled_navigator': 'TV', 'multiverse': 'Navigator', 'net_services': 'Internet Services', 'parameters': 'Parameters', 'parameters_setup': 'Parameters', 'notebook_setup_parameters': 'Parameters', 'channelscanner': 'Scan in progress...', 'markeraudio': 'Music', 'markervideo_image': 'Video/Photo', 'markervideo': 'Video', 'markerimage': 'Photo', 'markertv': 'TV', 'markertv_navigator': 'TV', 'markermultiverse': 'Navigator'})
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb765e34c>}
from __future__ import absolute_import
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from peewee.messages import send as louie_send
from peewee.notifier import Task
from pygui.facilities.l10n import UnicodeDict
log = GET_LOGGER(__name__)
__all__ = ['gui_updater', 'selective_gui_updater']
def gui_updater(fn):
	def _do_updates(self, *args, **args):
		ret = None
		try:
			ret = fn(self, *args, **kw)
		except Exception, e:
			PRINT_EXCEPTION(e)
		for it in self._getitems_keywords.iterkeys():
			louie_send(it, sender=self, value=self[it])
		return ret

	return _do_updates

def selective_gui_updater(*names):
	def _do_updates(self, fn, *args, **args):
		ret = fn(self, *args, **kw)
		for it in names:
			try:
				res = self[it]
			except Exception, e:
				log.warning('Unable to update widget specified for %s with %s', it, res)
			louie_send(it, sender=self, value=res)
		return ret

	return (lambda fn: (lambda self, *args, **args: _do_updates(self, fn, *args, **kw)))

UNIVERSE_NAME_DICT = UnicodeDict({'video_image': 'Video/Photo', 'video_image_thumbnail': 'Video/Photo', 'video': 'Video', 'image': 'Image', 'image_thumbnail': 'Image', 'audio': 'Music', 'games': 'Games', 'radio': 'Radio', 'tv': 'TV', 'tv_navigator': 'TV', 'scheduled_navigator': 'TV', 'multiverse': 'Navigator', 'net_services': 'Internet Services', 'parameters': 'Parameters', 'parameters_setup': 'Parameters', 'notebook_setup_parameters': 'Parameters', 'channelscanner': 'Scan in progress...', 'markeraudio': 'Music', 'markervideo_image': 'Video/Photo', 'markervideo': 'Video', 'markerimage': 'Photo', 'markertv': 'TV', 'markertv_navigator': 'TV', 'markermultiverse': 'Navigator'})
