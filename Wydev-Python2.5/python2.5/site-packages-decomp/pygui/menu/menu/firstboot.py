# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 0
n 0(None)[return [ActionItem(name='', type_='setupitem', action=self.menu._set_options_list, args=(None,))]
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760aaac>}
nname: 6
n 6(None)[def browse(self):
	return [ActionItem(name='', type_='setupitem', action=self.menu._set_options_list, args=(None,))]

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb760a22c>}
nname: 0
n 0(None)[return self.get_item_list('back_list')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7623a0c>}
nname: 0
n 0(None)[return self.get_item_list('next_list')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7623b0c>}
nname: 0
n 0(None)[return _('volume +')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76237ac>}
nname: 0
n 0(None)[return _('volume -')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76239ac>}
nname: 0
n 0(None)[return _('power')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7623bec>}
nname: 0
n 0(None)[return _('option')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7623b0c>}
nname: 0
n 0(None)[return _('play / pause')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb762370c>}
nname: 0
n 0(None)[return _('record')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76238cc>}
nname: 0
n 0(None)[return _('mute')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7623aac>}
nname: 0
n 0(None)[return _('home')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7623a0c>}
nname: 0
n 0(None)[return _('selection')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7623cec>}
nname: 0
n 0(None)[return _('stop')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7623e6c>}
nname: 0
n 0(None)[return _('list')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76232ec>}
nname: 0
n 0(None)[return _('info')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76239ac>}
nname: 0
n 0(None)[return _('Enter your secret code for parental mode activation')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76237ac>}
nname: 0
n 0(None)[return self.get_item_list(list_name)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76203cc>}
nname: 187
n 187(None)[louie_connect(receiver=self._scan_callback, signal='tv_scan_finished', sender='tv')
def self._getitems_keywords['back_list']():
	return self.get_item_list('back_list')

def self._getitems_keywords['next_list']():
	return self.get_item_list('next_list')

def self._getitems_keywords['volume+']():
	return _('volume +')

def self._getitems_keywords['volume-']():
	return _('volume -')

def self._getitems_keywords['power']():
	return _('power')

def self._getitems_keywords['option']():
	return _('option')

def self._getitems_keywords['play_pause']():
	return _('play / pause')

def self._getitems_keywords['record']():
	return _('record')

def self._getitems_keywords['mute']():
	return _('mute')

def self._getitems_keywords['home']():
	return _('home')

def self._getitems_keywords['selection']():
	return _('selection')

def self._getitems_keywords['stop']():
	return _('stop')

def self._getitems_keywords['list']():
	return _('list')

def self._getitems_keywords['info']():
	return _('info')

def self._getitems_keywords['secret_code_explain']():
	return _('Enter your secret code for parental mode activation')

self._changed_date = False
self._stack_history = [None] * 11
self._stack_history[self._history_rank] = it
self.set_items([], 'back_list')
self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
self._set_options()
return None
]:
	i: 0(AL), 186()
	o: 

nname: 186
n 186(None)[]:
	i: 145(AF), 155()
	o: 187()

nname: 155
n 155(None)[for c in self.available_choices:
def self._getitems_keywords[c](list_name=c):
	return self.get_item_list(list_name)

]:
	i: 145(for)
	o: 186()

nname: 145
n 145(None)[]:
	i: 0(loop)
	o: 155(for), 186(AF)

nname: 0
n 0(None)[self.main_items = self._gen_items()
self.eventhandler = FirstBootMenuEventHandler(self)
self._current_rank, it = self.main_items.next()
self._history_rank = 0
Menu.__init__(self, name='First Boot', choices=it, type='firstboot', **kw)
self.available_choices = ['options_text', 'options0_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list', 'date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'aspect_ratio_list']
]:
	i: 
	o: 145(loop), 187(AL)

nname: 187
n 187(None)[louie_connect(receiver=self._scan_callback, signal='tv_scan_finished', sender='tv')
def self._getitems_keywords['back_list']():
	return self.get_item_list('back_list')

def self._getitems_keywords['next_list']():
	return self.get_item_list('next_list')

def self._getitems_keywords['volume+']():
	return _('volume +')

def self._getitems_keywords['volume-']():
	return _('volume -')

def self._getitems_keywords['power']():
	return _('power')

def self._getitems_keywords['option']():
	return _('option')

def self._getitems_keywords['play_pause']():
	return _('play / pause')

def self._getitems_keywords['record']():
	return _('record')

def self._getitems_keywords['mute']():
	return _('mute')

def self._getitems_keywords['home']():
	return _('home')

def self._getitems_keywords['selection']():
	return _('selection')

def self._getitems_keywords['stop']():
	return _('stop')

def self._getitems_keywords['list']():
	return _('list')

def self._getitems_keywords['info']():
	return _('info')

def self._getitems_keywords['secret_code_explain']():
	return _('Enter your secret code for parental mode activation')

self._changed_date = False
self._stack_history = [None] * 11
self._stack_history[self._history_rank] = it
self.set_items([], 'back_list')
self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
self._set_options()
return None
]:
	i: 155()
	o: 

nname: 155
n 155(None)[for c in self.available_choices:
	def self._getitems_keywords[c](list_name=c):
		return self.get_item_list(list_name)

]:
	i: 0(for)
	o: 187()

nname: 0
n 0(None)[self.main_items = self._gen_items()
self.eventhandler = FirstBootMenuEventHandler(self)
self._current_rank, it = self.main_items.next()
self._history_rank = 0
Menu.__init__(self, name='First Boot', choices=it, type='firstboot', **kw)
self.available_choices = ['options_text', 'options0_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list', 'date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'aspect_ratio_list']
]:
	i: 
	o: 155(for)

nname: 187
n 187(None)[louie_connect(receiver=self._scan_callback, signal='tv_scan_finished', sender='tv')
def self._getitems_keywords['back_list']():
	return self.get_item_list('back_list')

def self._getitems_keywords['next_list']():
	return self.get_item_list('next_list')

def self._getitems_keywords['volume+']():
	return _('volume +')

def self._getitems_keywords['volume-']():
	return _('volume -')

def self._getitems_keywords['power']():
	return _('power')

def self._getitems_keywords['option']():
	return _('option')

def self._getitems_keywords['play_pause']():
	return _('play / pause')

def self._getitems_keywords['record']():
	return _('record')

def self._getitems_keywords['mute']():
	return _('mute')

def self._getitems_keywords['home']():
	return _('home')

def self._getitems_keywords['selection']():
	return _('selection')

def self._getitems_keywords['stop']():
	return _('stop')

def self._getitems_keywords['list']():
	return _('list')

def self._getitems_keywords['info']():
	return _('info')

def self._getitems_keywords['secret_code_explain']():
	return _('Enter your secret code for parental mode activation')

self._changed_date = False
self._stack_history = [None] * 11
self._stack_history[self._history_rank] = it
self.set_items([], 'back_list')
self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
self._set_options()
return None
]:
	i: 0()
	o: 

nname: 0
n 0(None)[self.main_items = self._gen_items()
self.eventhandler = FirstBootMenuEventHandler(self)
self._current_rank, it = self.main_items.next()
self._history_rank = 0
Menu.__init__(self, name='First Boot', choices=it, type='firstboot', **kw)
self.available_choices = ['options_text', 'options0_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list', 'date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'aspect_ratio_list']
for c in self.available_choices:
	def self._getitems_keywords[c](list_name=c):
		return self.get_item_list(list_name)

]:
	i: 
	o: 187()

nname: 0
n 0(None)[self.main_items = self._gen_items()
self.eventhandler = FirstBootMenuEventHandler(self)
self._current_rank, it = self.main_items.next()
self._history_rank = 0
Menu.__init__(self, name='First Boot', choices=it, type='firstboot', **kw)
self.available_choices = ['options_text', 'options0_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list', 'date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'aspect_ratio_list']
for c in self.available_choices:
	def self._getitems_keywords[c](list_name=c):
		return self.get_item_list(list_name)

louie_connect(receiver=self._scan_callback, signal='tv_scan_finished', sender='tv')
def self._getitems_keywords['back_list']():
	return self.get_item_list('back_list')

def self._getitems_keywords['next_list']():
	return self.get_item_list('next_list')

def self._getitems_keywords['volume+']():
	return _('volume +')

def self._getitems_keywords['volume-']():
	return _('volume -')

def self._getitems_keywords['power']():
	return _('power')

def self._getitems_keywords['option']():
	return _('option')

def self._getitems_keywords['play_pause']():
	return _('play / pause')

def self._getitems_keywords['record']():
	return _('record')

def self._getitems_keywords['mute']():
	return _('mute')

def self._getitems_keywords['home']():
	return _('home')

def self._getitems_keywords['selection']():
	return _('selection')

def self._getitems_keywords['stop']():
	return _('stop')

def self._getitems_keywords['list']():
	return _('list')

def self._getitems_keywords['info']():
	return _('info')

def self._getitems_keywords['secret_code_explain']():
	return _('Enter your secret code for parental mode activation')

self._changed_date = False
self._stack_history = [None] * 11
self._stack_history[self._history_rank] = it
self.set_items([], 'back_list')
self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
self._set_options()
return None
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7614fcc>}
nname: 715
n 715(None)[]:
	i: 669(), 714()
	o: 

nname: 714
n 714(None)[]:
	i: 0(f)
	o: 715()

nname: 669
n 669(None)[yield (10, [FirstbootTNTScanSetupItem(name=_('Do you want to launch a scan now?'), menu=self, type_='setupitem')])
]:
	i: 0(t)
	o: 715()

nname: 0
n 0('tv' in config.plugins)[yield (0, [FirstBootLanguageUserConfigSetupItem(name='Select your language', menu=self, domain='base', key='language', choices_list=config.HMI_BASE['osd_languages'])])
self.set_items([Item(name=_('Back'), type_='setupitem', display_type='backitem')], 'back_list')
self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
yield (1, [ProductTourDummyItem(name=_('Welcome !'), type_='setupitem', menu=self)])
louie_send('on_presentation_blur', sender=self)
yield (2, [CountryUserConfigSetupItem(name='Select your country', menu=self, domain='base', key='country', choices_list=config.HMI_BASE['country'])])
yield (3, [TimeZoneUserConfigSetupItem(name='Select your time zone', choices_list=TimeManager().get_timezones(), domain='base', key='timezone', type_='setup', menu=self)])
yield (4, [DateUserConfigSetupItem(name='Enter date and time', menu=self, domain='', key='')])
yield (5, [AspectRatioParametersSetupItem(name='Select TV physical aspect ratio', menu=self, domain='video', key='aspect_ratio', choices_list=config.HMI_VIDEO['aspect_ratio'])])
louie_send('on_aspect_ratio_blur', sender=self)
yield (6, [ParentalControlConfigSetupItem(reload_center=False, name='Parental control', menu=self, domain='security', key='parental_control', choices_list=(True, False), type_='setupitem')])
yield (7, [ParentalRatingConfigSetupItem(name='Parental rating', menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)])
yield (8, [SecretCodeUserConfigSetupItem(name='Select a secret code', menu=self, domain='security', key='secretcode')])
self._on_question = False
yield (9, [QuestionAnswerParameters(name='', type_='setupitem', check=False, end_action=self.select, end_action_args=(1, 'main_list'))])
]:
	i: 
	o: 669(t), 714(f)

nname: 0
n 0(None)[yield (0, [FirstBootLanguageUserConfigSetupItem(name='Select your language', menu=self, domain='base', key='language', choices_list=config.HMI_BASE['osd_languages'])])
self.set_items([Item(name=_('Back'), type_='setupitem', display_type='backitem')], 'back_list')
self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
yield (1, [ProductTourDummyItem(name=_('Welcome !'), type_='setupitem', menu=self)])
louie_send('on_presentation_blur', sender=self)
yield (2, [CountryUserConfigSetupItem(name='Select your country', menu=self, domain='base', key='country', choices_list=config.HMI_BASE['country'])])
yield (3, [TimeZoneUserConfigSetupItem(name='Select your time zone', choices_list=TimeManager().get_timezones(), domain='base', key='timezone', type_='setup', menu=self)])
yield (4, [DateUserConfigSetupItem(name='Enter date and time', menu=self, domain='', key='')])
yield (5, [AspectRatioParametersSetupItem(name='Select TV physical aspect ratio', menu=self, domain='video', key='aspect_ratio', choices_list=config.HMI_VIDEO['aspect_ratio'])])
louie_send('on_aspect_ratio_blur', sender=self)
yield (6, [ParentalControlConfigSetupItem(reload_center=False, name='Parental control', menu=self, domain='security', key='parental_control', choices_list=(True, False), type_='setupitem')])
yield (7, [ParentalRatingConfigSetupItem(name='Parental rating', menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)])
yield (8, [SecretCodeUserConfigSetupItem(name='Select a secret code', menu=self, domain='security', key='secretcode')])
self._on_question = False
yield (9, [QuestionAnswerParameters(name='', type_='setupitem', check=False, end_action=self.select, end_action_args=(1, 'main_list'))])
if 'tv' in config.plugins:
	yield (10, [FirstbootTNTScanSetupItem(name=_('Do you want to launch a scan now?'), menu=self, type_='setupitem')])
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7614a0c>}
nname: 0
n 0(None)[config.user_config['base']['firstboot'] = False
config.user_config.save()
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76126ac>}
nname: 26
n 26(None)[return False
]:
	i: 15(), 22()
	o: 

nname: 22
n 22(None)[]:
	i: 0(f)
	o: 26()

nname: 15
n 15(None)[]:
	i: 0(t)
	o: 26()

nname: 0
n 0(self._active_list in ('date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list'))[]:
	i: 
	o: 15(t), 22(f)

nname: 0
n 0(None)[if self._active_list in ('date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list'):
	pass
return False
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb761288c>}
nname: 1441
n 1441(None)[return None
]:
	i: 594(), 715(), 918(), 1065(AL), 1137(), 1160(), 1316(AL), 1397(), 1420(), 1440()
	o: 

nname: 1440
n 1440(None)[]:
	i: 1401(f)
	o: 1441()

nname: 1420
n 1420(None)[louie_send('on_presentation_blur', sender=self)
]:
	i: 1401(t)
	o: 1441()

nname: 1401
n 1401(isinstance(item_list.selected, CountryUserConfigSetupItem))[]:
	i: 1298(f)
	o: 1420(t), 1440(f)

nname: 1397
n 1397(None)[]:
	i: 1358(AF), 1365()
	o: 1441()

nname: 1365
n 1365(None)[for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
louie_send(sig, sender=self, value=self[sig])
]:
	i: 1358(for)
	o: 1397()

nname: 1358
n 1358(None)[]:
	i: 1316(loop)
	o: 1365(for), 1397(AF)

nname: 1316
n 1316(None)[self.get_item_list(ac[1]).selected = None
louie_send('on_presentation_focus', sender=self)
]:
	i: 1298(t)
	o: 1358(loop), 1441(AL)

nname: 1298
n 1298(isinstance(item_list.selected, ProductTourDummyItem))[]:
	i: 1271(), 1297()
	o: 1316(t), 1401(f)

nname: 1297
n 1297(None)[]:
	i: 1223(t)
	o: 1298()

nname: 1271
n 1271(None)[self.get_item_list(ac[1]).cyclic = True
]:
	i: 1223(f)
	o: 1298()

nname: 1223
n 1223(isinstance(item_list.selected, (CountryUserConfigSetupItem, OSDLanguageUserConfigSetupItem)))[self.set_items(browsed, list_name=ac[1])
]:
	i: 1141(f)
	o: 1271(f), 1297(t)

nname: 1160
n 1160(None)[self.set_items(browsed, 'aspect_ratio_list')
self.active_list = 'aspect_ratio_list'
self.get_item_list('aspect_ratio_list').cyclic = None
louie_send('on_aspect_ratio_focus', sender=self)
]:
	i: 1141(t)
	o: 1441()

nname: 1141
n 1141(isinstance(item_list.selected, AspectRatioParametersSetupItem))[]:
	i: 1045(f)
	o: 1160(t), 1223(f)

nname: 1137
n 1137(None)[]:
	i: 1069(AF), 1085()
	o: 1441()

nname: 1085
n 1085(None)[for list_name, browseable in zip(ac, browsed):
self.set_items(browseable.browse(), list_name)
self.get_item_list(list_name).cyclic = True
]:
	i: 1069(for)
	o: 1137()

nname: 1069
n 1069(None)[]:
	i: 1065(loop)
	o: 1085(for), 1137(AF)

nname: 1065
n 1065(None)[]:
	i: 1045(t)
	o: 1069(loop), 1441(AL)

nname: 1045
n 1045(isinstance(browsed[0], GenericContainer))[]:
	i: 769(f)
	o: 1065(t), 1141(f)

nname: 918
n 918(None)[config.user_config['base']['dateformat'] = int(country_dict[config.user_config['base']['country']]['date_format'])
config.user_config['base']['timeformat'] = int(country_dict[config.user_config['base']['country']]['time_format'])
from pygui.gui.widget.clock import Clock
Clock.date_format = get_date_format()
Clock.time_format = get_time_format()
]:
	i: 788(AL), 917()
	o: 1441()

nname: 917
n 917(None)[]:
	i: 856(AF), 913()
	o: 918()

nname: 913
n 913(None)[]:
	i: 871(f), 889()
	o: 917()

nname: 889
n 889(None)[self.select(it, ac[1])
continue
]:
	i: 871(t)
	o: 913()

nname: 871
n 871(it.name == pre_sel_timezone)[for it in self[ac[1]]:
]:
	i: 856(for)
	o: 889(t), 913(f)

nname: 856
n 856(None)[]:
	i: 788(loop)
	o: 871(for), 917(AF)

nname: 788
n 788(None)[from pygui.facilities.codemapping import country_dict
pre_sel_timezone = country_dict[config.user_config['base']['country']]['raw_timezone']
self.set_items(browsed, list_name=ac[1])
]:
	i: 769(t)
	o: 856(loop), 918(AL)

nname: 769
n 769(isinstance(item_list.selected, TimeZoneUserConfigSetupItem))[]:
	i: 619(f)
	o: 788(t), 1045(f)

nname: 715
n 715(None)[self.active_list = 'options1_list'
louie_send('secret_code_explain_on', sender=self)
louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
]:
	i: 638(AL), 714()
	o: 1441()

nname: 714
n 714(None)[]:
	i: 642(AF), 662()
	o: 715()

nname: 662
n 662(None)[for list_name, browseable in zip(ac[2:], browsed):
self.set_items(browseable.browse(), list_name)
self.get_item_list(list_name).cyclic = True
]:
	i: 642(for)
	o: 714()

nname: 642
n 642(None)[]:
	i: 638(loop)
	o: 662(for), 714(AF)

nname: 638
n 638(None)[]:
	i: 619(t)
	o: 642(loop), 715(AL)

nname: 619
n 619(isinstance(item_list.selected, SecretCodeUserConfigSetupItem))[]:
	i: 256(f)
	o: 638(t), 769(f)

nname: 594
n 594(None)[]:
	i: 447(AL), 593()
	o: 1441()

nname: 593
n 593(None)[]:
	i: 456(AF), 590()
	o: 594()

nname: 590
n 590(None)[]:
	i: 475(AL), 589()
	o: 593()

nname: 589
n 589(None)[]:
	i: 530(AF), 585()
	o: 590()

nname: 585
n 585(None)[]:
	i: 541(f), 565()
	o: 589()

nname: 565
n 565(None)[self.select(it, list_name)
continue
]:
	i: 541(t)
	o: 585()

nname: 541
n 541(it.name == str(val))[for it in self[list_name]:
]:
	i: 530(for)
	o: 565(t), 585(f)

nname: 530
n 530(None)[]:
	i: 475(loop)
	o: 541(for), 589(AF)

nname: 475
n 475(None)[self.set_items(browseable.browse(), list_name)
]:
	i: 456(for)
	o: 530(loop), 590(AL)

nname: 456
n 456(None)[]:
	i: 447(loop)
	o: 475(for), 593(AF)

nname: 447
n 447(None)[del _[1]
for date_choices in ac:
]:
	i: 298(AF), 443()
	o: 456(loop), 594(AL)

nname: 443
n 443(None)[]:
	i: 414(f), 432()
	o: 447()

nname: 432
n 432(None)[continue
]:
	i: 414(t)
	o: 443()

nname: 414
n 414(list.startswith('date'))[for list in ac:
]:
	i: 298(for)
	o: 432(t), 443(f)

nname: 298
n 298(None)[from pygui.facilities.codemapping import month_dict
import time
cur = time.localtime()[:-4]
d = ('%02d' % cur[2], month_dict[cur[1]], cur[0], '%02d' % cur[3], '%02d' % cur[4])
]:
	i: 256(t)
	o: 414(for), 447(AF)

nname: 256
n 256(isinstance(item_list.selected, DateUserConfigSetupItem))[browsed = item_list.selected.browse()
rank = item_list.selected_pos
]:
	i: 248(), 255()
	o: 298(t), 619(f)

nname: 255
n 255(None)[]:
	i: 45(f)
	o: 256()

nname: 248
n 248(None)[return None
]:
	i: 101(), 201()
	o: 256()

nname: 201
n 201(None)[_[1], self.active_list, self._changed_date, list_name, browseable, val, self.get_item_list(list_name).cyclic, self._on_question = [], date_choices[0], True, zip(date_choices, browsed, d), zip(date_choices, browsed, d), zip(date_choices, browsed, d), True, False
self._history_rank += 1
self.select(1, 'main_list', ignore_gen=True)
]:
	i: 91(t)
	o: 248()

nname: 101
n 101(None)[louie_send('secret_code_explain_off', sender=self)
louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
self.set_items([], list_name=ac[1])
item_list.selected.execute()
self.active_list = 'main_list'
self._on_question = True
]:
	i: 91(f)
	o: 248()

nname: 91
n 91(self._on_question)[]:
	i: 45(t)
	o: 101(f), 201(t)

nname: 45
n 45(isinstance(item_list.selected, QuestionAnswerParameters))[self.active_list = ac[1]
item_list = self.get_item_list('main_list')
]:
	i: 0(AL), 44()
	o: 91(t), 255(f)

nname: 44
n 44(None)[]:
	i: 12(AF), 19()
	o: 45()

nname: 19
n 19(None)[for c in ac:
self.set_items([], c, 0)
]:
	i: 12(for)
	o: 44()

nname: 12
n 12(None)[]:
	i: 0(loop)
	o: 19(for), 44(AF)

nname: 0
n 0(None)[ac = self.available_choices
]:
	i: 
	o: 12(loop), 45(AL)

nname: 1441
n 1441(None)[return None
]:
	i: 715(), 918(), 1085(), 1160(), 1365(), 1401(), 447(AL), 456(AF), 475(AL), 530(AF), 541()
	o: 

nname: 1401
n 1401(None)[if isinstance(item_list.selected, CountryUserConfigSetupItem):
	louie_send('on_presentation_blur', sender=self)
]:
	i: 1223(f)
	o: 1441()

nname: 1365
n 1365(None)[for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
	louie_send(sig, sender=self, value=self[sig])
]:
	i: 1316(for)
	o: 1441()

nname: 1316
n 1316(None)[self.get_item_list(ac[1]).selected = None
louie_send('on_presentation_focus', sender=self)
]:
	i: 1223(t)
	o: 1365(for)

nname: 1223
n 1223(isinstance(item_list.selected, ProductTourDummyItem))[self.set_items(browsed, list_name=ac[1])
if not isinstance(item_list.selected, (CountryUserConfigSetupItem, OSDLanguageUserConfigSetupItem)):
	self.get_item_list(ac[1]).cyclic = True
]:
	i: 1141(f)
	o: 1316(t), 1401(f)

nname: 1160
n 1160(None)[self.set_items(browsed, 'aspect_ratio_list')
self.active_list = 'aspect_ratio_list'
self.get_item_list('aspect_ratio_list').cyclic = None
louie_send('on_aspect_ratio_focus', sender=self)
]:
	i: 1141(t)
	o: 1441()

nname: 1141
n 1141(isinstance(item_list.selected, AspectRatioParametersSetupItem))[]:
	i: 1045(f)
	o: 1160(t), 1223(f)

nname: 1085
n 1085(None)[for list_name, browseable in zip(ac, browsed):
	self.set_items(browseable.browse(), list_name)
	self.get_item_list(list_name).cyclic = True
]:
	i: 1065(for)
	o: 1441()

nname: 1065
n 1065(None)[]:
	i: 1045(t)
	o: 1085(for)

nname: 1045
n 1045(isinstance(browsed[0], GenericContainer))[]:
	i: 769(f)
	o: 1065(t), 1141(f)

nname: 918
n 918(None)[config.user_config['base']['dateformat'] = int(country_dict[config.user_config['base']['country']]['date_format'])
config.user_config['base']['timeformat'] = int(country_dict[config.user_config['base']['country']]['time_format'])
from pygui.gui.widget.clock import Clock
Clock.date_format = get_date_format()
Clock.time_format = get_time_format()
]:
	i: 788(AL), 856(AF), 871()
	o: 1441()

nname: 871
n 871(None)[for it in self[ac[1]]:
if it.name == pre_sel_timezone:
	self.select(it, ac[1])
	continue
]:
	i: 856(for)
	o: 918()

nname: 856
n 856(None)[]:
	i: 788(loop)
	o: 871(for), 918(AF)

nname: 788
n 788(None)[from pygui.facilities.codemapping import country_dict
pre_sel_timezone = country_dict[config.user_config['base']['country']]['raw_timezone']
self.set_items(browsed, list_name=ac[1])
]:
	i: 769(t)
	o: 856(loop), 918(AL)

nname: 769
n 769(isinstance(item_list.selected, TimeZoneUserConfigSetupItem))[]:
	i: 619(f)
	o: 788(t), 1045(f)

nname: 715
n 715(None)[self.active_list = 'options1_list'
louie_send('secret_code_explain_on', sender=self)
louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
]:
	i: 662()
	o: 1441()

nname: 662
n 662(None)[for list_name, browseable in zip(ac[2:], browsed):
	self.set_items(browseable.browse(), list_name)
	self.get_item_list(list_name).cyclic = True
]:
	i: 638(for)
	o: 715()

nname: 638
n 638(None)[]:
	i: 619(t)
	o: 662(for)

nname: 619
n 619(isinstance(item_list.selected, SecretCodeUserConfigSetupItem))[]:
	i: 256(f)
	o: 638(t), 769(f)

nname: 541
n 541(None)[for it in self[list_name]:
if it.name == str(val):
	self.select(it, list_name)
	continue
]:
	i: 530(for)
	o: 1441()

nname: 530
n 530(None)[]:
	i: 475(loop)
	o: 541(for), 1441(AF)

nname: 475
n 475(None)[self.set_items(browseable.browse(), list_name)
]:
	i: 456(for)
	o: 530(loop), 1441(AL)

nname: 456
n 456(None)[]:
	i: 447(loop)
	o: 475(for), 1441(AF)

nname: 447
n 447(None)[del _[1]
for date_choices in ac:
]:
	i: 298(AF), 414()
	o: 456(loop), 1441(AL)

nname: 414
n 414(None)[for list in ac:
if list.startswith('date'):
	continue
]:
	i: 298(for)
	o: 447()

nname: 298
n 298(None)[from pygui.facilities.codemapping import month_dict
import time
cur = time.localtime()[:-4]
d = ('%02d' % cur[2], month_dict[cur[1]], cur[0], '%02d' % cur[3], '%02d' % cur[4])
]:
	i: 256(t)
	o: 414(for), 447(AF)

nname: 256
n 256(isinstance(item_list.selected, DateUserConfigSetupItem))[browsed = item_list.selected.browse()
rank = item_list.selected_pos
]:
	i: 91(), 45(f)
	o: 298(t), 619(f)

nname: 91
n 91(None)[if not self._on_question:
	louie_send('secret_code_explain_off', sender=self)
	louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
	self.set_items([], list_name=ac[1])
	item_list.selected.execute()
	self.active_list = 'main_list'
	self._on_question = True
else:
	_[1], self.active_list, self._changed_date, list_name, browseable, val, self.get_item_list(list_name).cyclic, self._on_question = [], date_choices[0], True, zip(date_choices, browsed, d), zip(date_choices, browsed, d), zip(date_choices, browsed, d), True, False
	self._history_rank += 1
	self.select(1, 'main_list', ignore_gen=True)
return None
]:
	i: 45(t)
	o: 256()

nname: 45
n 45(isinstance(item_list.selected, QuestionAnswerParameters))[self.active_list = ac[1]
item_list = self.get_item_list('main_list')
]:
	i: 19()
	o: 91(t), 256(f)

nname: 19
n 19(None)[for c in ac:
	self.set_items([], c, 0)
]:
	i: 0(for)
	o: 45()

nname: 0
n 0(None)[ac = self.available_choices
]:
	i: 
	o: 19(for)

nname: 1441
n 1441(None)[return None
]:
	i: 715(), 871(), 1065(), 1160(), 1316(), 1401(), 447(AL), 456(AF), 541()
	o: 

nname: 1401
n 1401(None)[if isinstance(item_list.selected, CountryUserConfigSetupItem):
	louie_send('on_presentation_blur', sender=self)
]:
	i: 1223(f)
	o: 1441()

nname: 1316
n 1316(None)[self.get_item_list(ac[1]).selected = None
louie_send('on_presentation_focus', sender=self)
for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
	louie_send(sig, sender=self, value=self[sig])
]:
	i: 1223(t)
	o: 1441()

nname: 1223
n 1223(isinstance(item_list.selected, ProductTourDummyItem))[self.set_items(browsed, list_name=ac[1])
if not isinstance(item_list.selected, (CountryUserConfigSetupItem, OSDLanguageUserConfigSetupItem)):
	self.get_item_list(ac[1]).cyclic = True
]:
	i: 1141(f)
	o: 1316(t), 1401(f)

nname: 1160
n 1160(None)[self.set_items(browsed, 'aspect_ratio_list')
self.active_list = 'aspect_ratio_list'
self.get_item_list('aspect_ratio_list').cyclic = None
louie_send('on_aspect_ratio_focus', sender=self)
]:
	i: 1141(t)
	o: 1441()

nname: 1141
n 1141(isinstance(item_list.selected, AspectRatioParametersSetupItem))[]:
	i: 1045(f)
	o: 1160(t), 1223(f)

nname: 1065
n 1065(None)[for list_name, browseable in zip(ac, browsed):
	self.set_items(browseable.browse(), list_name)
	self.get_item_list(list_name).cyclic = True
]:
	i: 1045(t)
	o: 1441()

nname: 1045
n 1045(isinstance(browsed[0], GenericContainer))[]:
	i: 769(f)
	o: 1065(t), 1141(f)

nname: 871
n 871(None)[for it in self[ac[1]]:
	if it.name == pre_sel_timezone:
		self.select(it, ac[1])
		continue
config.user_config['base']['dateformat'] = int(country_dict[config.user_config['base']['country']]['date_format'])
config.user_config['base']['timeformat'] = int(country_dict[config.user_config['base']['country']]['time_format'])
from pygui.gui.widget.clock import Clock
Clock.date_format = get_date_format()
Clock.time_format = get_time_format()
]:
	i: 788(for)
	o: 1441()

nname: 788
n 788(None)[from pygui.facilities.codemapping import country_dict
pre_sel_timezone = country_dict[config.user_config['base']['country']]['raw_timezone']
self.set_items(browsed, list_name=ac[1])
]:
	i: 769(t)
	o: 871(for)

nname: 769
n 769(isinstance(item_list.selected, TimeZoneUserConfigSetupItem))[]:
	i: 619(f)
	o: 788(t), 1045(f)

nname: 715
n 715(None)[self.active_list = 'options1_list'
louie_send('secret_code_explain_on', sender=self)
louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
]:
	i: 638()
	o: 1441()

nname: 638
n 638(None)[for list_name, browseable in zip(ac[2:], browsed):
	self.set_items(browseable.browse(), list_name)
	self.get_item_list(list_name).cyclic = True
]:
	i: 619(t)
	o: 715()

nname: 619
n 619(isinstance(item_list.selected, SecretCodeUserConfigSetupItem))[]:
	i: 45(f)
	o: 638(t), 769(f)

nname: 541
n 541(None)[for it in self[list_name]:
	if it.name == str(val):
		self.select(it, list_name)
		continue
]:
	i: 475(for)
	o: 1441()

nname: 475
n 475(None)[self.set_items(browseable.browse(), list_name)
]:
	i: 456(for)
	o: 541(for)

nname: 456
n 456(None)[]:
	i: 447(loop)
	o: 475(for), 1441(AF)

nname: 447
n 447(None)[del _[1]
for date_choices in ac:
]:
	i: 298(AF), 414()
	o: 456(loop), 1441(AL)

nname: 414
n 414(None)[for list in ac:
if list.startswith('date'):
	continue
]:
	i: 298(for)
	o: 447()

nname: 298
n 298(None)[from pygui.facilities.codemapping import month_dict
import time
cur = time.localtime()[:-4]
d = ('%02d' % cur[2], month_dict[cur[1]], cur[0], '%02d' % cur[3], '%02d' % cur[4])
]:
	i: 45(t)
	o: 414(for), 447(AF)

nname: 45
n 45(isinstance(item_list.selected, DateUserConfigSetupItem))[self.active_list = ac[1]
item_list = self.get_item_list('main_list')
if isinstance(item_list.selected, QuestionAnswerParameters):
	if not self._on_question:
		louie_send('secret_code_explain_off', sender=self)
		louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
		self.set_items([], list_name=ac[1])
		item_list.selected.execute()
		self.active_list = 'main_list'
		self._on_question = True
	else:
		_[1], self.active_list, self._changed_date, list_name, browseable, val, self.get_item_list(list_name).cyclic, self._on_question = [], date_choices[0], True, zip(date_choices, browsed, d), zip(date_choices, browsed, d), zip(date_choices, browsed, d), True, False
		self._history_rank += 1
		self.select(1, 'main_list', ignore_gen=True)
	return None
browsed = item_list.selected.browse()
rank = item_list.selected_pos
]:
	i: 0()
	o: 298(t), 619(f)

nname: 0
n 0(None)[ac = self.available_choices
for c in ac:
	self.set_items([], c, 0)
]:
	i: 
	o: 45()

nname: 1441
n 1441(None)[return None
]:
	i: 638(), 788(), 1045(), 447(AL), 456(AF), 475()
	o: 

nname: 1045
n 1045(None)[if isinstance(browsed[0], GenericContainer):
	for list_name, browseable in zip(ac, browsed):
		self.set_items(browseable.browse(), list_name)
		self.get_item_list(list_name).cyclic = True
else:
	if isinstance(item_list.selected, AspectRatioParametersSetupItem):
		self.set_items(browsed, 'aspect_ratio_list')
		self.active_list = 'aspect_ratio_list'
		self.get_item_list('aspect_ratio_list').cyclic = None
		louie_send('on_aspect_ratio_focus', sender=self)
	else:
		self.set_items(browsed, list_name=ac[1])
		if not isinstance(item_list.selected, (CountryUserConfigSetupItem, OSDLanguageUserConfigSetupItem)):
			self.get_item_list(ac[1]).cyclic = True
		if isinstance(item_list.selected, ProductTourDummyItem):
			self.get_item_list(ac[1]).selected = None
			louie_send('on_presentation_focus', sender=self)
			for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
				louie_send(sig, sender=self, value=self[sig])
		else:
			if isinstance(item_list.selected, CountryUserConfigSetupItem):
				louie_send('on_presentation_blur', sender=self)
]:
	i: 769(f)
	o: 1441()

nname: 788
n 788(None)[from pygui.facilities.codemapping import country_dict
pre_sel_timezone = country_dict[config.user_config['base']['country']]['raw_timezone']
self.set_items(browsed, list_name=ac[1])
for it in self[ac[1]]:
	if it.name == pre_sel_timezone:
		self.select(it, ac[1])
		continue
config.user_config['base']['dateformat'] = int(country_dict[config.user_config['base']['country']]['date_format'])
config.user_config['base']['timeformat'] = int(country_dict[config.user_config['base']['country']]['time_format'])
from pygui.gui.widget.clock import Clock
Clock.date_format = get_date_format()
Clock.time_format = get_time_format()
]:
	i: 769(t)
	o: 1441()

nname: 769
n 769(isinstance(item_list.selected, TimeZoneUserConfigSetupItem))[]:
	i: 619(f)
	o: 788(t), 1045(f)

nname: 638
n 638(None)[for list_name, browseable in zip(ac[2:], browsed):
	self.set_items(browseable.browse(), list_name)
	self.get_item_list(list_name).cyclic = True
self.active_list = 'options1_list'
louie_send('secret_code_explain_on', sender=self)
louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
]:
	i: 619(t)
	o: 1441()

nname: 619
n 619(isinstance(item_list.selected, SecretCodeUserConfigSetupItem))[]:
	i: 0(f)
	o: 638(t), 769(f)

nname: 475
n 475(None)[self.set_items(browseable.browse(), list_name)
for it in self[list_name]:
	if it.name == str(val):
		self.select(it, list_name)
		continue
]:
	i: 456(for)
	o: 1441()

nname: 456
n 456(None)[]:
	i: 447(loop)
	o: 475(for), 1441(AF)

nname: 447
n 447(None)[del _[1]
for date_choices in ac:
]:
	i: 298(AF), 414()
	o: 456(loop), 1441(AL)

nname: 414
n 414(None)[for list in ac:
if list.startswith('date'):
	continue
]:
	i: 298(for)
	o: 447()

nname: 298
n 298(None)[from pygui.facilities.codemapping import month_dict
import time
cur = time.localtime()[:-4]
d = ('%02d' % cur[2], month_dict[cur[1]], cur[0], '%02d' % cur[3], '%02d' % cur[4])
]:
	i: 0(t)
	o: 414(for), 447(AF)

nname: 0
n 0(isinstance(item_list.selected, DateUserConfigSetupItem))[ac = self.available_choices
for c in ac:
	self.set_items([], c, 0)
self.active_list = ac[1]
item_list = self.get_item_list('main_list')
if isinstance(item_list.selected, QuestionAnswerParameters):
	if not self._on_question:
		louie_send('secret_code_explain_off', sender=self)
		louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
		self.set_items([], list_name=ac[1])
		item_list.selected.execute()
		self.active_list = 'main_list'
		self._on_question = True
	else:
		_[1], self.active_list, self._changed_date, list_name, browseable, val, self.get_item_list(list_name).cyclic, self._on_question = [], date_choices[0], True, zip(date_choices, browsed, d), zip(date_choices, browsed, d), zip(date_choices, browsed, d), True, False
		self._history_rank += 1
		self.select(1, 'main_list', ignore_gen=True)
	return None
browsed = item_list.selected.browse()
rank = item_list.selected_pos
]:
	i: 
	o: 298(t), 619(f)

nname: 1441
n 1441(None)[return None
]:
	i: 619(), 475()
	o: 

nname: 619
n 619(None)[if isinstance(item_list.selected, SecretCodeUserConfigSetupItem):
	for list_name, browseable in zip(ac[2:], browsed):
		self.set_items(browseable.browse(), list_name)
		self.get_item_list(list_name).cyclic = True
	self.active_list = 'options1_list'
	louie_send('secret_code_explain_on', sender=self)
	louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
else:
	if isinstance(item_list.selected, TimeZoneUserConfigSetupItem):
		from pygui.facilities.codemapping import country_dict
		pre_sel_timezone = country_dict[config.user_config['base']['country']]['raw_timezone']
		self.set_items(browsed, list_name=ac[1])
		for it in self[ac[1]]:
			if it.name == pre_sel_timezone:
				self.select(it, ac[1])
				continue
		config.user_config['base']['dateformat'] = int(country_dict[config.user_config['base']['country']]['date_format'])
		config.user_config['base']['timeformat'] = int(country_dict[config.user_config['base']['country']]['time_format'])
		from pygui.gui.widget.clock import Clock
		Clock.date_format = get_date_format()
		Clock.time_format = get_time_format()
	else:
		if isinstance(browsed[0], GenericContainer):
			for list_name, browseable in zip(ac, browsed):
				self.set_items(browseable.browse(), list_name)
				self.get_item_list(list_name).cyclic = True
		else:
			if isinstance(item_list.selected, AspectRatioParametersSetupItem):
				self.set_items(browsed, 'aspect_ratio_list')
				self.active_list = 'aspect_ratio_list'
				self.get_item_list('aspect_ratio_list').cyclic = None
				louie_send('on_aspect_ratio_focus', sender=self)
			else:
				self.set_items(browsed, list_name=ac[1])
				if not isinstance(item_list.selected, (CountryUserConfigSetupItem, OSDLanguageUserConfigSetupItem)):
					self.get_item_list(ac[1]).cyclic = True
				if isinstance(item_list.selected, ProductTourDummyItem):
					self.get_item_list(ac[1]).selected = None
					louie_send('on_presentation_focus', sender=self)
					for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
						louie_send(sig, sender=self, value=self[sig])
				else:
					if isinstance(item_list.selected, CountryUserConfigSetupItem):
						louie_send('on_presentation_blur', sender=self)
]:
	i: 0(f)
	o: 1441()

nname: 475
n 475(None)[self.set_items(browseable.browse(), list_name)
	for it in self[list_name]:
		if it.name == str(val):
			self.select(it, list_name)
			continue
]:
	i: 447(for)
	o: 1441()

nname: 447
n 447(None)[del _[1]
for date_choices in ac:
]:
	i: 298(AF), 414()
	o: 475(for)

nname: 414
n 414(None)[for list in ac:
if list.startswith('date'):
	continue
]:
	i: 298(for)
	o: 447()

nname: 298
n 298(None)[from pygui.facilities.codemapping import month_dict
import time
cur = time.localtime()[:-4]
d = ('%02d' % cur[2], month_dict[cur[1]], cur[0], '%02d' % cur[3], '%02d' % cur[4])
]:
	i: 0(t)
	o: 414(for), 447(AF)

nname: 0
n 0(isinstance(item_list.selected, DateUserConfigSetupItem))[ac = self.available_choices
for c in ac:
	self.set_items([], c, 0)
self.active_list = ac[1]
item_list = self.get_item_list('main_list')
if isinstance(item_list.selected, QuestionAnswerParameters):
	if not self._on_question:
		louie_send('secret_code_explain_off', sender=self)
		louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
		self.set_items([], list_name=ac[1])
		item_list.selected.execute()
		self.active_list = 'main_list'
		self._on_question = True
	else:
		_[1], self.active_list, self._changed_date, list_name, browseable, val, self.get_item_list(list_name).cyclic, self._on_question = [], date_choices[0], True, zip(date_choices, browsed, d), zip(date_choices, browsed, d), zip(date_choices, browsed, d), True, False
		self._history_rank += 1
		self.select(1, 'main_list', ignore_gen=True)
	return None
browsed = item_list.selected.browse()
rank = item_list.selected_pos
]:
	i: 
	o: 298(t), 619(f)

nname: 1441
n 1441(None)[return None
]:
	i: 619(), 447()
	o: 

nname: 619
n 619(None)[if isinstance(item_list.selected, SecretCodeUserConfigSetupItem):
	for list_name, browseable in zip(ac[2:], browsed):
		self.set_items(browseable.browse(), list_name)
		self.get_item_list(list_name).cyclic = True
	self.active_list = 'options1_list'
	louie_send('secret_code_explain_on', sender=self)
	louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
else:
	if isinstance(item_list.selected, TimeZoneUserConfigSetupItem):
		from pygui.facilities.codemapping import country_dict
		pre_sel_timezone = country_dict[config.user_config['base']['country']]['raw_timezone']
		self.set_items(browsed, list_name=ac[1])
		for it in self[ac[1]]:
			if it.name == pre_sel_timezone:
				self.select(it, ac[1])
				continue
		config.user_config['base']['dateformat'] = int(country_dict[config.user_config['base']['country']]['date_format'])
		config.user_config['base']['timeformat'] = int(country_dict[config.user_config['base']['country']]['time_format'])
		from pygui.gui.widget.clock import Clock
		Clock.date_format = get_date_format()
		Clock.time_format = get_time_format()
	else:
		if isinstance(browsed[0], GenericContainer):
			for list_name, browseable in zip(ac, browsed):
				self.set_items(browseable.browse(), list_name)
				self.get_item_list(list_name).cyclic = True
		else:
			if isinstance(item_list.selected, AspectRatioParametersSetupItem):
				self.set_items(browsed, 'aspect_ratio_list')
				self.active_list = 'aspect_ratio_list'
				self.get_item_list('aspect_ratio_list').cyclic = None
				louie_send('on_aspect_ratio_focus', sender=self)
			else:
				self.set_items(browsed, list_name=ac[1])
				if not isinstance(item_list.selected, (CountryUserConfigSetupItem, OSDLanguageUserConfigSetupItem)):
					self.get_item_list(ac[1]).cyclic = True
				if isinstance(item_list.selected, ProductTourDummyItem):
					self.get_item_list(ac[1]).selected = None
					louie_send('on_presentation_focus', sender=self)
					for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
						louie_send(sig, sender=self, value=self[sig])
				else:
					if isinstance(item_list.selected, CountryUserConfigSetupItem):
						louie_send('on_presentation_blur', sender=self)
]:
	i: 0(f)
	o: 1441()

nname: 447
n 447(None)[del _[1]
for date_choices in ac:
self.set_items(browseable.browse(), list_name)
	for it in self[list_name]:
		if it.name == str(val):
			self.select(it, list_name)
			continue
]:
	i: 298(AF), 414()
	o: 1441()

nname: 414
n 414(None)[for list in ac:
if list.startswith('date'):
	continue
]:
	i: 298(for)
	o: 447()

nname: 298
n 298(None)[from pygui.facilities.codemapping import month_dict
import time
cur = time.localtime()[:-4]
d = ('%02d' % cur[2], month_dict[cur[1]], cur[0], '%02d' % cur[3], '%02d' % cur[4])
]:
	i: 0(t)
	o: 414(for), 447(AF)

nname: 0
n 0(isinstance(item_list.selected, DateUserConfigSetupItem))[ac = self.available_choices
for c in ac:
	self.set_items([], c, 0)
self.active_list = ac[1]
item_list = self.get_item_list('main_list')
if isinstance(item_list.selected, QuestionAnswerParameters):
	if not self._on_question:
		louie_send('secret_code_explain_off', sender=self)
		louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
		self.set_items([], list_name=ac[1])
		item_list.selected.execute()
		self.active_list = 'main_list'
		self._on_question = True
	else:
		_[1], self.active_list, self._changed_date, list_name, browseable, val, self.get_item_list(list_name).cyclic, self._on_question = [], date_choices[0], True, zip(date_choices, browsed, d), zip(date_choices, browsed, d), zip(date_choices, browsed, d), True, False
		self._history_rank += 1
		self.select(1, 'main_list', ignore_gen=True)
	return None
browsed = item_list.selected.browse()
rank = item_list.selected_pos
]:
	i: 
	o: 298(t), 619(f)

self.nodes: {0: <unpyclib.structure.node instance at 0xa049acc>, 414: <unpyclib.structure.node instance at 0xa04944c>, 1441: <unpyclib.structure.node instance at 0xb761766c>, 298: <unpyclib.structure.node instance at 0xa06a3ec>, 447: <unpyclib.structure.node instance at 0xa04938c>, 619: <unpyclib.structure.node instance at 0xa049f4c>}
nname: 496
n 496(None)[self.select(1, 'main_list', ignore)
return None
]:
	i: 467(JA), 470(), 489()
	o: 

nname: 489
n 489(None)[ignore = False
]:
	i: 0(f)
	o: 496()

nname: 470
n 470(None)[self._history_rank += 1
]:
	i: 18&54(f)
	o: 496()

nname: 467
n 467(None)[]:
	i: 385(AE)
	o: 496(JA)

nname: 385
n 385(None)[config.user_config['security']['maturity_rating'] = None
config.user_config['security']['secretcode'] = None
config.user_config['security']['question'] = None
config.user_config['security']['response'] = None
config.user_config.save()
]:
	i: 73(finally), 381()
	o: 467(AE)

nname: 381
n 381(None)[]:
	i: 242(), 355(), 379(AE)
	o: 385()

nname: 379
n 379(None)[]:
	i: 246(f)
	o: 381(AE)

nname: 355
n 355(None)[self._history_rank += 3
ignore = False
]:
	i: 256(AL), 354()
	o: 381()

nname: 354
n 354(None)[]:
	i: 263(AF), 350()
	o: 355()

nname: 350
n 350(None)[]:
	i: 293(f), 315()
	o: 354()

nname: 315
n 315(None)[self._current_rank, self._stack_history[idx] = self.main_items.next()
continue
]:
	i: 293(t)
	o: 350()

nname: 293
n 293(self._stack_history[idx] is None)[for idx in xrange(self._history_rank + 1, self._history_rank + 4):
]:
	i: 263(for)
	o: 315(t), 350(f)

nname: 263
n 263(None)[]:
	i: 256(loop)
	o: 293(for), 354(AF)

nname: 256
n 256(None)[]:
	i: 246(t)
	o: 263(loop), 355(AL)

nname: 246
n 246(<dummy_ex3> EXC_MATCH IndexError)[]:
	i: 77(except)
	o: 256(t), 379(f)

nname: 242
n 242(None)[]:
	i: 106(), 221()
	o: 381()

nname: 221
n 221(None)[self._history_rank += 3
ignore = False
]:
	i: 125(AL), 220()
	o: 242()

nname: 220
n 220(None)[]:
	i: 129(AF), 216()
	o: 221()

nname: 216
n 216(None)[]:
	i: 159(f), 181()
	o: 220()

nname: 181
n 181(None)[self._current_rank, self._stack_history[idx] = self.main_items.next()
continue
]:
	i: 159(t)
	o: 216()

nname: 159
n 159(self._stack_history[idx] is None)[for idx in xrange(self._history_rank + 1, self._history_rank + 4):
]:
	i: 129(for)
	o: 181(t), 216(f)

nname: 129
n 129(None)[]:
	i: 125(loop)
	o: 159(for), 220(AF)

nname: 125
n 125(None)[]:
	i: 80(f)
	o: 129(loop), 221(AL)

nname: 106
n 106(None)[self._history_rank += 4
]:
	i: 80(t)
	o: 242()

nname: 80
n 80(self._stack_history[self._history_rank + 4] is not None)[]:
	i: 77(try)
	o: 106(t), 125(f)

nname: 77
n 77(None)[]:
	i: 73(ASF)
	o: 80(try), 246(except)

nname: 73
n 73(None)[]:
	i: 18&54(t)
	o: 77(ASF), 385(finally)

nname: 18&54
n 18&54(isinstance(self._stack_history[self._history_rank][0], ParentalControlConfigSetupItem) and not config.user_config['security']['parental_control'])[ignore = True
]:
	i: 0(t)
	o: 73(t), 470(f)

nname: 0
n 0(self._current_rank > self._history_rank)[]:
	i: 
	o: 18&54(t), 489(f)

nname: 496
n 496(None)[self.select(1, 'main_list', ignore)
return None
]:
	i: 470(), 489(), 385(AE)
	o: 

nname: 489
n 489(None)[ignore = False
]:
	i: 0(f)
	o: 496()

nname: 470
n 470(None)[self._history_rank += 1
]:
	i: 18&54(f)
	o: 496()

nname: 385
n 385(None)[config.user_config['security']['maturity_rating'] = None
config.user_config['security']['secretcode'] = None
config.user_config['security']['question'] = None
config.user_config['security']['response'] = None
config.user_config.save()
]:
	i: 73(finally), 355(), 379(AE), 106(), 221()
	o: 496(AE)

nname: 379
n 379(None)[]:
	i: 246(f)
	o: 385(AE)

nname: 355
n 355(None)[self._history_rank += 3
ignore = False
]:
	i: 256(AL), 263(AF), 293()
	o: 385()

nname: 293
n 293(None)[for idx in xrange(self._history_rank + 1, self._history_rank + 4):
if self._stack_history[idx] is None:
	self._current_rank, self._stack_history[idx] = self.main_items.next()
	continue
]:
	i: 263(for)
	o: 355()

nname: 263
n 263(None)[]:
	i: 256(loop)
	o: 293(for), 355(AF)

nname: 256
n 256(None)[]:
	i: 246(t)
	o: 263(loop), 355(AL)

nname: 246
n 246(<dummy_ex3> EXC_MATCH IndexError)[]:
	i: 77(except)
	o: 256(t), 379(f)

nname: 221
n 221(None)[self._history_rank += 3
ignore = False
]:
	i: 125(AL), 129(AF), 159()
	o: 385()

nname: 159
n 159(None)[for idx in xrange(self._history_rank + 1, self._history_rank + 4):
if self._stack_history[idx] is None:
	self._current_rank, self._stack_history[idx] = self.main_items.next()
	continue
]:
	i: 129(for)
	o: 221()

nname: 129
n 129(None)[]:
	i: 125(loop)
	o: 159(for), 221(AF)

nname: 125
n 125(None)[]:
	i: 80(f)
	o: 129(loop), 221(AL)

nname: 106
n 106(None)[self._history_rank += 4
]:
	i: 80(t)
	o: 385()

nname: 80
n 80(self._stack_history[self._history_rank + 4] is not None)[]:
	i: 77(try)
	o: 106(t), 125(f)

nname: 77
n 77(None)[]:
	i: 73(ASF)
	o: 80(try), 246(except)

nname: 73
n 73(None)[]:
	i: 18&54(t)
	o: 77(ASF), 385(finally)

nname: 18&54
n 18&54(isinstance(self._stack_history[self._history_rank][0], ParentalControlConfigSetupItem) and not config.user_config['security']['parental_control'])[ignore = True
]:
	i: 0(t)
	o: 73(t), 470(f)

nname: 0
n 0(self._current_rank > self._history_rank)[]:
	i: 
	o: 18&54(t), 489(f)

nname: 496
n 496(None)[self.select(1, 'main_list', ignore)
return None
]:
	i: 470(), 489(), 385(AE)
	o: 

nname: 489
n 489(None)[ignore = False
]:
	i: 0(f)
	o: 496()

nname: 470
n 470(None)[self._history_rank += 1
]:
	i: 18&54(f)
	o: 496()

nname: 385
n 385(None)[config.user_config['security']['maturity_rating'] = None
config.user_config['security']['secretcode'] = None
config.user_config['security']['question'] = None
config.user_config['security']['response'] = None
config.user_config.save()
]:
	i: 73(finally), 355(), 379(AE), 106(), 159()
	o: 496(AE)

nname: 355
n 355(None)[self._history_rank += 3
ignore = False
]:
	i: 263()
	o: 385()

nname: 263
n 263(None)[for idx in xrange(self._history_rank + 1, self._history_rank + 4):
	if self._stack_history[idx] is None:
		self._current_rank, self._stack_history[idx] = self.main_items.next()
		continue
]:
	i: 246(f), 246(t)
	o: 355()

nname: 246
n 246(<dummy_ex3> EXC_MATCH IndexError)[]:
	i: 77(except)
	o: 263(f)

nname: 159
n 159(None)[for idx in xrange(self._history_rank + 1, self._history_rank + 4):
	if self._stack_history[idx] is None:
		self._current_rank, self._stack_history[idx] = self.main_items.next()
		continue
self._history_rank += 3
ignore = False
]:
	i: 125(for)
	o: 385()

nname: 125
n 125(None)[]:
	i: 80(f)
	o: 159(for)

nname: 106
n 106(None)[self._history_rank += 4
]:
	i: 80(t)
	o: 385()

nname: 80
n 80(self._stack_history[self._history_rank + 4] is not None)[]:
	i: 77(try)
	o: 106(t), 125(f)

nname: 77
n 77(None)[]:
	i: 73(ASF)
	o: 80(try), 246(except)

structureSingleExcept Exception 'NoneType' object has no attribute 'toNode'
nname: 73
n 73(None)[]:
	i: 18&54(t)
	o: 77(ASF), 385(finally)

nname: 18&54
n 18&54(isinstance(self._stack_history[self._history_rank][0], ParentalControlConfigSetupItem) and not config.user_config['security']['parental_control'])[ignore = True
]:
	i: 0(t)
	o: 73(t), 470(f)

nname: 0
n 0(self._current_rank > self._history_rank)[]:
	i: 
	o: 18&54(t), 489(f)

nname: 496
n 496(None)[self.select(1, 'main_list', ignore)
return None
]:
	i: 470(), 489(), 385(AE)
	o: 

nname: 489
n 489(None)[ignore = False
]:
	i: 0(f)
	o: 496()

nname: 470
n 470(None)[self._history_rank += 1
]:
	i: 18&54(f)
	o: 496()

nname: 385
n 385(None)[config.user_config['security']['maturity_rating'] = None
config.user_config['security']['secretcode'] = None
config.user_config['security']['question'] = None
config.user_config['security']['response'] = None
config.user_config.save()
]:
	i: 73(finally), 263(), 379(AE), 106(), 125()
	o: 496(AE)

nname: 263
n 263(None)[for idx in xrange(self._history_rank + 1, self._history_rank + 4):
	if self._stack_history[idx] is None:
		self._current_rank, self._stack_history[idx] = self.main_items.next()
		continue
self._history_rank += 3
ignore = False
]:
	i: 246(t), 77(except)
	o: 385()

nname: 125
n 125(None)[for idx in xrange(self._history_rank + 1, self._history_rank + 4):
	if self._stack_history[idx] is None:
		self._current_rank, self._stack_history[idx] = self.main_items.next()
		continue
self._history_rank += 3
ignore = False
]:
	i: 80(f)
	o: 385()

nname: 106
n 106(None)[self._history_rank += 4
]:
	i: 80(t)
	o: 385()

nname: 80
n 80(self._stack_history[self._history_rank + 4] is not None)[]:
	i: 77(try)
	o: 106(t), 125(f)

nname: 77
n 77(None)[]:
	i: 73(ASF)
	o: 80(try), 263(except)

nname: 73
n 73(None)[]:
	i: 18&54(t)
	o: 77(ASF2), 385(finally)

nname: 18&54
n 18&54(isinstance(self._stack_history[self._history_rank][0], ParentalControlConfigSetupItem) and not config.user_config['security']['parental_control'])[ignore = True
]:
	i: 0(t)
	o: 73(t), 470(f)

nname: 0
n 0(self._current_rank > self._history_rank)[]:
	i: 
	o: 18&54(t), 489(f)

nname: 496
n 496(None)[self.select(1, 'main_list', ignore)
return None
]:
	i: 470(), 489(), 385(AE)
	o: 

nname: 489
n 489(None)[ignore = False
]:
	i: 0(f)
	o: 496()

nname: 470
n 470(None)[self._history_rank += 1
]:
	i: 18&54(f)
	o: 496()

nname: 385
n 385(None)[config.user_config['security']['maturity_rating'] = None
config.user_config['security']['secretcode'] = None
config.user_config['security']['question'] = None
config.user_config['security']['response'] = None
config.user_config.save()
]:
	i: 73(finally), 263()
	o: 496(AE)

nname: 263
n 263(None)[except:
	for idx in xrange(self._history_rank + 1, self._history_rank + 4):
		if self._stack_history[idx] is None:
			self._current_rank, self._stack_history[idx] = self.main_items.next()
			continue
	self._history_rank += 3
	ignore = False
]:
	i: 246(t), 77()
	o: 385()

nname: 77
n 77(None)[try:
	if self._stack_history[self._history_rank + 4] is not None:
		self._history_rank += 4
	else:
		for idx in xrange(self._history_rank + 1, self._history_rank + 4):
			if self._stack_history[idx] is None:
				self._current_rank, self._stack_history[idx] = self.main_items.next()
				continue
		self._history_rank += 3
		ignore = False
]:
	i: 73(ASF2)
	o: 263()

nname: 73
n 73(None)[]:
	i: 18&54(t)
	o: 77(ASF2), 385(finally)

nname: 18&54
n 18&54(isinstance(self._stack_history[self._history_rank][0], ParentalControlConfigSetupItem) and not config.user_config['security']['parental_control'])[ignore = True
]:
	i: 0(t)
	o: 73(t), 470(f)

nname: 0
n 0(self._current_rank > self._history_rank)[]:
	i: 
	o: 18&54(t), 489(f)

self.nodes: {0: <unpyclib.structure.node instance at 0xb760a98c>, 263: <unpyclib.structure.node instance at 0xb76230cc>, 385: <unpyclib.structure.node instance at 0xb762360c>, '18&54': <unpyclib.structure.node instance at 0xa06a22c>, 73: <unpyclib.structure.node instance at 0xb760a3ac>, 77: <unpyclib.structure.node instance at 0xb762382c>, 470: <unpyclib.structure.node instance at 0xb7623dcc>, 489: <unpyclib.structure.node instance at 0xb7623f4c>, 496: <unpyclib.structure.node instance at 0xb76237ec>}
nname: 586
n 586(None)[modified = Menu.select(self, item, list_name)
]:
	i: 494(JA), 582(), 585()
	o: 

nname: 585
n 585(None)[]:
	i: 0(f)
	o: 586()

nname: 582
n 582(None)[]:
	i: 81(JA), 548()
	o: 586()

nname: 548
n 548(None)[self.set_items(self._stack_history[self._history_rank])
self._set_options()
]:
	i: 12&20(f)
	o: 582()

nname: 494
n 494(None)[self._history_rank = self._current_rank
self._stack_history[self._history_rank] = it
self.set_items(it)
self._set_options()
]:
	i: 473(), 493()
	o: 586(JA)

nname: 493
n 493(None)[]:
	i: 118&137(f)
	o: 494()

nname: 473
n 473(None)[config.user_config['security']['parental_control'] = False
]:
	i: 381(), 419(), 471(AE)
	o: 494()

nname: 471
n 471(None)[]:
	i: 409(f)
	o: 473(AE)

nname: 419
n 419(None)[config.user_config['security']['parental_control'] = False
self.disable()
pygui_globs['menustack'].back_to_home()
]:
	i: 409(t)
	o: 473()

nname: 409
n 409(<dummy_ex3> EXC_MATCH StopIteration)[]:
	i: 378(except)
	o: 419(t), 471(f)

nname: 381
n 381(None)[self._current_rank, it = self.main_items.next()
]:
	i: 378(try)
	o: 473()

nname: 378
n 378(None)[]:
	i: 156(AL), 377()
	o: 381(try), 409(except)

nname: 377
n 377(None)[]:
	i: 247(AF), 358()
	o: 378()

nname: 358
n 358(None)[self._stack_history[self._current_rank] = it
]:
	i: 266(), 304(), 356(AE)
	o: 377()

nname: 356
n 356(None)[]:
	i: 294(f)
	o: 358(AE)

nname: 304
n 304(None)[config.user_config['security']['parental_control'] = False
self.disable()
pygui_globs['menustack'].back_to_home()
]:
	i: 294(t)
	o: 358()

nname: 294
n 294(<dummy_ex3> EXC_MATCH StopIteration)[]:
	i: 260(except)
	o: 304(t), 356(f)

nname: 266
n 266(None)[self._current_rank, it = self.main_items.next()
]:
	i: 260(try)
	o: 358()

nname: 260
n 260(None)[for i in xrange(2):
]:
	i: 247(for)
	o: 266(try), 294(except)

nname: 247
n 247(None)[]:
	i: 156(loop)
	o: 260(for), 377(AF)

nname: 156
n 156(None)[config.user_config['security']['parental_control'] = True
self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
]:
	i: 118&137(t)
	o: 247(loop), 378(AL)

nname: 118&137
n 118&137(isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control'])[]:
	i: 43(), 116(AE)
	o: 156(t), 493(f)

nname: 116
n 116(None)[]:
	i: 71(f)
	o: 118&137(AE)

nname: 81
n 81(None)[self.disable()
pygui_globs['menustack'].back_to_home()
]:
	i: 71(t)
	o: 582(JA)

nname: 71
n 71(<dummy_ex3> EXC_MATCH StopIteration)[]:
	i: 39(except)
	o: 81(t), 116(f)

nname: 43
n 43(None)[self._current_rank, it = self.main_items.next()
]:
	i: 39(try)
	o: 118&137()

nname: 39
n 39(None)[]:
	i: 12&20(t)
	o: 43(try), 71(except)

nname: 12&20
n 12&20(not ignore_gen and self._current_rank == self._history_rank)[]:
	i: 0(t)
	o: 39(t), 548(f)

nname: 0
n 0(list_name == 'main_list')[]:
	i: 
	o: 12&20(t), 585(f)

nname: 586
n 586(None)[modified = Menu.select(self, item, list_name)
]:
	i: 494(JA), 81(JA), 548(), 71(f), 0(f)
	o: 

nname: 548
n 548(None)[self.set_items(self._stack_history[self._history_rank])
self._set_options()
]:
	i: 12&20(f)
	o: 586()

nname: 81
n 81(None)[self.disable()
pygui_globs['menustack'].back_to_home()
]:
	i: 71(t)
	o: 586(JA)

nname: 71
n 71(<dummy_ex3> EXC_MATCH StopIteration)[]:
	i: 39(except)
	o: 81(t), 586(f)

nname: 494
n 494(None)[self._history_rank = self._current_rank
self._stack_history[self._history_rank] = it
self.set_items(it)
self._set_options()
]:
	i: 409(), 118&137(f)
	o: 586(JA)

nname: 409
n 409(None)[except StopIteration:
	config.user_config['security']['parental_control'] = False
	self.disable()
	pygui_globs['menustack'].back_to_home()
config.user_config['security']['parental_control'] = False
]:
	i: 378()
	o: 494()

nname: 378
n 378(None)[try:
	self._current_rank, it = self.main_items.next()
]:
	i: 156(AL), 247(AF), 294()
	o: 409()

nname: 294
n 294(None)[except StopIteration:
	config.user_config['security']['parental_control'] = False
	self.disable()
	pygui_globs['menustack'].back_to_home()
self._stack_history[self._current_rank] = it
]:
	i: 260()
	o: 378()

nname: 260
n 260(None)[for i in xrange(2):
try:
	self._current_rank, it = self.main_items.next()
]:
	i: 247(for)
	o: 294()

nname: 247
n 247(None)[]:
	i: 156(loop)
	o: 260(for), 378(AF)

nname: 156
n 156(None)[config.user_config['security']['parental_control'] = True
self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
]:
	i: 118&137(t)
	o: 247(loop), 378(AL)

nname: 118&137
n 118&137(isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control'])[]:
	i: 43(), 116(AE)
	o: 156(t), 494(f)

nname: 43
n 43(None)[self._current_rank, it = self.main_items.next()
]:
	i: 39(try)
	o: 118&137()

nname: 39
n 39(None)[]:
	i: 12&20(t)
	o: 43(try), 71(except)

nname: 12&20
n 12&20(not ignore_gen and self._current_rank == self._history_rank)[]:
	i: 0(t)
	o: 39(t), 548(f)

nname: 0
n 0(list_name == 'main_list')[]:
	i: 
	o: 12&20(t), 586(f)

nname: 586
n 586(None)[modified = Menu.select(self, item, list_name)
]:
	i: 494(JA), 548(), 71(f), 0(f)
	o: 

nname: 548
n 548(None)[self.set_items(self._stack_history[self._history_rank])
self._set_options()
]:
	i: 12&20(f)
	o: 586()

nname: 71
n 71(None)[except StopIteration:
	self.disable()
	pygui_globs['menustack'].back_to_home()
]:
	i: 39(except)
	o: 586(JA)

nname: 494
n 494(None)[self._history_rank = self._current_rank
self._stack_history[self._history_rank] = it
self.set_items(it)
self._set_options()
]:
	i: 378(), 118&137(f)
	o: 586(JA)

nname: 378
n 378(None)[try:
	self._current_rank, it = self.main_items.next()
except StopIteration:
	config.user_config['security']['parental_control'] = False
	self.disable()
	pygui_globs['menustack'].back_to_home()
config.user_config['security']['parental_control'] = False
]:
	i: 156(AL), 247(AF), 260()
	o: 494()

nname: 260
n 260(None)[for i in xrange(2):
try:
	self._current_rank, it = self.main_items.next()
except StopIteration:
	config.user_config['security']['parental_control'] = False
	self.disable()
	pygui_globs['menustack'].back_to_home()
self._stack_history[self._current_rank] = it
]:
	i: 247(for)
	o: 378()

nname: 247
n 247(None)[]:
	i: 156(loop)
	o: 260(for), 378(AF)

nname: 156
n 156(None)[config.user_config['security']['parental_control'] = True
self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
]:
	i: 118&137(t)
	o: 247(loop), 378(AL)

nname: 118&137
n 118&137(isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control'])[]:
	i: 43(), 116(AE)
	o: 156(t), 494(f)

nname: 43
n 43(None)[self._current_rank, it = self.main_items.next()
]:
	i: 39(try)
	o: 118&137()

nname: 39
n 39(None)[]:
	i: 12&20(t)
	o: 43(try), 71(except)

nname: 12&20
n 12&20(not ignore_gen and self._current_rank == self._history_rank)[]:
	i: 0(t)
	o: 39(t), 548(f)

nname: 0
n 0(list_name == 'main_list')[]:
	i: 
	o: 12&20(t), 586(f)

nname: 586
n 586(None)[modified = Menu.select(self, item, list_name)
]:
	i: 494(JA), 548(), 71(f), 0(f)
	o: 

nname: 548
n 548(None)[self.set_items(self._stack_history[self._history_rank])
self._set_options()
]:
	i: 12&20(f)
	o: 586()

nname: 71
n 71(None)[except StopIteration:
	self.disable()
	pygui_globs['menustack'].back_to_home()
]:
	i: 39(except)
	o: 586(JA)

nname: 494
n 494(None)[self._history_rank = self._current_rank
self._stack_history[self._history_rank] = it
self.set_items(it)
self._set_options()
]:
	i: 260(), 118&137(f)
	o: 586(JA)

nname: 260
n 260(None)[for i in xrange(2):
	try:
		self._current_rank, it = self.main_items.next()
	except StopIteration:
		config.user_config['security']['parental_control'] = False
		self.disable()
		pygui_globs['menustack'].back_to_home()
	self._stack_history[self._current_rank] = it
try:
	self._current_rank, it = self.main_items.next()
except StopIteration:
	config.user_config['security']['parental_control'] = False
	self.disable()
	pygui_globs['menustack'].back_to_home()
config.user_config['security']['parental_control'] = False
]:
	i: 156(for)
	o: 494()

nname: 156
n 156(None)[config.user_config['security']['parental_control'] = True
self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
]:
	i: 118&137(t)
	o: 260(for)

nname: 118&137
n 118&137(isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control'])[]:
	i: 43(), 116(AE)
	o: 156(t), 494(f)

nname: 43
n 43(None)[self._current_rank, it = self.main_items.next()
]:
	i: 39(try)
	o: 118&137()

nname: 39
n 39(None)[]:
	i: 12&20(t)
	o: 43(try), 71(except)

nname: 12&20
n 12&20(not ignore_gen and self._current_rank == self._history_rank)[]:
	i: 0(t)
	o: 39(t), 548(f)

nname: 0
n 0(list_name == 'main_list')[]:
	i: 
	o: 12&20(t), 586(f)

nname: 586
n 586(None)[modified = Menu.select(self, item, list_name)
]:
	i: 494(JA), 548(), 71(f), 0(f)
	o: 

nname: 548
n 548(None)[self.set_items(self._stack_history[self._history_rank])
self._set_options()
]:
	i: 12&20(f)
	o: 586()

nname: 71
n 71(None)[except StopIteration:
	self.disable()
	pygui_globs['menustack'].back_to_home()
]:
	i: 39(except)
	o: 586(JA)

nname: 494
n 494(None)[self._history_rank = self._current_rank
self._stack_history[self._history_rank] = it
self.set_items(it)
self._set_options()
]:
	i: 156(), 118&137(f)
	o: 586(JA)

nname: 156
n 156(None)[config.user_config['security']['parental_control'] = True
self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
for i in xrange(2):
	try:
		self._current_rank, it = self.main_items.next()
	except StopIteration:
		config.user_config['security']['parental_control'] = False
		self.disable()
		pygui_globs['menustack'].back_to_home()
	self._stack_history[self._current_rank] = it
try:
	self._current_rank, it = self.main_items.next()
except StopIteration:
	config.user_config['security']['parental_control'] = False
	self.disable()
	pygui_globs['menustack'].back_to_home()
config.user_config['security']['parental_control'] = False
]:
	i: 118&137(t)
	o: 494()

nname: 118&137
n 118&137(isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control'])[]:
	i: 43(), 116(AE)
	o: 156(t), 494(f)

nname: 43
n 43(None)[self._current_rank, it = self.main_items.next()
]:
	i: 39(try)
	o: 118&137()

nname: 39
n 39(None)[]:
	i: 12&20(t)
	o: 43(try), 71(except)

nname: 12&20
n 12&20(not ignore_gen and self._current_rank == self._history_rank)[]:
	i: 0(t)
	o: 39(t), 548(f)

nname: 0
n 0(list_name == 'main_list')[]:
	i: 
	o: 12&20(t), 586(f)

nname: 586
n 586(None)[modified = Menu.select(self, item, list_name)
]:
	i: 118&137(JA), 548(), 71(f), 0(f)
	o: 

nname: 548
n 548(None)[self.set_items(self._stack_history[self._history_rank])
self._set_options()
]:
	i: 12&20(f)
	o: 586()

nname: 71
n 71(None)[except StopIteration:
	self.disable()
	pygui_globs['menustack'].back_to_home()
]:
	i: 39(except)
	o: 586(JA)

nname: 118&137
n 118&137(None)[if isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control']:
	config.user_config['security']['parental_control'] = True
	self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
	for i in xrange(2):
		try:
			self._current_rank, it = self.main_items.next()
		except StopIteration:
			config.user_config['security']['parental_control'] = False
			self.disable()
			pygui_globs['menustack'].back_to_home()
		self._stack_history[self._current_rank] = it
	try:
		self._current_rank, it = self.main_items.next()
	except StopIteration:
		config.user_config['security']['parental_control'] = False
		self.disable()
		pygui_globs['menustack'].back_to_home()
	config.user_config['security']['parental_control'] = False
self._history_rank = self._current_rank
self._stack_history[self._history_rank] = it
self.set_items(it)
self._set_options()
]:
	i: 43(), 116(AE)
	o: 586(JA)

nname: 43
n 43(None)[self._current_rank, it = self.main_items.next()
]:
	i: 39(try)
	o: 118&137()

nname: 39
n 39(None)[]:
	i: 12&20(t)
	o: 43(try), 71(except)

nname: 12&20
n 12&20(not ignore_gen and self._current_rank == self._history_rank)[]:
	i: 0(t)
	o: 39(t), 548(f)

nname: 0
n 0(list_name == 'main_list')[]:
	i: 
	o: 12&20(t), 586(f)

nname: 586
n 586(None)[modified = Menu.select(self, item, list_name)
]:
	i: 71(JA), 548(), 0(f)
	o: 

nname: 548
n 548(None)[self.set_items(self._stack_history[self._history_rank])
self._set_options()
]:
	i: 12&20(f)
	o: 586()

nname: 71
n 71(None)[except StopIteration:
	self.disable()
	pygui_globs['menustack'].back_to_home()
else:
	if isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control']:
		config.user_config['security']['parental_control'] = True
		self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
		for i in xrange(2):
			try:
				self._current_rank, it = self.main_items.next()
			except StopIteration:
				config.user_config['security']['parental_control'] = False
				self.disable()
				pygui_globs['menustack'].back_to_home()
			self._stack_history[self._current_rank] = it
		try:
			self._current_rank, it = self.main_items.next()
		except StopIteration:
			config.user_config['security']['parental_control'] = False
			self.disable()
			pygui_globs['menustack'].back_to_home()
		config.user_config['security']['parental_control'] = False
	self._history_rank = self._current_rank
	self._stack_history[self._history_rank] = it
	self.set_items(it)
	self._set_options()
]:
	i: 39()
	o: 586(JA)

nname: 39
n 39(None)[try:
	self._current_rank, it = self.main_items.next()
]:
	i: 12&20(t)
	o: 71()

nname: 12&20
n 12&20(not ignore_gen and self._current_rank == self._history_rank)[]:
	i: 0(t)
	o: 39(t), 548(f)

nname: 0
n 0(list_name == 'main_list')[]:
	i: 
	o: 12&20(t), 586(f)

nname: 586
n 586(None)[modified = Menu.select(self, item, list_name)
]:
	i: 39(JA), 548(), 0(f)
	o: 

nname: 548
n 548(None)[self.set_items(self._stack_history[self._history_rank])
self._set_options()
]:
	i: 12&20(f)
	o: 586()

nname: 39
n 39(None)[try:
	self._current_rank, it = self.main_items.next()
except StopIteration:
	self.disable()
	pygui_globs['menustack'].back_to_home()
else:
	if isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control']:
		config.user_config['security']['parental_control'] = True
		self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
		for i in xrange(2):
			try:
				self._current_rank, it = self.main_items.next()
			except StopIteration:
				config.user_config['security']['parental_control'] = False
				self.disable()
				pygui_globs['menustack'].back_to_home()
			self._stack_history[self._current_rank] = it
		try:
			self._current_rank, it = self.main_items.next()
		except StopIteration:
			config.user_config['security']['parental_control'] = False
			self.disable()
			pygui_globs['menustack'].back_to_home()
		config.user_config['security']['parental_control'] = False
	self._history_rank = self._current_rank
	self._stack_history[self._history_rank] = it
	self.set_items(it)
	self._set_options()
]:
	i: 12&20(t)
	o: 586(JA)

nname: 12&20
n 12&20(not ignore_gen and self._current_rank == self._history_rank)[]:
	i: 0(t)
	o: 39(t), 548(f)

nname: 0
n 0(list_name == 'main_list')[]:
	i: 
	o: 12&20(t), 586(f)

nname: 0
n 0(None)[if list_name == 'main_list':
	if not ignore_gen and self._current_rank == self._history_rank:
		try:
			self._current_rank, it = self.main_items.next()
		except StopIteration:
			self.disable()
			pygui_globs['menustack'].back_to_home()
		else:
			if isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control']:
				config.user_config['security']['parental_control'] = True
				self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
				for i in xrange(2):
					try:
						self._current_rank, it = self.main_items.next()
					except StopIteration:
						config.user_config['security']['parental_control'] = False
						self.disable()
						pygui_globs['menustack'].back_to_home()
					self._stack_history[self._current_rank] = it
				try:
					self._current_rank, it = self.main_items.next()
				except StopIteration:
					config.user_config['security']['parental_control'] = False
					self.disable()
					pygui_globs['menustack'].back_to_home()
				config.user_config['security']['parental_control'] = False
			self._history_rank = self._current_rank
			self._stack_history[self._history_rank] = it
			self.set_items(it)
			self._set_options()
	else:
		self.set_items(self._stack_history[self._history_rank])
		self._set_options()
modified = Menu.select(self, item, list_name)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xa049dec>}
nname: 33
n 33(None)[]:
	i: 15(), 32()
	o: 

nname: 32
n 32(None)[]:
	i: 0(t)
	o: 33()

nname: 15
n 15(None)[Menu.focus_previous(self)
]:
	i: 0(f)
	o: 33()

nname: 0
n 0(self.active_list == 'options0_list')[]:
	i: 
	o: 15(f), 32(t)

nname: 0
n 0(None)[if not self.active_list == 'options0_list':
	Menu.focus_previous(self)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76127cc>}
nname: 373
n 373(None)[self.select(1, 'main_list')
]:
	i: 106(), 148(), 233(), 329(), 372()
	o: 

nname: 372
n 372(None)[]:
	i: 253(f)
	o: 373()

nname: 329
n 329(None)[self.main_items = self._gen_items()
self._current_rank = 0
self.set_items([], 'back_list')
]:
	i: 269(AL), 328()
	o: 373()

nname: 328
n 328(None)[]:
	i: 289(AF), 296()
	o: 329()

nname: 296
n 296(None)[for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
louie_send(sig, sender=self, value=self[sig])
]:
	i: 289(for)
	o: 328()

nname: 289
n 289(None)[]:
	i: 269(loop)
	o: 296(for), 328(AF)

nname: 269
n 269(None)[louie_send('on_presentation_blur', sender=self)
]:
	i: 253(t)
	o: 289(loop), 329(AL)

nname: 253
n 253(self._history_rank == 0)[]:
	i: 203(f)
	o: 269(t), 372(f)

nname: 233
n 233(None)[louie_send('secret_code_explain_off', sender=self)
]:
	i: 203(t)
	o: 373()

nname: 203
n 203(isinstance(self._stack_history[self._history_rank][0], ParentalRatingConfigSetupItem))[]:
	i: 118(f)
	o: 233(t), 253(f)

nname: 148
n 148(None)[self._on_question = False
louie_send('secret_code_explain_on', sender=self)
louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
]:
	i: 118(t)
	o: 373()

nname: 118
n 118(isinstance(self._stack_history[self._history_rank][0], SecretCodeUserConfigSetupItem))[]:
	i: 39(f)
	o: 148(t), 203(f)

nname: 106
n 106(None)[self._on_question = False
]:
	i: 86(), 105()
	o: 373()

nname: 105
n 105(None)[]:
	i: 68(t)
	o: 106()

nname: 86
n 86(None)[self._history_rank -= 3
]:
	i: 68(f)
	o: 106()

nname: 68
n 68(config.user_config['security']['parental_control'])[]:
	i: 39(t)
	o: 86(f), 105(t)

nname: 39
n 39(isinstance(self._stack_history[self._history_rank][0], QuestionAnswerParameters))[]:
	i: 15(), 34()
	o: 68(t), 118(f)

nname: 34
n 34(None)[return False
]:
	i: 0(f)
	o: 39()

nname: 15
n 15(None)[self._history_rank -= 1
]:
	i: 0(t)
	o: 39()

nname: 0
n 0(self._history_rank > 0)[]:
	i: 
	o: 15(t), 34(f)

nname: 373
n 373(None)[self.select(1, 'main_list')
]:
	i: 68(), 148(), 233(), 329(), 253(f)
	o: 

nname: 329
n 329(None)[self.main_items = self._gen_items()
self._current_rank = 0
self.set_items([], 'back_list')
]:
	i: 296()
	o: 373()

nname: 296
n 296(None)[for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
	louie_send(sig, sender=self, value=self[sig])
]:
	i: 269(for)
	o: 329()

nname: 269
n 269(None)[louie_send('on_presentation_blur', sender=self)
]:
	i: 253(t)
	o: 296(for)

nname: 253
n 253(self._history_rank == 0)[]:
	i: 203(f)
	o: 269(t), 373(f)

nname: 233
n 233(None)[louie_send('secret_code_explain_off', sender=self)
]:
	i: 203(t)
	o: 373()

nname: 203
n 203(isinstance(self._stack_history[self._history_rank][0], ParentalRatingConfigSetupItem))[]:
	i: 118(f)
	o: 233(t), 253(f)

nname: 148
n 148(None)[self._on_question = False
louie_send('secret_code_explain_on', sender=self)
louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
]:
	i: 118(t)
	o: 373()

nname: 118
n 118(isinstance(self._stack_history[self._history_rank][0], SecretCodeUserConfigSetupItem))[]:
	i: 0(f)
	o: 148(t), 203(f)

nname: 68
n 68(None)[if not config.user_config['security']['parental_control']:
	self._history_rank -= 3
self._on_question = False
]:
	i: 0(t)
	o: 373()

nname: 0
n 0(isinstance(self._stack_history[self._history_rank][0], QuestionAnswerParameters))[if self._history_rank > 0:
	self._history_rank -= 1
else:
	return False
]:
	i: 
	o: 68(t), 118(f)

nname: 373
n 373(None)[self.select(1, 'main_list')
]:
	i: 68(), 148(), 233(), 329(), 253(f)
	o: 

nname: 329
n 329(None)[self.main_items = self._gen_items()
self._current_rank = 0
self.set_items([], 'back_list')
]:
	i: 269()
	o: 373()

nname: 269
n 269(None)[louie_send('on_presentation_blur', sender=self)
for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
	louie_send(sig, sender=self, value=self[sig])
]:
	i: 253(t)
	o: 329()

nname: 253
n 253(self._history_rank == 0)[]:
	i: 203(f)
	o: 269(t), 373(f)

nname: 233
n 233(None)[louie_send('secret_code_explain_off', sender=self)
]:
	i: 203(t)
	o: 373()

nname: 203
n 203(isinstance(self._stack_history[self._history_rank][0], ParentalRatingConfigSetupItem))[]:
	i: 118(f)
	o: 233(t), 253(f)

nname: 148
n 148(None)[self._on_question = False
louie_send('secret_code_explain_on', sender=self)
louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
]:
	i: 118(t)
	o: 373()

nname: 118
n 118(isinstance(self._stack_history[self._history_rank][0], SecretCodeUserConfigSetupItem))[]:
	i: 0(f)
	o: 148(t), 203(f)

nname: 68
n 68(None)[if not config.user_config['security']['parental_control']:
	self._history_rank -= 3
self._on_question = False
]:
	i: 0(t)
	o: 373()

nname: 0
n 0(isinstance(self._stack_history[self._history_rank][0], QuestionAnswerParameters))[if self._history_rank > 0:
	self._history_rank -= 1
else:
	return False
]:
	i: 
	o: 68(t), 118(f)

nname: 373
n 373(None)[self.select(1, 'main_list')
]:
	i: 68(), 148(), 233(), 269(), 253(f)
	o: 

nname: 269
n 269(None)[louie_send('on_presentation_blur', sender=self)
for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
	louie_send(sig, sender=self, value=self[sig])
self.main_items = self._gen_items()
self._current_rank = 0
self.set_items([], 'back_list')
]:
	i: 253(t)
	o: 373()

nname: 253
n 253(self._history_rank == 0)[]:
	i: 203(f)
	o: 269(t), 373(f)

nname: 233
n 233(None)[louie_send('secret_code_explain_off', sender=self)
]:
	i: 203(t)
	o: 373()

nname: 203
n 203(isinstance(self._stack_history[self._history_rank][0], ParentalRatingConfigSetupItem))[]:
	i: 118(f)
	o: 233(t), 253(f)

nname: 148
n 148(None)[self._on_question = False
louie_send('secret_code_explain_on', sender=self)
louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
]:
	i: 118(t)
	o: 373()

nname: 118
n 118(isinstance(self._stack_history[self._history_rank][0], SecretCodeUserConfigSetupItem))[]:
	i: 0(f)
	o: 148(t), 203(f)

nname: 68
n 68(None)[if not config.user_config['security']['parental_control']:
	self._history_rank -= 3
self._on_question = False
]:
	i: 0(t)
	o: 373()

nname: 0
n 0(isinstance(self._stack_history[self._history_rank][0], QuestionAnswerParameters))[if self._history_rank > 0:
	self._history_rank -= 1
else:
	return False
]:
	i: 
	o: 68(t), 118(f)

nname: 0
n 0(None)[if self._history_rank > 0:
	self._history_rank -= 1
else:
	return False
if isinstance(self._stack_history[self._history_rank][0], QuestionAnswerParameters):
	if not config.user_config['security']['parental_control']:
		self._history_rank -= 3
	self._on_question = False
else:
	if isinstance(self._stack_history[self._history_rank][0], SecretCodeUserConfigSetupItem):
		self._on_question = False
		louie_send('secret_code_explain_on', sender=self)
		louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
	else:
		if isinstance(self._stack_history[self._history_rank][0], ParentalRatingConfigSetupItem):
			louie_send('secret_code_explain_off', sender=self)
		else:
			if self._history_rank == 0:
				louie_send('on_presentation_blur', sender=self)
				for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
					louie_send(sig, sender=self, value=self[sig])
				self.main_items = self._gen_items()
				self._current_rank = 0
				self.set_items([], 'back_list')
self.select(1, 'main_list')
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xa06a82c>}
nname: 101
n 101(None)[return None
]:
	i: 43(), 100()
	o: 

nname: 100
n 100(None)[]:
	i: 0&15(f)
	o: 101()

nname: 43
n 43(None)[self._set_options_list(None)
Task(louie_disconnect, receiver=self._scan_callback, signal='tv_scan_finished', sender='tv').start(0.01)
]:
	i: 0&15(t)
	o: 101()

nname: 0&15
n 0&15('tv' in config.plugins and isinstance(self.get_item_list('main_list').selected, FirstbootTNTScanSetupItem))[]:
	i: 
	o: 43(t), 100(f)

nname: 0&15
n 0&15(None)[if 'tv' in config.plugins and isinstance(self.get_item_list('main_list').selected, FirstbootTNTScanSetupItem):
	self._set_options_list(None)
	Task(louie_disconnect, receiver=self._scan_callback, signal='tv_scan_finished', sender='tv').start(0.01)
return None
]:
	i: 
	o: 

self.nodes: {'0&15': <unpyclib.structure.node instance at 0xb76129ec>}
nname: 0
n 0(None)[]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb761252c>}
nname: 6
n 6(None)[def __init__(self, **kw):
	self.main_items = self._gen_items()
	self.eventhandler = FirstBootMenuEventHandler(self)
	self._current_rank, it = self.main_items.next()
	self._history_rank = 0
	Menu.__init__(self, name='First Boot', choices=it, type='firstboot', **kw)
	self.available_choices = ['options_text', 'options0_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list', 'date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'aspect_ratio_list']
	for c in self.available_choices:
		def self._getitems_keywords[c](list_name=c):
			return self.get_item_list(list_name)

	louie_connect(receiver=self._scan_callback, signal='tv_scan_finished', sender='tv')
	def self._getitems_keywords['back_list']():
		return self.get_item_list('back_list')

	def self._getitems_keywords['next_list']():
		return self.get_item_list('next_list')

	def self._getitems_keywords['volume+']():
		return _('volume +')

	def self._getitems_keywords['volume-']():
		return _('volume -')

	def self._getitems_keywords['power']():
		return _('power')

	def self._getitems_keywords['option']():
		return _('option')

	def self._getitems_keywords['play_pause']():
		return _('play / pause')

	def self._getitems_keywords['record']():
		return _('record')

	def self._getitems_keywords['mute']():
		return _('mute')

	def self._getitems_keywords['home']():
		return _('home')

	def self._getitems_keywords['selection']():
		return _('selection')

	def self._getitems_keywords['stop']():
		return _('stop')

	def self._getitems_keywords['list']():
		return _('list')

	def self._getitems_keywords['info']():
		return _('info')

	def self._getitems_keywords['secret_code_explain']():
		return _('Enter your secret code for parental mode activation')

	self._changed_date = False
	self._stack_history = [None] * 11
	self._stack_history[self._history_rank] = it
	self.set_items([], 'back_list')
	self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
	self._set_options()
	return None

def _gen_items(self):
	yield (0, [FirstBootLanguageUserConfigSetupItem(name='Select your language', menu=self, domain='base', key='language', choices_list=config.HMI_BASE['osd_languages'])])
	self.set_items([Item(name=_('Back'), type_='setupitem', display_type='backitem')], 'back_list')
	self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
	yield (1, [ProductTourDummyItem(name=_('Welcome !'), type_='setupitem', menu=self)])
	louie_send('on_presentation_blur', sender=self)
	yield (2, [CountryUserConfigSetupItem(name='Select your country', menu=self, domain='base', key='country', choices_list=config.HMI_BASE['country'])])
	yield (3, [TimeZoneUserConfigSetupItem(name='Select your time zone', choices_list=TimeManager().get_timezones(), domain='base', key='timezone', type_='setup', menu=self)])
	yield (4, [DateUserConfigSetupItem(name='Enter date and time', menu=self, domain='', key='')])
	yield (5, [AspectRatioParametersSetupItem(name='Select TV physical aspect ratio', menu=self, domain='video', key='aspect_ratio', choices_list=config.HMI_VIDEO['aspect_ratio'])])
	louie_send('on_aspect_ratio_blur', sender=self)
	yield (6, [ParentalControlConfigSetupItem(reload_center=False, name='Parental control', menu=self, domain='security', key='parental_control', choices_list=(True, False), type_='setupitem')])
	yield (7, [ParentalRatingConfigSetupItem(name='Parental rating', menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)])
	yield (8, [SecretCodeUserConfigSetupItem(name='Select a secret code', menu=self, domain='security', key='secretcode')])
	self._on_question = False
	yield (9, [QuestionAnswerParameters(name='', type_='setupitem', check=False, end_action=self.select, end_action_args=(1, 'main_list'))])
	if 'tv' in config.plugins:
		yield (10, [FirstbootTNTScanSetupItem(name=_('Do you want to launch a scan now?'), menu=self, type_='setupitem')])

def disable(self):
	config.user_config['base']['firstboot'] = False
	config.user_config.save()

def is_reversed(self):
	if self._active_list in ('date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list'):
		pass
	return False

def _set_options(self):
	ac = self.available_choices
	for c in ac:
		self.set_items([], c, 0)
	self.active_list = ac[1]
	item_list = self.get_item_list('main_list')
	if isinstance(item_list.selected, QuestionAnswerParameters):
		if not self._on_question:
			louie_send('secret_code_explain_off', sender=self)
			louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
			self.set_items([], list_name=ac[1])
			item_list.selected.execute()
			self.active_list = 'main_list'
			self._on_question = True
		else:
			_[1], self.active_list, self._changed_date, list_name, browseable, val, self.get_item_list(list_name).cyclic, self._on_question = [], date_choices[0], True, zip(date_choices, browsed, d), zip(date_choices, browsed, d), zip(date_choices, browsed, d), True, False
			self._history_rank += 1
			self.select(1, 'main_list', ignore_gen=True)
		return None
	browsed = item_list.selected.browse()
	rank = item_list.selected_pos

def _set_options_list(self, selection, keep_selection=False):
	pass

def select(self, item, list_name=None, ignore_gen=False):
	if list_name == 'main_list':
		if not ignore_gen and self._current_rank == self._history_rank:
			try:
				self._current_rank, it = self.main_items.next()
			except StopIteration:
				self.disable()
				pygui_globs['menustack'].back_to_home()
			else:
				if isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control']:
					config.user_config['security']['parental_control'] = True
					self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
					for i in xrange(2):
						try:
							self._current_rank, it = self.main_items.next()
						except StopIteration:
							config.user_config['security']['parental_control'] = False
							self.disable()
							pygui_globs['menustack'].back_to_home()
						self._stack_history[self._current_rank] = it
					try:
						self._current_rank, it = self.main_items.next()
					except StopIteration:
						config.user_config['security']['parental_control'] = False
						self.disable()
						pygui_globs['menustack'].back_to_home()
					config.user_config['security']['parental_control'] = False
				self._history_rank = self._current_rank
				self._stack_history[self._history_rank] = it
				self.set_items(it)
				self._set_options()
		else:
			self.set_items(self._stack_history[self._history_rank])
			self._set_options()
	modified = Menu.select(self, item, list_name)

def focus_previous(self):
	if not self.active_list == 'options0_list':
		Menu.focus_previous(self)

def back_previous(self):
	if self._history_rank > 0:
		self._history_rank -= 1
	else:
		return False
	if isinstance(self._stack_history[self._history_rank][0], QuestionAnswerParameters):
		if not config.user_config['security']['parental_control']:
			self._history_rank -= 3
		self._on_question = False
	else:
		if isinstance(self._stack_history[self._history_rank][0], SecretCodeUserConfigSetupItem):
			self._on_question = False
			louie_send('secret_code_explain_on', sender=self)
			louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
		else:
			if isinstance(self._stack_history[self._history_rank][0], ParentalRatingConfigSetupItem):
				louie_send('secret_code_explain_off', sender=self)
			else:
				if self._history_rank == 0:
					louie_send('on_presentation_blur', sender=self)
					for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
						louie_send(sig, sender=self, value=self[sig])
					self.main_items = self._gen_items()
					self._current_rank = 0
					self.set_items([], 'back_list')
	self.select(1, 'main_list')

def _scan_callback(self, *args, **args):
	if 'tv' in config.plugins and isinstance(self.get_item_list('main_list').selected, FirstbootTNTScanSetupItem):
		self._set_options_list(None)
		Task(louie_disconnect, receiver=self._scan_callback, signal='tv_scan_finished', sender='tv').start(0.01)
	return None

def on_first_parental_control(self):
	pass

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb760ac2c>}
nname: 316
n 316(None)[from peewee.messages import send as louie_send
from peewee.messages import connect as louie_connect
from peewee.messages import disconnect as louie_disconnect
from peewee.notifier import Task
class ProductTourDummyItem(GenericContainer):
	def browse(self):
		return [ActionItem(name='', type_='setupitem', action=self.menu._set_options_list, args=(None,))]



class FirstBootMenu(Menu):
	def __init__(self, **kw):
		self.main_items = self._gen_items()
		self.eventhandler = FirstBootMenuEventHandler(self)
		self._current_rank, it = self.main_items.next()
		self._history_rank = 0
		Menu.__init__(self, name='First Boot', choices=it, type='firstboot', **kw)
		self.available_choices = ['options_text', 'options0_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list', 'date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'aspect_ratio_list']
		for c in self.available_choices:
			def self._getitems_keywords[c](list_name=c):
				return self.get_item_list(list_name)

		louie_connect(receiver=self._scan_callback, signal='tv_scan_finished', sender='tv')
		def self._getitems_keywords['back_list']():
			return self.get_item_list('back_list')

		def self._getitems_keywords['next_list']():
			return self.get_item_list('next_list')

		def self._getitems_keywords['volume+']():
			return _('volume +')

		def self._getitems_keywords['volume-']():
			return _('volume -')

		def self._getitems_keywords['power']():
			return _('power')

		def self._getitems_keywords['option']():
			return _('option')

		def self._getitems_keywords['play_pause']():
			return _('play / pause')

		def self._getitems_keywords['record']():
			return _('record')

		def self._getitems_keywords['mute']():
			return _('mute')

		def self._getitems_keywords['home']():
			return _('home')

		def self._getitems_keywords['selection']():
			return _('selection')

		def self._getitems_keywords['stop']():
			return _('stop')

		def self._getitems_keywords['list']():
			return _('list')

		def self._getitems_keywords['info']():
			return _('info')

		def self._getitems_keywords['secret_code_explain']():
			return _('Enter your secret code for parental mode activation')

		self._changed_date = False
		self._stack_history = [None] * 11
		self._stack_history[self._history_rank] = it
		self.set_items([], 'back_list')
		self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
		self._set_options()
		return None

	def _gen_items(self):
		yield (0, [FirstBootLanguageUserConfigSetupItem(name='Select your language', menu=self, domain='base', key='language', choices_list=config.HMI_BASE['osd_languages'])])
		self.set_items([Item(name=_('Back'), type_='setupitem', display_type='backitem')], 'back_list')
		self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
		yield (1, [ProductTourDummyItem(name=_('Welcome !'), type_='setupitem', menu=self)])
		louie_send('on_presentation_blur', sender=self)
		yield (2, [CountryUserConfigSetupItem(name='Select your country', menu=self, domain='base', key='country', choices_list=config.HMI_BASE['country'])])
		yield (3, [TimeZoneUserConfigSetupItem(name='Select your time zone', choices_list=TimeManager().get_timezones(), domain='base', key='timezone', type_='setup', menu=self)])
		yield (4, [DateUserConfigSetupItem(name='Enter date and time', menu=self, domain='', key='')])
		yield (5, [AspectRatioParametersSetupItem(name='Select TV physical aspect ratio', menu=self, domain='video', key='aspect_ratio', choices_list=config.HMI_VIDEO['aspect_ratio'])])
		louie_send('on_aspect_ratio_blur', sender=self)
		yield (6, [ParentalControlConfigSetupItem(reload_center=False, name='Parental control', menu=self, domain='security', key='parental_control', choices_list=(True, False), type_='setupitem')])
		yield (7, [ParentalRatingConfigSetupItem(name='Parental rating', menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)])
		yield (8, [SecretCodeUserConfigSetupItem(name='Select a secret code', menu=self, domain='security', key='secretcode')])
		self._on_question = False
		yield (9, [QuestionAnswerParameters(name='', type_='setupitem', check=False, end_action=self.select, end_action_args=(1, 'main_list'))])
		if 'tv' in config.plugins:
			yield (10, [FirstbootTNTScanSetupItem(name=_('Do you want to launch a scan now?'), menu=self, type_='setupitem')])

	def disable(self):
		config.user_config['base']['firstboot'] = False
		config.user_config.save()

	def is_reversed(self):
		if self._active_list in ('date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list'):
			pass
		return False

	def _set_options(self):
		ac = self.available_choices
		for c in ac:
			self.set_items([], c, 0)
		self.active_list = ac[1]
		item_list = self.get_item_list('main_list')
		if isinstance(item_list.selected, QuestionAnswerParameters):
			if not self._on_question:
				louie_send('secret_code_explain_off', sender=self)
				louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
				self.set_items([], list_name=ac[1])
				item_list.selected.execute()
				self.active_list = 'main_list'
				self._on_question = True
			else:
				_[1], self.active_list, self._changed_date, list_name, browseable, val, self.get_item_list(list_name).cyclic, self._on_question = [], date_choices[0], True, zip(date_choices, browsed, d), zip(date_choices, browsed, d), zip(date_choices, browsed, d), True, False
				self._history_rank += 1
				self.select(1, 'main_list', ignore_gen=True)
			return None
		browsed = item_list.selected.browse()
		rank = item_list.selected_pos

	def _set_options_list(self, selection, keep_selection=False):
		pass

	def select(self, item, list_name=None, ignore_gen=False):
		if list_name == 'main_list':
			if not ignore_gen and self._current_rank == self._history_rank:
				try:
					self._current_rank, it = self.main_items.next()
				except StopIteration:
					self.disable()
					pygui_globs['menustack'].back_to_home()
				else:
					if isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control']:
						config.user_config['security']['parental_control'] = True
						self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
						for i in xrange(2):
							try:
								self._current_rank, it = self.main_items.next()
							except StopIteration:
								config.user_config['security']['parental_control'] = False
								self.disable()
								pygui_globs['menustack'].back_to_home()
							self._stack_history[self._current_rank] = it
						try:
							self._current_rank, it = self.main_items.next()
						except StopIteration:
							config.user_config['security']['parental_control'] = False
							self.disable()
							pygui_globs['menustack'].back_to_home()
						config.user_config['security']['parental_control'] = False
					self._history_rank = self._current_rank
					self._stack_history[self._history_rank] = it
					self.set_items(it)
					self._set_options()
			else:
				self.set_items(self._stack_history[self._history_rank])
				self._set_options()
		modified = Menu.select(self, item, list_name)

	def focus_previous(self):
		if not self.active_list == 'options0_list':
			Menu.focus_previous(self)

	def back_previous(self):
		if self._history_rank > 0:
			self._history_rank -= 1
		else:
			return False
		if isinstance(self._stack_history[self._history_rank][0], QuestionAnswerParameters):
			if not config.user_config['security']['parental_control']:
				self._history_rank -= 3
			self._on_question = False
		else:
			if isinstance(self._stack_history[self._history_rank][0], SecretCodeUserConfigSetupItem):
				self._on_question = False
				louie_send('secret_code_explain_on', sender=self)
				louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
			else:
				if isinstance(self._stack_history[self._history_rank][0], ParentalRatingConfigSetupItem):
					louie_send('secret_code_explain_off', sender=self)
				else:
					if self._history_rank == 0:
						louie_send('on_presentation_blur', sender=self)
						for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
							louie_send(sig, sender=self, value=self[sig])
						self.main_items = self._gen_items()
						self._current_rank = 0
						self.set_items([], 'back_list')
		self.select(1, 'main_list')

	def _scan_callback(self, *args, **args):
		if 'tv' in config.plugins and isinstance(self.get_item_list('main_list').selected, FirstbootTNTScanSetupItem):
			self._set_options_list(None)
			Task(louie_disconnect, receiver=self._scan_callback, signal='tv_scan_finished', sender='tv').start(0.01)
		return None

	def on_first_parental_control(self):
		pass



]:
	i: 295(), 315()
	o: 

nname: 315
n 315(None)[]:
	i: 0(f)
	o: 316()

nname: 295
n 295(None)[from pygui.item.parameters.tv.tvsetup import FirstbootTNTScanSetupItem
]:
	i: 0(t)
	o: 316()

nname: 0
n 0('tv' in config.plugins)[from __future__ import absolute_import
__all__ = ['FirstBootMenu']
import pygui.config as config
from .core import Menu
from pygui.eventmanager.menus import FirstBootMenuEventHandler
from pygui.item.core import Item, ActionItem
from pygui.item.containers import GenericContainer
from pygui.item.parameters.generalsetup.i18n import CountryUserConfigSetupItem, OSDLanguageUserConfigSetupItem, FirstBootLanguageUserConfigSetupItem
from pygui.item.parameters.generalsetup.datesetup import DateUserConfigSetupItem, TimeZoneUserConfigSetupItem
from pygui.item.parameters.generalsetup.securitysetup import SecretCodeUserConfigSetupItem, ParentalControlConfigSetupItem, ParentalRatingConfigSetupItem, QuestionAnswerParameters
from pygui.item.parameters.videophoto.video import AspectRatioParametersSetupItem
from pygui.shared import pygui_globs
from pygui.facilities import codemapping
from pygui.facilities.l10n import get_date_format, get_time_format
from peewee.dateutils import TimeManager
]:
	i: 
	o: 295(t), 315(f)

nname: 0
n 0(None)[from __future__ import absolute_import
__all__ = ['FirstBootMenu']
import pygui.config as config
from .core import Menu
from pygui.eventmanager.menus import FirstBootMenuEventHandler
from pygui.item.core import Item, ActionItem
from pygui.item.containers import GenericContainer
from pygui.item.parameters.generalsetup.i18n import CountryUserConfigSetupItem, OSDLanguageUserConfigSetupItem, FirstBootLanguageUserConfigSetupItem
from pygui.item.parameters.generalsetup.datesetup import DateUserConfigSetupItem, TimeZoneUserConfigSetupItem
from pygui.item.parameters.generalsetup.securitysetup import SecretCodeUserConfigSetupItem, ParentalControlConfigSetupItem, ParentalRatingConfigSetupItem, QuestionAnswerParameters
from pygui.item.parameters.videophoto.video import AspectRatioParametersSetupItem
from pygui.shared import pygui_globs
from pygui.facilities import codemapping
from pygui.facilities.l10n import get_date_format, get_time_format
from peewee.dateutils import TimeManager
if 'tv' in config.plugins:
	from pygui.item.parameters.tv.tvsetup import FirstbootTNTScanSetupItem
from peewee.messages import send as louie_send
from peewee.messages import connect as louie_connect
from peewee.messages import disconnect as louie_disconnect
from peewee.notifier import Task
class ProductTourDummyItem(GenericContainer):
	def browse(self):
		return [ActionItem(name='', type_='setupitem', action=self.menu._set_options_list, args=(None,))]



class FirstBootMenu(Menu):
	def __init__(self, **kw):
		self.main_items = self._gen_items()
		self.eventhandler = FirstBootMenuEventHandler(self)
		self._current_rank, it = self.main_items.next()
		self._history_rank = 0
		Menu.__init__(self, name='First Boot', choices=it, type='firstboot', **kw)
		self.available_choices = ['options_text', 'options0_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list', 'date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'aspect_ratio_list']
		for c in self.available_choices:
			def self._getitems_keywords[c](list_name=c):
				return self.get_item_list(list_name)

		louie_connect(receiver=self._scan_callback, signal='tv_scan_finished', sender='tv')
		def self._getitems_keywords['back_list']():
			return self.get_item_list('back_list')

		def self._getitems_keywords['next_list']():
			return self.get_item_list('next_list')

		def self._getitems_keywords['volume+']():
			return _('volume +')

		def self._getitems_keywords['volume-']():
			return _('volume -')

		def self._getitems_keywords['power']():
			return _('power')

		def self._getitems_keywords['option']():
			return _('option')

		def self._getitems_keywords['play_pause']():
			return _('play / pause')

		def self._getitems_keywords['record']():
			return _('record')

		def self._getitems_keywords['mute']():
			return _('mute')

		def self._getitems_keywords['home']():
			return _('home')

		def self._getitems_keywords['selection']():
			return _('selection')

		def self._getitems_keywords['stop']():
			return _('stop')

		def self._getitems_keywords['list']():
			return _('list')

		def self._getitems_keywords['info']():
			return _('info')

		def self._getitems_keywords['secret_code_explain']():
			return _('Enter your secret code for parental mode activation')

		self._changed_date = False
		self._stack_history = [None] * 11
		self._stack_history[self._history_rank] = it
		self.set_items([], 'back_list')
		self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
		self._set_options()
		return None

	def _gen_items(self):
		yield (0, [FirstBootLanguageUserConfigSetupItem(name='Select your language', menu=self, domain='base', key='language', choices_list=config.HMI_BASE['osd_languages'])])
		self.set_items([Item(name=_('Back'), type_='setupitem', display_type='backitem')], 'back_list')
		self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
		yield (1, [ProductTourDummyItem(name=_('Welcome !'), type_='setupitem', menu=self)])
		louie_send('on_presentation_blur', sender=self)
		yield (2, [CountryUserConfigSetupItem(name='Select your country', menu=self, domain='base', key='country', choices_list=config.HMI_BASE['country'])])
		yield (3, [TimeZoneUserConfigSetupItem(name='Select your time zone', choices_list=TimeManager().get_timezones(), domain='base', key='timezone', type_='setup', menu=self)])
		yield (4, [DateUserConfigSetupItem(name='Enter date and time', menu=self, domain='', key='')])
		yield (5, [AspectRatioParametersSetupItem(name='Select TV physical aspect ratio', menu=self, domain='video', key='aspect_ratio', choices_list=config.HMI_VIDEO['aspect_ratio'])])
		louie_send('on_aspect_ratio_blur', sender=self)
		yield (6, [ParentalControlConfigSetupItem(reload_center=False, name='Parental control', menu=self, domain='security', key='parental_control', choices_list=(True, False), type_='setupitem')])
		yield (7, [ParentalRatingConfigSetupItem(name='Parental rating', menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)])
		yield (8, [SecretCodeUserConfigSetupItem(name='Select a secret code', menu=self, domain='security', key='secretcode')])
		self._on_question = False
		yield (9, [QuestionAnswerParameters(name='', type_='setupitem', check=False, end_action=self.select, end_action_args=(1, 'main_list'))])
		if 'tv' in config.plugins:
			yield (10, [FirstbootTNTScanSetupItem(name=_('Do you want to launch a scan now?'), menu=self, type_='setupitem')])

	def disable(self):
		config.user_config['base']['firstboot'] = False
		config.user_config.save()

	def is_reversed(self):
		if self._active_list in ('date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list'):
			pass
		return False

	def _set_options(self):
		ac = self.available_choices
		for c in ac:
			self.set_items([], c, 0)
		self.active_list = ac[1]
		item_list = self.get_item_list('main_list')
		if isinstance(item_list.selected, QuestionAnswerParameters):
			if not self._on_question:
				louie_send('secret_code_explain_off', sender=self)
				louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
				self.set_items([], list_name=ac[1])
				item_list.selected.execute()
				self.active_list = 'main_list'
				self._on_question = True
			else:
				_[1], self.active_list, self._changed_date, list_name, browseable, val, self.get_item_list(list_name).cyclic, self._on_question = [], date_choices[0], True, zip(date_choices, browsed, d), zip(date_choices, browsed, d), zip(date_choices, browsed, d), True, False
				self._history_rank += 1
				self.select(1, 'main_list', ignore_gen=True)
			return None
		browsed = item_list.selected.browse()
		rank = item_list.selected_pos

	def _set_options_list(self, selection, keep_selection=False):
		pass

	def select(self, item, list_name=None, ignore_gen=False):
		if list_name == 'main_list':
			if not ignore_gen and self._current_rank == self._history_rank:
				try:
					self._current_rank, it = self.main_items.next()
				except StopIteration:
					self.disable()
					pygui_globs['menustack'].back_to_home()
				else:
					if isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control']:
						config.user_config['security']['parental_control'] = True
						self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
						for i in xrange(2):
							try:
								self._current_rank, it = self.main_items.next()
							except StopIteration:
								config.user_config['security']['parental_control'] = False
								self.disable()
								pygui_globs['menustack'].back_to_home()
							self._stack_history[self._current_rank] = it
						try:
							self._current_rank, it = self.main_items.next()
						except StopIteration:
							config.user_config['security']['parental_control'] = False
							self.disable()
							pygui_globs['menustack'].back_to_home()
						config.user_config['security']['parental_control'] = False
					self._history_rank = self._current_rank
					self._stack_history[self._history_rank] = it
					self.set_items(it)
					self._set_options()
			else:
				self.set_items(self._stack_history[self._history_rank])
				self._set_options()
		modified = Menu.select(self, item, list_name)

	def focus_previous(self):
		if not self.active_list == 'options0_list':
			Menu.focus_previous(self)

	def back_previous(self):
		if self._history_rank > 0:
			self._history_rank -= 1
		else:
			return False
		if isinstance(self._stack_history[self._history_rank][0], QuestionAnswerParameters):
			if not config.user_config['security']['parental_control']:
				self._history_rank -= 3
			self._on_question = False
		else:
			if isinstance(self._stack_history[self._history_rank][0], SecretCodeUserConfigSetupItem):
				self._on_question = False
				louie_send('secret_code_explain_on', sender=self)
				louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
			else:
				if isinstance(self._stack_history[self._history_rank][0], ParentalRatingConfigSetupItem):
					louie_send('secret_code_explain_off', sender=self)
				else:
					if self._history_rank == 0:
						louie_send('on_presentation_blur', sender=self)
						for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
							louie_send(sig, sender=self, value=self[sig])
						self.main_items = self._gen_items()
						self._current_rank = 0
						self.set_items([], 'back_list')
		self.select(1, 'main_list')

	def _scan_callback(self, *args, **args):
		if 'tv' in config.plugins and isinstance(self.get_item_list('main_list').selected, FirstbootTNTScanSetupItem):
			self._set_options_list(None)
			Task(louie_disconnect, receiver=self._scan_callback, signal='tv_scan_finished', sender='tv').start(0.01)
		return None

	def on_first_parental_control(self):
		pass



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760170c>}
from __future__ import absolute_import
__all__ = ['FirstBootMenu']
import pygui.config as config
from .core import Menu
from pygui.eventmanager.menus import FirstBootMenuEventHandler
from pygui.item.core import Item, ActionItem
from pygui.item.containers import GenericContainer
from pygui.item.parameters.generalsetup.i18n import CountryUserConfigSetupItem, OSDLanguageUserConfigSetupItem, FirstBootLanguageUserConfigSetupItem
from pygui.item.parameters.generalsetup.datesetup import DateUserConfigSetupItem, TimeZoneUserConfigSetupItem
from pygui.item.parameters.generalsetup.securitysetup import SecretCodeUserConfigSetupItem, ParentalControlConfigSetupItem, ParentalRatingConfigSetupItem, QuestionAnswerParameters
from pygui.item.parameters.videophoto.video import AspectRatioParametersSetupItem
from pygui.shared import pygui_globs
from pygui.facilities import codemapping
from pygui.facilities.l10n import get_date_format, get_time_format
from peewee.dateutils import TimeManager
if 'tv' in config.plugins:
	from pygui.item.parameters.tv.tvsetup import FirstbootTNTScanSetupItem
from peewee.messages import send as louie_send
from peewee.messages import connect as louie_connect
from peewee.messages import disconnect as louie_disconnect
from peewee.notifier import Task
class ProductTourDummyItem(GenericContainer):
	def browse(self):
		return [ActionItem(name='', type_='setupitem', action=self.menu._set_options_list, args=(None,))]



class FirstBootMenu(Menu):
	def __init__(self, **kw):
		self.main_items = self._gen_items()
		self.eventhandler = FirstBootMenuEventHandler(self)
		self._current_rank, it = self.main_items.next()
		self._history_rank = 0
		Menu.__init__(self, name='First Boot', choices=it, type='firstboot', **kw)
		self.available_choices = ['options_text', 'options0_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list', 'date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'aspect_ratio_list']
		for c in self.available_choices:
			def self._getitems_keywords[c](list_name=c):
				return self.get_item_list(list_name)

		louie_connect(receiver=self._scan_callback, signal='tv_scan_finished', sender='tv')
		def self._getitems_keywords['back_list']():
			return self.get_item_list('back_list')

		def self._getitems_keywords['next_list']():
			return self.get_item_list('next_list')

		def self._getitems_keywords['volume+']():
			return _('volume +')

		def self._getitems_keywords['volume-']():
			return _('volume -')

		def self._getitems_keywords['power']():
			return _('power')

		def self._getitems_keywords['option']():
			return _('option')

		def self._getitems_keywords['play_pause']():
			return _('play / pause')

		def self._getitems_keywords['record']():
			return _('record')

		def self._getitems_keywords['mute']():
			return _('mute')

		def self._getitems_keywords['home']():
			return _('home')

		def self._getitems_keywords['selection']():
			return _('selection')

		def self._getitems_keywords['stop']():
			return _('stop')

		def self._getitems_keywords['list']():
			return _('list')

		def self._getitems_keywords['info']():
			return _('info')

		def self._getitems_keywords['secret_code_explain']():
			return _('Enter your secret code for parental mode activation')

		self._changed_date = False
		self._stack_history = [None] * 11
		self._stack_history[self._history_rank] = it
		self.set_items([], 'back_list')
		self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
		self._set_options()
		return None

	def _gen_items(self):
		yield (0, [FirstBootLanguageUserConfigSetupItem(name='Select your language', menu=self, domain='base', key='language', choices_list=config.HMI_BASE['osd_languages'])])
		self.set_items([Item(name=_('Back'), type_='setupitem', display_type='backitem')], 'back_list')
		self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
		yield (1, [ProductTourDummyItem(name=_('Welcome !'), type_='setupitem', menu=self)])
		louie_send('on_presentation_blur', sender=self)
		yield (2, [CountryUserConfigSetupItem(name='Select your country', menu=self, domain='base', key='country', choices_list=config.HMI_BASE['country'])])
		yield (3, [TimeZoneUserConfigSetupItem(name='Select your time zone', choices_list=TimeManager().get_timezones(), domain='base', key='timezone', type_='setup', menu=self)])
		yield (4, [DateUserConfigSetupItem(name='Enter date and time', menu=self, domain='', key='')])
		yield (5, [AspectRatioParametersSetupItem(name='Select TV physical aspect ratio', menu=self, domain='video', key='aspect_ratio', choices_list=config.HMI_VIDEO['aspect_ratio'])])
		louie_send('on_aspect_ratio_blur', sender=self)
		yield (6, [ParentalControlConfigSetupItem(reload_center=False, name='Parental control', menu=self, domain='security', key='parental_control', choices_list=(True, False), type_='setupitem')])
		yield (7, [ParentalRatingConfigSetupItem(name='Parental rating', menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)])
		yield (8, [SecretCodeUserConfigSetupItem(name='Select a secret code', menu=self, domain='security', key='secretcode')])
		self._on_question = False
		yield (9, [QuestionAnswerParameters(name='', type_='setupitem', check=False, end_action=self.select, end_action_args=(1, 'main_list'))])
		if 'tv' in config.plugins:
			yield (10, [FirstbootTNTScanSetupItem(name=_('Do you want to launch a scan now?'), menu=self, type_='setupitem')])

	def disable(self):
		config.user_config['base']['firstboot'] = False
		config.user_config.save()

	def is_reversed(self):
		if self._active_list in ('date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list'):
			pass
		return False

	def _set_options(self):
		ac = self.available_choices
		for c in ac:
			self.set_items([], c, 0)
		self.active_list = ac[1]
		item_list = self.get_item_list('main_list')
		if isinstance(item_list.selected, QuestionAnswerParameters):
			if not self._on_question:
				louie_send('secret_code_explain_off', sender=self)
				louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
				self.set_items([], list_name=ac[1])
				item_list.selected.execute()
				self.active_list = 'main_list'
				self._on_question = True
			else:
				_[1], self.active_list, self._changed_date, list_name, browseable, val, self.get_item_list(list_name).cyclic, self._on_question = [], date_choices[0], True, zip(date_choices, browsed, d), zip(date_choices, browsed, d), zip(date_choices, browsed, d), True, False
				self._history_rank += 1
				self.select(1, 'main_list', ignore_gen=True)
			return None
		browsed = item_list.selected.browse()
		rank = item_list.selected_pos

	def _set_options_list(self, selection, keep_selection=False):
		pass

	def select(self, item, list_name=None, ignore_gen=False):
		if list_name == 'main_list':
			if not ignore_gen and self._current_rank == self._history_rank:
				try:
					self._current_rank, it = self.main_items.next()
				except StopIteration:
					self.disable()
					pygui_globs['menustack'].back_to_home()
				else:
					if isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control']:
						config.user_config['security']['parental_control'] = True
						self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
						for i in xrange(2):
							try:
								self._current_rank, it = self.main_items.next()
							except StopIteration:
								config.user_config['security']['parental_control'] = False
								self.disable()
								pygui_globs['menustack'].back_to_home()
							self._stack_history[self._current_rank] = it
						try:
							self._current_rank, it = self.main_items.next()
						except StopIteration:
							config.user_config['security']['parental_control'] = False
							self.disable()
							pygui_globs['menustack'].back_to_home()
						config.user_config['security']['parental_control'] = False
					self._history_rank = self._current_rank
					self._stack_history[self._history_rank] = it
					self.set_items(it)
					self._set_options()
			else:
				self.set_items(self._stack_history[self._history_rank])
				self._set_options()
		modified = Menu.select(self, item, list_name)

	def focus_previous(self):
		if not self.active_list == 'options0_list':
			Menu.focus_previous(self)

	def back_previous(self):
		if self._history_rank > 0:
			self._history_rank -= 1
		else:
			return False
		if isinstance(self._stack_history[self._history_rank][0], QuestionAnswerParameters):
			if not config.user_config['security']['parental_control']:
				self._history_rank -= 3
			self._on_question = False
		else:
			if isinstance(self._stack_history[self._history_rank][0], SecretCodeUserConfigSetupItem):
				self._on_question = False
				louie_send('secret_code_explain_on', sender=self)
				louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
			else:
				if isinstance(self._stack_history[self._history_rank][0], ParentalRatingConfigSetupItem):
					louie_send('secret_code_explain_off', sender=self)
				else:
					if self._history_rank == 0:
						louie_send('on_presentation_blur', sender=self)
						for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
							louie_send(sig, sender=self, value=self[sig])
						self.main_items = self._gen_items()
						self._current_rank = 0
						self.set_items([], 'back_list')
		self.select(1, 'main_list')

	def _scan_callback(self, *args, **args):
		if 'tv' in config.plugins and isinstance(self.get_item_list('main_list').selected, FirstbootTNTScanSetupItem):
			self._set_options_list(None)
			Task(louie_disconnect, receiver=self._scan_callback, signal='tv_scan_finished', sender='tv').start(0.01)
		return None

	def on_first_parental_control(self):
		pass



