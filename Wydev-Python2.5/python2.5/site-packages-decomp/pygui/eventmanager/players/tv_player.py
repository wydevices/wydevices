# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 0
n 0(None)[self.player.action_vertical(1)
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb765c14c>}
nname: 0
n 0(None)[self.player.action_vertical(-1)
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb765c36c>}
nname: 0
n 0(None)[self.player.action_rec()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7656fac>}
nname: 0
n 0(None)[self.player._error_spawner()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7656f6c>}
nname: 0
n 0(None)[self.player.action_info()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7656fac>}
nname: 0
n 0(None)[self.player.action_stop()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7656f6c>}
nname: 43
n 43(None)[return True
]:
	i: 12(), 29()
	o: 

nname: 29
n 29(None)[self.player.action_play_pause()
]:
	i: 0(f)
	o: 43()

nname: 12
n 12(None)[self.player.prompt_for_pin()
]:
	i: 0(t)
	o: 43()

nname: 0
n 0(self.player.shielded)[]:
	i: 
	o: 12(t), 29(f)

nname: 0
n 0(None)[if self.player.shielded:
	self.player.prompt_for_pin()
else:
	self.player.action_play_pause()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb765c48c>}
nname: 0
n 0(None)[from pygui.menu.menu import ActionMenu
sel = self.player.selected
context = dict(menu=self.player, selected=sel, parent=None)
ActionMenu(context, category='tv_player', type_='playeraction', universe=self.player.universe).show()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb765cc6c>}
nname: 0
n 0(None)[self.player.toggle_menu()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7656fac>}
nname: 0
n 0(None)[self.player.action_info(refresh=True)
return VideoEventHandler.event_wheel_rwd(self, event)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb765c46c>}
nname: 0
n 0(None)[self.player.action_info(refresh=True)
return VideoEventHandler.event_wheel_fwd(self, event)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb765c32c>}
nname: 6
n 6(None)[def event_up(self, event):
	self.player.action_vertical(1)
	return True

def event_down(self, event):
	self.player.action_vertical(-1)
	return True

def event_record(self, event):
	self.player.action_rec()
	return True

def event_marker(self, event):
	self.player._error_spawner()
	return True

def event_info(self, event):
	self.player.action_info()
	return True

def event_stop(self, event):
	self.player.action_stop()
	return True

def event_select(self, event):
	if self.player.shielded:
		self.player.prompt_for_pin()
	else:
		self.player.action_play_pause()
	return True

def event_action_menu(self, event):
	from pygui.menu.menu import ActionMenu
	sel = self.player.selected
	context = dict(menu=self.player, selected=sel, parent=None)
	ActionMenu(context, category='tv_player', type_='playeraction', universe=self.player.universe).show()
	return True

def event_toggle_menu(self, event):
	self.player.toggle_menu()
	return True

def event_wheel_rwd(self, event):
	self.player.action_info(refresh=True)
	return VideoEventHandler.event_wheel_rwd(self, event)

def event_wheel_fwd(self, event):
	self.player.action_info(refresh=True)
	return VideoEventHandler.event_wheel_fwd(self, event)

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb7656cac>}
nname: 0
n 0(None)[from __future__ import absolute_import
from pygui.eventmanager.players import VideoEventHandler
class TVEventHandler(VideoEventHandler):
	def event_up(self, event):
		self.player.action_vertical(1)
		return True

	def event_down(self, event):
		self.player.action_vertical(-1)
		return True

	def event_record(self, event):
		self.player.action_rec()
		return True

	def event_marker(self, event):
		self.player._error_spawner()
		return True

	def event_info(self, event):
		self.player.action_info()
		return True

	def event_stop(self, event):
		self.player.action_stop()
		return True

	def event_select(self, event):
		if self.player.shielded:
			self.player.prompt_for_pin()
		else:
			self.player.action_play_pause()
		return True

	def event_action_menu(self, event):
		from pygui.menu.menu import ActionMenu
		sel = self.player.selected
		context = dict(menu=self.player, selected=sel, parent=None)
		ActionMenu(context, category='tv_player', type_='playeraction', universe=self.player.universe).show()
		return True

	def event_toggle_menu(self, event):
		self.player.toggle_menu()
		return True

	def event_wheel_rwd(self, event):
		self.player.action_info(refresh=True)
		return VideoEventHandler.event_wheel_rwd(self, event)

	def event_wheel_fwd(self, event):
		self.player.action_info(refresh=True)
		return VideoEventHandler.event_wheel_fwd(self, event)



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb764ffcc>}
from __future__ import absolute_import
from pygui.eventmanager.players import VideoEventHandler
class TVEventHandler(VideoEventHandler):
	def event_up(self, event):
		self.player.action_vertical(1)
		return True

	def event_down(self, event):
		self.player.action_vertical(-1)
		return True

	def event_record(self, event):
		self.player.action_rec()
		return True

	def event_marker(self, event):
		self.player._error_spawner()
		return True

	def event_info(self, event):
		self.player.action_info()
		return True

	def event_stop(self, event):
		self.player.action_stop()
		return True

	def event_select(self, event):
		if self.player.shielded:
			self.player.prompt_for_pin()
		else:
			self.player.action_play_pause()
		return True

	def event_action_menu(self, event):
		from pygui.menu.menu import ActionMenu
		sel = self.player.selected
		context = dict(menu=self.player, selected=sel, parent=None)
		ActionMenu(context, category='tv_player', type_='playeraction', universe=self.player.universe).show()
		return True

	def event_toggle_menu(self, event):
		self.player.toggle_menu()
		return True

	def event_wheel_rwd(self, event):
		self.player.action_info(refresh=True)
		return VideoEventHandler.event_wheel_rwd(self, event)

	def event_wheel_fwd(self, event):
		self.player.action_info(refresh=True)
		return VideoEventHandler.event_wheel_fwd(self, event)



