# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 0
n 0(None)[self.player.action_info()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763d22c>}
nname: 0
n 0(None)[self.player.action_up()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763d48c>}
nname: 0
n 0(None)[self.player.action_down()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763d3ac>}
nname: 0
n 0(None)[self.player.action_left()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763d2ac>}
nname: 0
n 0(None)[self.player.action_right()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763d36c>}
nname: 0
n 0(None)[self.player.action_select()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb763d38c>}
nname: 221
n 221(None)[return True
]:
	i: 184(), 204()
	o: 

nname: 204
n 204(None)[louie_send('not_empty_options', sender=s)
]:
	i: 93(t)
	o: 221()

nname: 184
n 184(None)[louie_send('empty_options', sender=s)
]:
	i: 93(f)
	o: 221()

nname: 93
n 93(s.get_item_list('options_list'))[context = dict(menu=self.player, selected=sel, parent=parent)
s = ActionMenu(context, type_='playeraction', category='dvdplayer', universe=self.player.universe)
s.show()
]:
	i: 59(), 83()
	o: 184(f), 204(t)

nname: 83
n 83(None)[parent = sel.parent
]:
	i: 0&46(f)
	o: 93()

nname: 59
n 59(None)[parent = self.player._history[-1]['selected']
]:
	i: 0&46(t)
	o: 93()

nname: 0&46
n 0&46(sel is None and self.player._history)[from pygui.menu.menu import ActionMenu
sel = self.player.selected
parent = None
]:
	i: 
	o: 59(t), 83(f)

nname: 0&46
n 0&46(None)[from pygui.menu.menu import ActionMenu
sel = self.player.selected
parent = None
if sel is None and self.player._history:
	parent = self.player._history[-1]['selected']
else:
	parent = sel.parent
context = dict(menu=self.player, selected=sel, parent=parent)
s = ActionMenu(context, type_='playeraction', category='dvdplayer', universe=self.player.universe)
s.show()
if not s.get_item_list('options_list'):
	louie_send('empty_options', sender=s)
else:
	louie_send('not_empty_options', sender=s)
return True
]:
	i: 
	o: 

self.nodes: {'0&46': <unpyclib.structure.node instance at 0xb763dcac>}
nname: 6
n 6(None)[forward_steps = f_list([2, 4, 8, 16, 25, 50, 100, 400])
backward_steps = f_list([-2, -4, -8, -16, -25, -50, -100, -400])
slow_motion = f_list([0.25, 0.5])
reverse_slow_motion = f_list()
def event_info(self, event):
	self.player.action_info()
	return True

def event_up(self, event):
	self.player.action_up()
	return True

def event_down(self, event):
	self.player.action_down()
	return True

def event_left(self, event):
	self.player.action_left()
	return True

def event_right(self, event):
	self.player.action_right()
	return True

def event_select(self, event):
	self.player.action_select()
	return True

def event_action_menu(self, event):
	from pygui.menu.menu import ActionMenu
	sel = self.player.selected
	parent = None
	if sel is None and self.player._history:
		parent = self.player._history[-1]['selected']
	else:
		parent = sel.parent
	context = dict(menu=self.player, selected=sel, parent=parent)
	s = ActionMenu(context, type_='playeraction', category='dvdplayer', universe=self.player.universe)
	s.show()
	if not s.get_item_list('options_list'):
		louie_send('empty_options', sender=s)
	else:
		louie_send('not_empty_options', sender=s)
	return True

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb76369ac>}
nname: 0
n 0(None)[from __future__ import absolute_import
from peewee.messages import send as louie_send
from peewee.ranges import f_list
from pygui.eventmanager.players import VideoEventHandler
class DVDEventHandler(VideoEventHandler):
	forward_steps = f_list([2, 4, 8, 16, 25, 50, 100, 400])
	backward_steps = f_list([-2, -4, -8, -16, -25, -50, -100, -400])
	slow_motion = f_list([0.25, 0.5])
	reverse_slow_motion = f_list()
	def event_info(self, event):
		self.player.action_info()
		return True

	def event_up(self, event):
		self.player.action_up()
		return True

	def event_down(self, event):
		self.player.action_down()
		return True

	def event_left(self, event):
		self.player.action_left()
		return True

	def event_right(self, event):
		self.player.action_right()
		return True

	def event_select(self, event):
		self.player.action_select()
		return True

	def event_action_menu(self, event):
		from pygui.menu.menu import ActionMenu
		sel = self.player.selected
		parent = None
		if sel is None and self.player._history:
			parent = self.player._history[-1]['selected']
		else:
			parent = sel.parent
		context = dict(menu=self.player, selected=sel, parent=parent)
		s = ActionMenu(context, type_='playeraction', category='dvdplayer', universe=self.player.universe)
		s.show()
		if not s.get_item_list('options_list'):
			louie_send('empty_options', sender=s)
		else:
			louie_send('not_empty_options', sender=s)
		return True



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7630aec>}
from __future__ import absolute_import
from peewee.messages import send as louie_send
from peewee.ranges import f_list
from pygui.eventmanager.players import VideoEventHandler
class DVDEventHandler(VideoEventHandler):
	forward_steps = f_list([2, 4, 8, 16, 25, 50, 100, 400])
	backward_steps = f_list([-2, -4, -8, -16, -25, -50, -100, -400])
	slow_motion = f_list([0.25, 0.5])
	reverse_slow_motion = f_list()
	def event_info(self, event):
		self.player.action_info()
		return True

	def event_up(self, event):
		self.player.action_up()
		return True

	def event_down(self, event):
		self.player.action_down()
		return True

	def event_left(self, event):
		self.player.action_left()
		return True

	def event_right(self, event):
		self.player.action_right()
		return True

	def event_select(self, event):
		self.player.action_select()
		return True

	def event_action_menu(self, event):
		from pygui.menu.menu import ActionMenu
		sel = self.player.selected
		parent = None
		if sel is None and self.player._history:
			parent = self.player._history[-1]['selected']
		else:
			parent = sel.parent
		context = dict(menu=self.player, selected=sel, parent=parent)
		s = ActionMenu(context, type_='playeraction', category='dvdplayer', universe=self.player.universe)
		s.show()
		if not s.get_item_list('options_list'):
			louie_send('empty_options', sender=s)
		else:
			louie_send('not_empty_options', sender=s)
		return True



