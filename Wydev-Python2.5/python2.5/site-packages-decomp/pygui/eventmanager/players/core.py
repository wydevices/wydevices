# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 293
n 293(None)[return True
]:
	i: 256(), 269()
	o: 

nname: 269
n 269(None)[w.hide()
self.player._error_spawner()
]:
	i: 112(f)
	o: 293()

nname: 256
n 256(None)[w.hide()
]:
	i: 219(), 239()
	o: 293()

nname: 239
n 239(None)[louie_send('not_empty_options', sender=s)
]:
	i: 193(t)
	o: 256()

nname: 219
n 219(None)[louie_send('empty_options', sender=s)
]:
	i: 193(f)
	o: 256()

nname: 193
n 193(s.get_item_list('options_list'))[s.show()
]:
	i: 112(t)
	o: 219(f), 239(t)

nname: 112
n 112(s.get_item_list('main_list'))[context = dict(menu=self.player, selected=sel, parent=parent)
s = ActionMenu(context, type_='playeraction', category='player', universe=self.player.universe)
]:
	i: 78(), 102()
	o: 193(t), 269(f)

nname: 102
n 102(None)[parent = sel.parent
]:
	i: 0&65(f)
	o: 112()

nname: 78
n 78(None)[parent = self.player._history[-1]['selected']
]:
	i: 0&65(t)
	o: 112()

nname: 0&65
n 0&65(sel is None and self.player._history)[w = LoadingWindow()
w.show()
from pygui.menu.menu import ActionMenu
sel = self.player.selected
parent = None
]:
	i: 
	o: 78(t), 102(f)

nname: 293
n 293(None)[return True
]:
	i: 193(), 269()
	o: 

nname: 269
n 269(None)[w.hide()
self.player._error_spawner()
]:
	i: 0&65(f)
	o: 293()

nname: 193
n 193(None)[s.show()
if not s.get_item_list('options_list'):
	louie_send('empty_options', sender=s)
else:
	louie_send('not_empty_options', sender=s)
w.hide()
]:
	i: 0&65(t)
	o: 293()

nname: 0&65
n 0&65(s.get_item_list('main_list'))[w = LoadingWindow()
w.show()
from pygui.menu.menu import ActionMenu
sel = self.player.selected
parent = None
if sel is None and self.player._history:
	parent = self.player._history[-1]['selected']
else:
	parent = sel.parent
context = dict(menu=self.player, selected=sel, parent=parent)
s = ActionMenu(context, type_='playeraction', category='player', universe=self.player.universe)
]:
	i: 
	o: 193(t), 269(f)

nname: 0&65
n 0&65(None)[w = LoadingWindow()
w.show()
from pygui.menu.menu import ActionMenu
sel = self.player.selected
parent = None
if sel is None and self.player._history:
	parent = self.player._history[-1]['selected']
else:
	parent = sel.parent
context = dict(menu=self.player, selected=sel, parent=parent)
s = ActionMenu(context, type_='playeraction', category='player', universe=self.player.universe)
if s.get_item_list('main_list'):
	s.show()
	if not s.get_item_list('options_list'):
		louie_send('empty_options', sender=s)
	else:
		louie_send('not_empty_options', sender=s)
	w.hide()
else:
	w.hide()
	self.player._error_spawner()
return True
]:
	i: 
	o: 

self.nodes: {'0&65': <unpyclib.structure.node instance at 0xb765dfac>}
nname: 0
n 0(None)[pygui_globs['menustack'].toggle()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7659ecc>}
nname: 0
n 0(None)[pygui_globs['menustack'].close_player()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7659eec>}
nname: 0
n 0(None)[self.player.action_info()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7659ecc>}
nname: 0
n 0(None)[self.player._error_spawner()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7659d8c>}
nname: 6
n 6(None)[__doc__ = ' Generic EvendHandler for Players '
def event_action_menu(self, event):
	w = LoadingWindow()
	w.show()
	from pygui.menu.menu import ActionMenu
	sel = self.player.selected
	parent = None
	if sel is None and self.player._history:
		parent = self.player._history[-1]['selected']
	else:
		parent = sel.parent
	context = dict(menu=self.player, selected=sel, parent=parent)
	s = ActionMenu(context, type_='playeraction', category='player', universe=self.player.universe)
	if s.get_item_list('main_list'):
		s.show()
		if not s.get_item_list('options_list'):
			louie_send('empty_options', sender=s)
		else:
			louie_send('not_empty_options', sender=s)
		w.hide()
	else:
		w.hide()
		self.player._error_spawner()
	return True

def event_toggle_menu(self, event):
	pygui_globs['menustack'].toggle()
	return True

def event_stop(self, event):
	pygui_globs['menustack'].close_player()
	return True

def event_info(self, event):
	self.player.action_info()
	return True

def event_marker(self, event):
	self.player._error_spawner()
	return True

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb7659a6c>}
nname: 0
n 0(None)[from __future__ import absolute_import
from peewee.messages import send as louie_send
from pygui.eventmanager import EventDispatcher
from pygui.shared import pygui_globs
from pygui.window import LoadingWindow
class GenericPlayerEventHandler(EventDispatcher):
	__doc__ = ' Generic EvendHandler for Players '
	def event_action_menu(self, event):
		w = LoadingWindow()
		w.show()
		from pygui.menu.menu import ActionMenu
		sel = self.player.selected
		parent = None
		if sel is None and self.player._history:
			parent = self.player._history[-1]['selected']
		else:
			parent = sel.parent
		context = dict(menu=self.player, selected=sel, parent=parent)
		s = ActionMenu(context, type_='playeraction', category='player', universe=self.player.universe)
		if s.get_item_list('main_list'):
			s.show()
			if not s.get_item_list('options_list'):
				louie_send('empty_options', sender=s)
			else:
				louie_send('not_empty_options', sender=s)
			w.hide()
		else:
			w.hide()
			self.player._error_spawner()
		return True

	def event_toggle_menu(self, event):
		pygui_globs['menustack'].toggle()
		return True

	def event_stop(self, event):
		pygui_globs['menustack'].close_player()
		return True

	def event_info(self, event):
		self.player.action_info()
		return True

	def event_marker(self, event):
		self.player._error_spawner()
		return True



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7650c8c>}
from __future__ import absolute_import
from peewee.messages import send as louie_send
from pygui.eventmanager import EventDispatcher
from pygui.shared import pygui_globs
from pygui.window import LoadingWindow
class GenericPlayerEventHandler(EventDispatcher):
	__doc__ = ' Generic EvendHandler for Players '
	def event_action_menu(self, event):
		w = LoadingWindow()
		w.show()
		from pygui.menu.menu import ActionMenu
		sel = self.player.selected
		parent = None
		if sel is None and self.player._history:
			parent = self.player._history[-1]['selected']
		else:
			parent = sel.parent
		context = dict(menu=self.player, selected=sel, parent=parent)
		s = ActionMenu(context, type_='playeraction', category='player', universe=self.player.universe)
		if s.get_item_list('main_list'):
			s.show()
			if not s.get_item_list('options_list'):
				louie_send('empty_options', sender=s)
			else:
				louie_send('not_empty_options', sender=s)
			w.hide()
		else:
			w.hide()
			self.player._error_spawner()
		return True

	def event_toggle_menu(self, event):
		pygui_globs['menustack'].toggle()
		return True

	def event_stop(self, event):
		pygui_globs['menustack'].close_player()
		return True

	def event_info(self, event):
		self.player.action_info()
		return True

	def event_marker(self, event):
		self.player._error_spawner()
		return True



