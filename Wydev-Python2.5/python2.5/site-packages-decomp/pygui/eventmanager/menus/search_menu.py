# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 0
n 0(None)[self.player.hide()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75eaa4c>}
nname: 0
n 0(None)[self.player.execute_selected()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75eacac>}
nname: 0
n 0(None)[self._move(-event.arg['count'])
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ead4c>}
nname: 0
n 0(None)[self.player.ask_pattern()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ead2c>}
nname: 0
n 0(None)[self._move(-event.arg['count'])
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ead6c>}
nname: 0
n 0(None)[self._move(event.arg['count'])
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ead8c>}
nname: 206
n 206(None)[play._update_marker()
return True
]:
	i: 102(JA), 187(JA), 201(), 205()
	o: 

nname: 205
n 205(None)[]:
	i: 55(t)
	o: 206()

nname: 201
n 201(None)[]:
	i: 168(f)
	o: 206()

nname: 187
n 187(None)[w.hide()
]:
	i: 168(t)
	o: 206(JA)

nname: 168
n 168(w)[marker.add_item(sel)
]:
	i: 141(), 167()
	o: 187(t), 201(f)

nname: 167
n 167(None)[]:
	i: 119(f)
	o: 168()

nname: 141
n 141(None)[w = LoadingWindow('')
w.show()
]:
	i: 119(t)
	o: 168()

nname: 119
n 119(isinstance(sel, DirItem))[w = None
]:
	i: 70(f)
	o: 141(t), 167(f)

nname: 102
n 102(None)[marker.del_item(sel)
]:
	i: 70(t)
	o: 206(JA)

nname: 70
n 70(sel.is_marked())[marker = markerlists()[self.player.universe]
]:
	i: 55(f)
	o: 102(t), 119(f)

nname: 55
n 55(isinstance(sel, Markerlist))[]:
	i: 33(), 54()
	o: 70(f), 205(t)

nname: 54
n 54(None)[]:
	i: 0(f)
	o: 55()

nname: 33
n 33(None)[log.warning('Nothing to put in markerlist')
return True
]:
	i: 0(t)
	o: 55()

nname: 0
n 0(sel is None)[play = self.player.navigator
sel = play.selected
]:
	i: 
	o: 33(t), 54(f)

nname: 206
n 206(None)[play._update_marker()
return True
]:
	i: 102(JA), 119(JA), 0(t)
	o: 

nname: 119
n 119(None)[w = None
if isinstance(sel, DirItem):
	w = LoadingWindow('')
	w.show()
marker.add_item(sel)
if w:
	w.hide()
]:
	i: 70(f)
	o: 206(JA)

nname: 102
n 102(None)[marker.del_item(sel)
]:
	i: 70(t)
	o: 206(JA)

nname: 70
n 70(sel.is_marked())[marker = markerlists()[self.player.universe]
]:
	i: 0(f)
	o: 102(t), 119(f)

nname: 0
n 0(isinstance(sel, Markerlist))[play = self.player.navigator
sel = play.selected
if sel is None:
	log.warning('Nothing to put in markerlist')
	return True
]:
	i: 
	o: 70(f), 206(t)

nname: 0
n 0(None)[play = self.player.navigator
sel = play.selected
if sel is None:
	log.warning('Nothing to put in markerlist')
	return True
if not isinstance(sel, Markerlist):
	marker = markerlists()[self.player.universe]
	if sel.is_marked():
		marker.del_item(sel)
	else:
		w = None
		if isinstance(sel, DirItem):
			w = LoadingWindow('')
			w.show()
		marker.add_item(sel)
		if w:
			w.hide()
play._update_marker()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75f0cac>}
nname: 6
n 6(None)[def event_action_menu(self, event):
	self.player.hide()
	return True

def event_select(self, event):
	self.player.execute_selected()
	return True

def event_up(self, event):
	self._move(-event.arg['count'])
	return True

def event_down(self, event):
	self.player.ask_pattern()
	return True

def event_left(self, event):
	self._move(-event.arg['count'])
	return True

def event_right(self, event):
	self._move(event.arg['count'])
	return True

def event_marker(self, event):
	play = self.player.navigator
	sel = play.selected
	if sel is None:
		log.warning('Nothing to put in markerlist')
		return True
	if not isinstance(sel, Markerlist):
		marker = markerlists()[self.player.universe]
		if sel.is_marked():
			marker.del_item(sel)
		else:
			w = None
			if isinstance(sel, DirItem):
				w = LoadingWindow('')
				w.show()
			marker.add_item(sel)
			if w:
				w.hide()
	play._update_marker()
	return True

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb75ea60c>}
nname: 0
n 0(None)[from __future__ import absolute_import
from pygui.eventmanager import EventDispatcher
from pygui.markerlist import markerlists, Markerlist
from pygui.item.mediaitem import DirItem
from pygui.window import LoadingWindow
from .core import MenuEventHandler
class SearchMenuEventHandler(MenuEventHandler):
	def event_action_menu(self, event):
		self.player.hide()
		return True

	def event_select(self, event):
		self.player.execute_selected()
		return True

	def event_up(self, event):
		self._move(-event.arg['count'])
		return True

	def event_down(self, event):
		self.player.ask_pattern()
		return True

	def event_left(self, event):
		self._move(-event.arg['count'])
		return True

	def event_right(self, event):
		self._move(event.arg['count'])
		return True

	def event_marker(self, event):
		play = self.player.navigator
		sel = play.selected
		if sel is None:
			log.warning('Nothing to put in markerlist')
			return True
		if not isinstance(sel, Markerlist):
			marker = markerlists()[self.player.universe]
			if sel.is_marked():
				marker.del_item(sel)
			else:
				w = None
				if isinstance(sel, DirItem):
					w = LoadingWindow('')
					w.show()
				marker.add_item(sel)
				if w:
					w.hide()
		play._update_marker()
		return True



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75e3b6c>}
from __future__ import absolute_import
from pygui.eventmanager import EventDispatcher
from pygui.markerlist import markerlists, Markerlist
from pygui.item.mediaitem import DirItem
from pygui.window import LoadingWindow
from .core import MenuEventHandler
class SearchMenuEventHandler(MenuEventHandler):
	def event_action_menu(self, event):
		self.player.hide()
		return True

	def event_select(self, event):
		self.player.execute_selected()
		return True

	def event_up(self, event):
		self._move(-event.arg['count'])
		return True

	def event_down(self, event):
		self.player.ask_pattern()
		return True

	def event_left(self, event):
		self._move(-event.arg['count'])
		return True

	def event_right(self, event):
		self._move(event.arg['count'])
		return True

	def event_marker(self, event):
		play = self.player.navigator
		sel = play.selected
		if sel is None:
			log.warning('Nothing to put in markerlist')
			return True
		if not isinstance(sel, Markerlist):
			marker = markerlists()[self.player.universe]
			if sel.is_marked():
				marker.del_item(sel)
			else:
				w = None
				if isinstance(sel, DirItem):
					w = LoadingWindow('')
					w.show()
				marker.add_item(sel)
				if w:
					w.hide()
		play._update_marker()
		return True



