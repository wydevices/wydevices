# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 0
n 0(None)[MenuEventHandler.__init__(self, player)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75aad6c>}
nname: 0
n 0(None)[self.player.modify_scheduled_record()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75aae2c>}
nname: 0
n 0(None)[self.player.action_info()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75aacac>}
nname: 0
n 0(None)[self.player.display_action_menu()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75aadac>}
nname: 0
n 0(None)[self.event_left(None)
return MenuEventHandler.event_toggle_menu(self, event)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75aacac>}
nname: 6
n 6(None)[__doc__ = '\n    Event manager for Scheduled records menu\n    '
def __init__(self, player):
	MenuEventHandler.__init__(self, player)

def event_right(self, event):
	self.player.modify_scheduled_record()
	return True

def event_info(self, event):
	self.player.action_info()
	return True

def event_action_menu(self, event):
	self.player.display_action_menu()
	return True

def event_toggle_menu(self, event):
	self.event_left(None)
	return MenuEventHandler.event_toggle_menu(self, event)

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb75aa8ac>}
nname: 0
n 0(None)[MenuEventHandler.__init__(self, player)
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ae6cc>}
nname: 271
n 271(None)[return True
]:
	i: 18(), 141(JA), 161(), 214(), 270()
	o: 

nname: 270
n 270(None)[]:
	i: 165(f)
	o: 271()

nname: 214
n 214(None)[_new_list = _list.selected.list_name
louie_send('on_%s_blur' % _preview_list, self.player)
louie_send('on_%s_focus' % _new_list, self.player)
]:
	i: 165(t)
	o: 271()

nname: 165
n 165(_list.select(-1))[_list = self.player.get_item_list('main_list').selected
_preview_list = _list.selected.list_name
]:
	i: 26(f)
	o: 214(t), 270(f)

nname: 161
n 161(None)[]:
	i: 57(f)
	o: 271()

nname: 141
n 141(None)[self.player.select(-1)
]:
	i: 57(t)
	o: 271(JA)

nname: 57
n 57(self.player.selected_pos == len(self.player.get_item_list('main_list')) - 1)[self.player.get_item_list('main_list').selected.select(None, True)
self.player.active_list = 'main_list'
]:
	i: 26(t)
	o: 141(t), 161(f)

nname: 26
n 26(self.player.get_item_list('main_list').selected.selected_pos == 0)[]:
	i: 0(f)
	o: 57(t), 165(f)

nname: 18
n 18(None)[return True
]:
	i: 0(t)
	o: 271()

nname: 0
n 0(self.player.active_list == 'main_list')[]:
	i: 
	o: 18(t), 26(f)

nname: 0
n 0(None)[if self.player.active_list == 'main_list':
	return True
else:
	if self.player.get_item_list('main_list').selected.selected_pos == 0:
		self.player.get_item_list('main_list').selected.select(None, True)
		self.player.active_list = 'main_list'
		if self.player.selected_pos == len(self.player.get_item_list('main_list')) - 1:
			self.player.select(-1)
	else:
		_list = self.player.get_item_list('main_list').selected
		_preview_list = _list.selected.list_name
		if _list.select(-1):
			_new_list = _list.selected.list_name
			louie_send('on_%s_blur' % _preview_list, self.player)
			louie_send('on_%s_focus' % _new_list, self.player)
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75b5dac>}
nname: 181
n 181(None)[return True
]:
	i: 18(), 124(), 180()
	o: 

nname: 180
n 180(None)[]:
	i: 75(f)
	o: 181()

nname: 124
n 124(None)[_new_list = _list.selected.list_name
louie_send('on_%s_blur' % _preview_list, self.player)
louie_send('on_%s_focus' % _new_list, self.player)
]:
	i: 75(t)
	o: 181()

nname: 75
n 75(_list.select(1))[_list = self.player.get_item_list('main_list').selected
_preview_list = _list.selected.list_name
]:
	i: 0(f)
	o: 124(t), 180(f)

nname: 18
n 18(None)[list_name, self.player.active_list = self.player.selected.list_name, self.player.selected.list_name
self.player.get_item_list(list_name).select(0, True)
]:
	i: 0(t)
	o: 181()

nname: 0
n 0(self.player.active_list == 'main_list')[]:
	i: 
	o: 18(t), 75(f)

nname: 0
n 0(None)[if self.player.active_list == 'main_list':
	list_name, self.player.active_list = self.player.selected.list_name, self.player.selected.list_name
	self.player.get_item_list(list_name).select(0, True)
else:
	_list = self.player.get_item_list('main_list').selected
	_preview_list = _list.selected.list_name
	if _list.select(1):
		_new_list = _list.selected.list_name
		louie_send('on_%s_blur' % _preview_list, self.player)
		louie_send('on_%s_focus' % _new_list, self.player)
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75aee2c>}
nname: 330
n 330(None)[return True
]:
	i: 24(), 113(JA), 133(), 198(), 279(), 309(), 328(AE)
	o: 

nname: 328
n 328(None)[]:
	i: 299(f)
	o: 330(AE)

nname: 309
n 309(None)[#, e
PRINT_EXCEPTION(e)
]:
	i: 299(t)
	o: 330()

nname: 299
n 299(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 202(except)
	o: 309(t), 328(f)

nname: 279
n 279(None)[self.player.update(_list)
]:
	i: 245(), 278()
	o: 330()

nname: 278
n 278(None)[]:
	i: 206(t)
	o: 279()

nname: 245
n 245(None)[_list.select(len(_list) - 1, force_pos=True)
]:
	i: 206(f)
	o: 279()

nname: 206
n 206(_list.select(-1))[_list = self.player.get_item_list('main_list').selected.selected
]:
	i: 202(try)
	o: 245(f), 278(t)

nname: 202
n 202(None)[]:
	i: 153&166(f)
	o: 206(try), 299(except)

nname: 198
n 198(None)[]:
	i: 153&166(t)
	o: 330()

nname: 153&166
n 153&166(active_list == 'repetition_num_list' and self.player.get_item_list('repetition_list')[0].selected_pos == 0)[]:
	i: 44(f)
	o: 198(t), 202(f)

nname: 133
n 133(None)[self.player.select(-1)
]:
	i: 57(f)
	o: 330()

nname: 113
n 113(None)[self.player.select(-2)
]:
	i: 57(t)
	o: 330(JA)

nname: 57
n 57(self.player.is_only_this_time())[self.player.get_item_list(active_list).select(None, True)
self.player.active_list = 'main_list'
]:
	i: 44(t)
	o: 113(t), 133(f)

nname: 44
n 44(active_list == 'confirmation_list')[]:
	i: 0(f)
	o: 57(t), 153&166(f)

nname: 24
n 24(None)[self.player.select(-1)
]:
	i: 0(t)
	o: 330()

nname: 0
n 0(active_list == 'main_list')[active_list = self.player.active_list
]:
	i: 
	o: 24(t), 44(f)

nname: 330
n 330(None)[return True
]:
	i: 24(), 57(JA), 279(), 299(), 153&166(t)
	o: 

nname: 299
n 299(None)[except Exception, e:
	PRINT_EXCEPTION(e)
]:
	i: 202()
	o: 330()

nname: 279
n 279(None)[self.player.update(_list)
]:
	i: 202()
	o: 330()

nname: 202
n 202(None)[try:
	_list = self.player.get_item_list('main_list').selected.selected
	if not _list.select(-1):
		_list.select(len(_list) - 1, force_pos=True)
]:
	i: 153&166(f)
	o: 279(), 299()

nname: 330
n 330(None)[return True
]:
	i: 24(), 57(JA), 279(), 299(), 153&166(t)
	o: 

nname: 153&166
n 153&166(active_list == 'repetition_num_list' and self.player.get_item_list('repetition_list')[0].selected_pos == 0)[]:
	i: 44(f)
	o: 330(t), 202(f)

nname: 57
n 57(None)[self.player.get_item_list(active_list).select(None, True)
self.player.active_list = 'main_list'
if self.player.is_only_this_time():
	self.player.select(-2)
else:
	self.player.select(-1)
]:
	i: 44(t)
	o: 330(JA)

nname: 44
n 44(active_list == 'confirmation_list')[]:
	i: 0(f)
	o: 57(t), 153&166(f)

nname: 24
n 24(None)[self.player.select(-1)
]:
	i: 0(t)
	o: 330()

nname: 0
n 0(active_list == 'main_list')[active_list = self.player.active_list
]:
	i: 
	o: 24(t), 44(f)

self.nodes: {0: <unpyclib.structure.node instance at 0xb75b33ac>, 299: <unpyclib.structure.node instance at 0xb75b394c>, 202: <unpyclib.structure.node instance at 0xb75b3fcc>, 279: <unpyclib.structure.node instance at 0xb75b3c6c>, 44: <unpyclib.structure.node instance at 0xb75b306c>, 24: <unpyclib.structure.node instance at 0xb75b302c>, 57: <unpyclib.structure.node instance at 0xb75b350c>, '153&166': <unpyclib.structure.node instance at 0xb75b30cc>, 330: <unpyclib.structure.node instance at 0xb75b36ec>}
nname: 327
n 327(None)[return True
]:
	i: 139(JA), 156(), 205(), 276(), 306(), 325(AE)
	o: 

nname: 325
n 325(None)[]:
	i: 296(f)
	o: 327(AE)

nname: 306
n 306(None)[#, e
PRINT_EXCEPTION(e)
]:
	i: 296(t)
	o: 327()

nname: 296
n 296(<dummy_ex3> EXC_MATCH Exception)[]:
	i: 209(except)
	o: 306(t), 325(f)

nname: 276
n 276(None)[self.player.update(_list)
]:
	i: 252(), 275()
	o: 327()

nname: 275
n 275(None)[]:
	i: 213(t)
	o: 276()

nname: 252
n 252(None)[_list.select(0, force_pos=True)
]:
	i: 213(f)
	o: 276()

nname: 213
n 213(_list.select(1))[_list = self.player.get_item_list('main_list').selected.selected
]:
	i: 209(try)
	o: 252(f), 275(t)

nname: 209
n 209(None)[]:
	i: 160&173(f)
	o: 213(try), 296(except)

nname: 205
n 205(None)[]:
	i: 160&173(t)
	o: 327()

nname: 160&173
n 160&173(active_list == 'repetition_num_list' and self.player.get_item_list('repetition_list')[0].selected_pos == 0)[]:
	i: 0(f)
	o: 205(t), 209(f)

nname: 156
n 156(None)[]:
	i: 105(f)
	o: 327()

nname: 139
n 139(None)[self.event_right(1)
]:
	i: 105(t)
	o: 327(JA)

nname: 105
n 105(self.player.selected_pos == len(self.player.choices) - 1)[]:
	i: 68(), 88()
	o: 139(t), 156(f)

nname: 88
n 88(None)[self.player.select(1)
]:
	i: 24&52(f)
	o: 105()

nname: 68
n 68(None)[self.player.select(2)
]:
	i: 24&52(t)
	o: 105()

nname: 24&52
n 24&52(self.player.get_item_list('main_list').selected_pos == 4 and self.player.is_only_this_time())[]:
	i: 0(t)
	o: 68(t), 88(f)

nname: 0
n 0(active_list == 'main_list')[active_list = self.player.active_list
]:
	i: 
	o: 24&52(t), 160&173(f)

nname: 327
n 327(None)[return True
]:
	i: 24&52(JA), 276(), 296(), 160&173(t)
	o: 

nname: 296
n 296(None)[except Exception, e:
	PRINT_EXCEPTION(e)
]:
	i: 209()
	o: 327()

nname: 276
n 276(None)[self.player.update(_list)
]:
	i: 209()
	o: 327()

nname: 209
n 209(None)[try:
	_list = self.player.get_item_list('main_list').selected.selected
	if not _list.select(1):
		_list.select(0, force_pos=True)
]:
	i: 160&173(f)
	o: 276(), 296()

nname: 327
n 327(None)[return True
]:
	i: 24&52(JA), 276(), 296(), 160&173(t)
	o: 

nname: 160&173
n 160&173(active_list == 'repetition_num_list' and self.player.get_item_list('repetition_list')[0].selected_pos == 0)[]:
	i: 0(f)
	o: 327(t), 209(f)

nname: 24&52
n 24&52(None)[if self.player.get_item_list('main_list').selected_pos == 4 and self.player.is_only_this_time():
	self.player.select(2)
else:
	self.player.select(1)
if self.player.selected_pos == len(self.player.choices) - 1:
	self.event_right(1)
]:
	i: 0(t)
	o: 327(JA)

nname: 0
n 0(active_list == 'main_list')[active_list = self.player.active_list
]:
	i: 
	o: 24&52(t), 160&173(f)

self.nodes: {0: <unpyclib.structure.node instance at 0xb75b3dcc>, 276: <unpyclib.structure.node instance at 0xb75b3b0c>, 296: <unpyclib.structure.node instance at 0xb75bdeec>, 327: <unpyclib.structure.node instance at 0xb75b3aec>, 209: <unpyclib.structure.node instance at 0xb75bd58c>, '160&173': <unpyclib.structure.node instance at 0xb75bdfcc>, '24&52': <unpyclib.structure.node instance at 0xb75bd22c>}
nname: 52
n 52(None)[return True
]:
	i: 21(), 38()
	o: 

nname: 38
n 38(None)[return self.event_wheel_rwd(event)
]:
	i: 0(f)
	o: 52()

nname: 21
n 21(None)[return self.event_wheel_fwd(event)
]:
	i: 0(t)
	o: 52()

nname: 0
n 0(self.player.active_list in self._INVERTED_LISTS)[]:
	i: 
	o: 21(t), 38(f)

nname: 0
n 0(None)[if self.player.active_list in self._INVERTED_LISTS:
	return self.event_wheel_fwd(event)
else:
	return self.event_wheel_rwd(event)
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ae86c>}
nname: 52
n 52(None)[return True
]:
	i: 21(), 38()
	o: 

nname: 38
n 38(None)[return self.event_wheel_fwd(event)
]:
	i: 0(f)
	o: 52()

nname: 21
n 21(None)[return self.event_wheel_rwd(event)
]:
	i: 0(t)
	o: 52()

nname: 0
n 0(self.player.active_list in self._INVERTED_LISTS)[]:
	i: 
	o: 21(t), 38(f)

nname: 0
n 0(None)[if self.player.active_list in self._INVERTED_LISTS:
	return self.event_wheel_rwd(event)
else:
	return self.event_wheel_fwd(event)
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ae8ac>}
nname: 0
n 0(None)[self.player.get_item_list('main_list').selected.selected.execute()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ae78c>}
nname: 0
n 0(None)[self.player.cancel()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ae8cc>}
nname: 0
n 0(None)[return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ae50c>}
nname: 0
n 0(None)[return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ae56c>}
nname: 0
n 0(None)[return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75ae58c>}
nname: 6
n 6(None)[__doc__ = '\n    Event manager for Scheduled records menu\n    '
def __init__(self, player):
	MenuEventHandler.__init__(self, player)

def event_left(self, event):
	if self.player.active_list == 'main_list':
		return True
	else:
		if self.player.get_item_list('main_list').selected.selected_pos == 0:
			self.player.get_item_list('main_list').selected.select(None, True)
			self.player.active_list = 'main_list'
			if self.player.selected_pos == len(self.player.get_item_list('main_list')) - 1:
				self.player.select(-1)
		else:
			_list = self.player.get_item_list('main_list').selected
			_preview_list = _list.selected.list_name
			if _list.select(-1):
				_new_list = _list.selected.list_name
				louie_send('on_%s_blur' % _preview_list, self.player)
				louie_send('on_%s_focus' % _new_list, self.player)
	return True

def event_right(self, event):
	if self.player.active_list == 'main_list':
		list_name, self.player.active_list = self.player.selected.list_name, self.player.selected.list_name
		self.player.get_item_list(list_name).select(0, True)
	else:
		_list = self.player.get_item_list('main_list').selected
		_preview_list = _list.selected.list_name
		if _list.select(1):
			_new_list = _list.selected.list_name
			louie_send('on_%s_blur' % _preview_list, self.player)
			louie_send('on_%s_focus' % _new_list, self.player)
	return True

def event_wheel_rwd(self, event):
	active_list = self.player.active_list

def event_wheel_fwd(self, event):
	active_list = self.player.active_list

_INVERTED_LISTS = set(['date_list', 'start_time_list', 'stop_time_list', 'repetition_list', 'repetition_num_list', 'service_list'])
def event_up(self, event):
	if self.player.active_list in self._INVERTED_LISTS:
		return self.event_wheel_fwd(event)
	else:
		return self.event_wheel_rwd(event)
	return True

def event_down(self, event):
	if self.player.active_list in self._INVERTED_LISTS:
		return self.event_wheel_rwd(event)
	else:
		return self.event_wheel_fwd(event)
	return True

def event_select(self, event):
	self.player.get_item_list('main_list').selected.selected.execute()
	return True

def event_stop(self, event):
	self.player.cancel()
	return True

def event_toggle_menu(self, event):
	return True

def event_marker(self, event):
	return True

def event_action_menu(self, event):
	return True

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb75aaecc>}
nname: 0
n 0(None)[from __future__ import absolute_import
from peewee.debug import DEBUG, PRINT_EXCEPTION
from peewee.messages import send as louie_send
from .core import MenuEventHandler
class ScheduledRecordMenuEventHandler(MenuEventHandler):
	__doc__ = '\n    Event manager for Scheduled records menu\n    '
	def __init__(self, player):
		MenuEventHandler.__init__(self, player)

	def event_right(self, event):
		self.player.modify_scheduled_record()
		return True

	def event_info(self, event):
		self.player.action_info()
		return True

	def event_action_menu(self, event):
		self.player.display_action_menu()
		return True

	def event_toggle_menu(self, event):
		self.event_left(None)
		return MenuEventHandler.event_toggle_menu(self, event)



class ModifyScheduledRecordMenuEventHandler(MenuEventHandler):
	__doc__ = '\n    Event manager for Scheduled records menu\n    '
	def __init__(self, player):
		MenuEventHandler.__init__(self, player)

	def event_left(self, event):
		if self.player.active_list == 'main_list':
			return True
		else:
			if self.player.get_item_list('main_list').selected.selected_pos == 0:
				self.player.get_item_list('main_list').selected.select(None, True)
				self.player.active_list = 'main_list'
				if self.player.selected_pos == len(self.player.get_item_list('main_list')) - 1:
					self.player.select(-1)
			else:
				_list = self.player.get_item_list('main_list').selected
				_preview_list = _list.selected.list_name
				if _list.select(-1):
					_new_list = _list.selected.list_name
					louie_send('on_%s_blur' % _preview_list, self.player)
					louie_send('on_%s_focus' % _new_list, self.player)
		return True

	def event_right(self, event):
		if self.player.active_list == 'main_list':
			list_name, self.player.active_list = self.player.selected.list_name, self.player.selected.list_name
			self.player.get_item_list(list_name).select(0, True)
		else:
			_list = self.player.get_item_list('main_list').selected
			_preview_list = _list.selected.list_name
			if _list.select(1):
				_new_list = _list.selected.list_name
				louie_send('on_%s_blur' % _preview_list, self.player)
				louie_send('on_%s_focus' % _new_list, self.player)
		return True

	def event_wheel_rwd(self, event):
		active_list = self.player.active_list

	def event_wheel_fwd(self, event):
		active_list = self.player.active_list

	_INVERTED_LISTS = set(['date_list', 'start_time_list', 'stop_time_list', 'repetition_list', 'repetition_num_list', 'service_list'])
	def event_up(self, event):
		if self.player.active_list in self._INVERTED_LISTS:
			return self.event_wheel_fwd(event)
		else:
			return self.event_wheel_rwd(event)
		return True

	def event_down(self, event):
		if self.player.active_list in self._INVERTED_LISTS:
			return self.event_wheel_rwd(event)
		else:
			return self.event_wheel_fwd(event)
		return True

	def event_select(self, event):
		self.player.get_item_list('main_list').selected.selected.execute()
		return True

	def event_stop(self, event):
		self.player.cancel()
		return True

	def event_toggle_menu(self, event):
		return True

	def event_marker(self, event):
		return True

	def event_action_menu(self, event):
		return True



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb75a1f8c>}
from __future__ import absolute_import
from peewee.debug import DEBUG, PRINT_EXCEPTION
from peewee.messages import send as louie_send
from .core import MenuEventHandler
class ScheduledRecordMenuEventHandler(MenuEventHandler):
	__doc__ = '\n    Event manager for Scheduled records menu\n    '
	def __init__(self, player):
		MenuEventHandler.__init__(self, player)

	def event_right(self, event):
		self.player.modify_scheduled_record()
		return True

	def event_info(self, event):
		self.player.action_info()
		return True

	def event_action_menu(self, event):
		self.player.display_action_menu()
		return True

	def event_toggle_menu(self, event):
		self.event_left(None)
		return MenuEventHandler.event_toggle_menu(self, event)



class ModifyScheduledRecordMenuEventHandler(MenuEventHandler):
	__doc__ = '\n    Event manager for Scheduled records menu\n    '
	def __init__(self, player):
		MenuEventHandler.__init__(self, player)

	def event_left(self, event):
		if self.player.active_list == 'main_list':
			return True
		else:
			if self.player.get_item_list('main_list').selected.selected_pos == 0:
				self.player.get_item_list('main_list').selected.select(None, True)
				self.player.active_list = 'main_list'
				if self.player.selected_pos == len(self.player.get_item_list('main_list')) - 1:
					self.player.select(-1)
			else:
				_list = self.player.get_item_list('main_list').selected
				_preview_list = _list.selected.list_name
				if _list.select(-1):
					_new_list = _list.selected.list_name
					louie_send('on_%s_blur' % _preview_list, self.player)
					louie_send('on_%s_focus' % _new_list, self.player)
		return True

	def event_right(self, event):
		if self.player.active_list == 'main_list':
			list_name, self.player.active_list = self.player.selected.list_name, self.player.selected.list_name
			self.player.get_item_list(list_name).select(0, True)
		else:
			_list = self.player.get_item_list('main_list').selected
			_preview_list = _list.selected.list_name
			if _list.select(1):
				_new_list = _list.selected.list_name
				louie_send('on_%s_blur' % _preview_list, self.player)
				louie_send('on_%s_focus' % _new_list, self.player)
		return True

	def event_wheel_rwd(self, event):
		active_list = self.player.active_list

	def event_wheel_fwd(self, event):
		active_list = self.player.active_list

	_INVERTED_LISTS = set(['date_list', 'start_time_list', 'stop_time_list', 'repetition_list', 'repetition_num_list', 'service_list'])
	def event_up(self, event):
		if self.player.active_list in self._INVERTED_LISTS:
			return self.event_wheel_fwd(event)
		else:
			return self.event_wheel_rwd(event)
		return True

	def event_down(self, event):
		if self.player.active_list in self._INVERTED_LISTS:
			return self.event_wheel_rwd(event)
		else:
			return self.event_wheel_fwd(event)
		return True

	def event_select(self, event):
		self.player.get_item_list('main_list').selected.selected.execute()
		return True

	def event_stop(self, event):
		self.player.cancel()
		return True

	def event_toggle_menu(self, event):
		return True

	def event_marker(self, event):
		return True

	def event_action_menu(self, event):
		return True



