# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definiton
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

nname: 0
n 0(None)[return None
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb761172c>}
nname: 0
n 0(None)[return None
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb76119cc>}
nname: 0
n 0(None)[return None
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7611a2c>}
nname: 90
n 90(None)[]:
	i: 25(), 77()
	o: 

nname: 77
n 77(None)[def self.event_left(*args):
	return None

]:
	i: 0(f)
	o: 90()

nname: 25
n 25(None)[self.event_left = self.event_up
self.event_right = self.event_down
def self.event_up(*args):
	return None

def self.event_down(*args):
	return None

]:
	i: 0(t)
	o: 90()

nname: 0
n 0(config.horizontal_selector)[MenuEventHandler.__init__(self, player)
]:
	i: 
	o: 25(t), 77(f)

nname: 0
n 0(None)[MenuEventHandler.__init__(self, player)
if config.horizontal_selector:
	self.event_left = self.event_up
	self.event_right = self.event_down
	def self.event_up(*args):
		return None

	def self.event_down(*args):
		return None

else:
	def self.event_left(*args):
		return None

]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760bf4c>}
nname: 0
n 0(None)[self.player.execute_selected()
return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760bb6c>}
nname: 0
n 0(None)[return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760b9ec>}
nname: 0
n 0(None)[return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760bb6c>}
nname: 0
n 0(None)[return True
]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb760ba2c>}
nname: 6
n 6(None)[__doc__ = '\n    Event manager for the home menu (universe selector)\n    '
def __init__(self, player):
	MenuEventHandler.__init__(self, player)
	if config.horizontal_selector:
		self.event_left = self.event_up
		self.event_right = self.event_down
		def self.event_up(*args):
			return None

		def self.event_down(*args):
			return None

	else:
		def self.event_left(*args):
			return None


def event_select(self, event, list_name='main_list'):
	self.player.execute_selected()
	return True

def event_action_menu(self, event):
	return True

def event_info(self, event):
	return True

def event_marker(self, event):
	return True

]:
	i: 
	o: 

self.nodes: {6: <unpyclib.structure.node instance at 0xb760b78c>}
nname: 0
n 0(None)[from __future__ import absolute_import
from .core import MenuEventHandler
import pygui.config as config
from pygui.shared import pygui_globs
class HomeEventHandler(MenuEventHandler):
	__doc__ = '\n    Event manager for the home menu (universe selector)\n    '
	def __init__(self, player):
		MenuEventHandler.__init__(self, player)
		if config.horizontal_selector:
			self.event_left = self.event_up
			self.event_right = self.event_down
			def self.event_up(*args):
				return None

			def self.event_down(*args):
				return None

		else:
			def self.event_left(*args):
				return None


	def event_select(self, event, list_name='main_list'):
		self.player.execute_selected()
		return True

	def event_action_menu(self, event):
		return True

	def event_info(self, event):
		return True

	def event_marker(self, event):
		return True



]:
	i: 
	o: 

self.nodes: {0: <unpyclib.structure.node instance at 0xb7604e4c>}
from __future__ import absolute_import
from .core import MenuEventHandler
import pygui.config as config
from pygui.shared import pygui_globs
class HomeEventHandler(MenuEventHandler):
	__doc__ = '\n    Event manager for the home menu (universe selector)\n    '
	def __init__(self, player):
		MenuEventHandler.__init__(self, player)
		if config.horizontal_selector:
			self.event_left = self.event_up
			self.event_right = self.event_down
			def self.event_up(*args):
				return None

			def self.event_down(*args):
				return None

		else:
			def self.event_left(*args):
				return None


	def event_select(self, event, list_name='main_list'):
		self.player.execute_selected()
		return True

	def event_action_menu(self, event):
		return True

	def event_info(self, event):
		return True

	def event_marker(self, event):
		return True



