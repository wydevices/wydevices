# -*- coding: utf-8 -*- 
#
# Description:
#
# WyDvd Main Class Definitions
#
#
#
# Changes:
#
# 2011-12-15
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from wydbus import WyDbus, WDB_AS_THREAD
from threading import Thread, Event
import os
import time
import urllib
from subprocess import Popen

__all__ = ['Wydvd', 'WydvdException']



class WydvdDbusThread(Thread):

	def __init__(self, dbus):
		Thread.__init__(self)
		self.dbus = dbus
		self.user_stop = False
		return None

	def __del__(self):
		self.stop()
		return None

	def stop(self):
		self.user_stop = True
		return None

	def run(self):
		while self.user_stop == False:
			self.dbus.step()
		return None



class WydvdException(Exception):
	__module__ = __name__



# WyDVD client interface.
#
# Example usage:
#  >> from wydvd import Wydvd
#  >> wdd = Wydvd()
#  >> wdd.open('/media/DVD-ISO/Orgazmo.iso')
#  >> wdd.play()
#  >> wdd.stop()
#  >> wdd.close()
class Wydvd(object):

	_dbus_name = 'com.wyplay.wydvd'
	_dbus_path = '/com/wyplay/WyDVD'
	_domain_type = ('FIRST_PLAY', 'VIDEO_MANAGER_MENU', 'VTS_MENU', 'TITLE', 'STOP', 'AMGM_DOM', 'TT_GR_DOM')
	_player_mode = ('DEFAULT', 'STOPPED', 'PAUSED', 'STILL', 'PLAYING', 'BUSY', 'SCANNING', 'INACTIVE', 'REVERSEPLAY', 'TRICKPLAY', 'REVERSESCAN')
	_event_type = ('WYDVD_TITLE_CHANGE', 'WYDVD_PART_OF_TITLE_CHANGE', 'WYDVD_VALID_UOP_CHANGE', 'WYDVD_ANGLE_CHANGE', 'WYDVD_AUDIO_STREAM_CHANGE', 'WYDVD_SUBPICTURE_STREAM_CHANGE', 'WYDVD_DOMAIN_CHANGE', 'WYDVD_PARENTAL_LEVEL_CHANGE', 'WYDVD_BITRATE_CHANGE', 'WYDVD_STILL_ON', 'WYDVD_STILL_OFF', 'WYDVD_PLAYBACK_MODE_CHANGE', 'WYDVD_READ_ERROR', 'WYDVD_DISPLAY_MODE_CHANGE', 'WYDVD_STREAMS_CHANGE', 'WYDVD_PLAYBACK_SPEED_CHANGE', 'WYDVD_VIDEO_STANDARD_CHANGE', 'WYDVD_BREAKPOINT_REACHED', 'WYDVD_ERROR', 'WYDVD_NAV_COMMAND_EXEC', 'WYDVD_SEARCH_COMPLETE', 'WYDVD_NAVIGATION_MODE_CHANGE', 'WYDVD_IMAGE_DECODE_COMPLETE', 'WYDVD_CGMS_APS_WSS_CHANGE', 'WYDVD_UNKNOWN')
	_audio_type = ('AC3', 'MPEG1', 'MPEG2', 'LPCM', 'DTS', 'SDDS', 'WMA', 'DSD', 'MLP')
	_menu_type = dict(title=0, root=1, sub=2, audio=3, angle=4, ptt=5)
	_action_type = dict(up=0, down=1, right=2, left=3, activate=4, select_activate=5)
	_display_mode_set = {'4_3': 0, '16_9': 1, 'letterbox': 2, 'panscan': 3, 'none': 4, '4_3_letterbox': 5}
	_display_mode_get = ('4_3', '16_9', 'letterbox', 'panscan', 'none', '4_3_letterbox')
	_video_mode_set = {'NONE': 0, 'PAL': 1, 'NTSC': 2}
	_video_mode_get = ('NONE', 'PAL', 'NTSC')
	_reader = None
	_wss_change_type = ('DCAWC_NONE', 'DCAWC_COPY_MODE', 'DCAWC_COPY_PROTECTION', 'DCAWC_ANALOGUE_SOURCE_MODE', 'DCAWC_MPEG_PRESENTATION_MODE', 'DCAWC_WSS_ASPECT_RATIO', 'DCAWC_FILM_CAMERA_MODE', 'DCAWC_SUBTITLING_MODE')
	_copy_mode = ('VCPMD_INVALID', 'VCPMD_UNKNOWN,VCPMD_DEFAULT', 'VCPMD_COPYING_PERMITTED', 'VCPMD_ONE_COPY_PERMITTED', 'VCPMD_NO_COPYING_PERMITTED', 'VCPMD_NUMBER')
	_copy_protection = ('VCP_OFF', 'VCP_STAGE1', 'VCP_STAGE2', 'VCP_STAGE3')
	_video_analog_source_mode = ('VASMD_DEFAULT', 'VASMD_ANALOGUE_PRE_RECORDED', 'VASMD_NOT_ANALOGUE_PRE_RECORDED')
	_video_presentation_mode = ('VPRM_INVALID', 'VPRM_UNKNOWN', 'VPRM_4_BY_3_NORMAL', 'VPRM_4_BY_3_FULL', 'VPRM_4_BY_3_LETTERBOXED', 'VPRM_16_BY_9_ANAMORPHIC', 'VPRM_14_BY_9_LETTERBOXED_CENTER', 'VPRM_14_BY_9_LETTERBOXED_TOP', 'VPRM_16_BY_9_LETTERBOXED_TOP', 'VPRM_LARGE_16_BY_9_LETTERBOXED_CENTER', 'VPRM_14_BY_9_ANAMORPHIC', 'VPRM_RESERVED', 'VPRM_NUMBER')
	_video_film_camera_mode = ('VFCMD_DEFAULT', 'VFCMD_CAMERA', 'VFCMD_FILM')
	_video_sub_mode = ('VSTM_DEFAULT', 'VSTM_NO_SUBTITLE', 'VSTM_INSIDE_ACTIVE_PICTURE', 'VSTM_OUTSIDE_ACTIVE_PICTURE')
	_wydvd_error = ('WYDVD_OK', 'WYDVD_ERROR', 'WYDVD_NOT_ENOUGH_MEMORY', 'WYDVD_UOP_PROHIBITED', 'WYDVD_NO_RESUME_INFORMATION', 'WYDVD_TITLE_NOT_FOUND', 'WYDVD_RANGE_VIOLATION', 'WYDVD_INVALID_PARAMETERS', 'WYDVD_OBJECT_NOT_FOUND', 'WYDVD_PARENTAL_LEVEL_TOO_LOW', 'WYDVD_OPERATION_NOT_SUPPORTED', 'WYDVD_UNIMPLEMENTED', 'WYDVD_BUTTON_NOT_FOUND', 'WYDVD_NO_FIRST_PLAY_PGC', 'WYDVD_UNEXPECTED_NAVIGATION_ERROR', 'WYDVD_OBJECT_EMPTY', 'WYDVD_OBJECT_IN_USE', 'WYDVD_INVALID_CONFIGURE_STATE', 'WYDVD_OPERATION_PROHIBITED')

	def __init__(self, dbus=None):
		self._client_callback = None
		self._iso = False
		if dbus:
			self.wdb = dbus
			self.ref = self.wdb.reference(self._dbus_name, self._dbus_path)
			self.event_inst = self.wdb.instance(self._dbus_path)
		else:
			self.wdb_client = WyDbus('com.wyplay.wyplay_client', system=True)
			self.ref = self.wdb_client.reference(self._dbus_name, self._dbus_path)
			self.event_inst = self.wdb_client.instance(self._dbus_path)
		self.event_inst.signal('event_callback', 'ii', self._event_callback, WDB_AS_THREAD)
		self.event_inst.signal('ready', '', self._ready, WDB_AS_THREAD)
		self.ready_event = Event()
		self._open = self.ref.method('open', '', 'i')
		self._close = self.ref.method('close', '', 'i')
		self._play = self.ref.method('play', '', 'i')
		self._stop = self.ref.method('stop', '', 'i')
		self._play_title = self.ref.method('play_title', 'i', 'i')
		self._play_ptt = self.ref.method('play_ptt', 'ii', 'i')
		self._get_number_of_title = self.ref.method('get_number_of_title', '', '(ii)')
		self._get_number_of_ptt = self.ref.method('get_number_of_ptt', 'i', '(ii)')
		self._get_volume_name = self.ref.method('get_volume_name', '', '(is)')
		self._get_audio_stream = self.ref.method('get_audio_stream', '', '(ii)')
		self._set_audio_stream = self.ref.method('set_audio_stream', 'i', 'i')
		self._get_sub_stream = self.ref.method('get_sub_stream', '', '(ii)')
		self._set_sub_stream = self.ref.method('set_sub_stream', 'ib', 'i')
		self._pause = self.ref.method('pause', 'b', 'i')
		self._set_speed = self.ref.method('set_speed', 'd', 'i')
		self._set_trickmode = self.ref.method('set_trickmode', 'd', 'i')
		self._get_speed = self.ref.method('get_speed', '', '(id)')
		self._get_audio_info = self.ref.method('get_audio_info', 'i', '(iiiiiiiiiiiii)')
		self._get_sub_info = self.ref.method('get_sub_info', 'i', '(iii)')
		self._set_langage = self.ref.method('set_langage', 'iiii', 'i')
		self._select_menu = self.ref.method('select_menu', 'i', 'i')
		self._get_available_stream = self.ref.method('get_available_stream', '', '(iii)')
		self._action_button = self.ref.method('action_button', 'ii', 'i')
		self._get_button_info = self.ref.method('get_button_info', '', '(iiii)')
		self._set_display_mode = self.ref.method('set_display_mode', 'i', 'i')
		self._get_display_mode = self.ref.method('get_display_mode', '', '(ii)')
		self._get_ptt_location = self.ref.method('get_ptt_location', '', '(iiiii)')
		self._get_title_location = self.ref.method('get_title_location', '', '(iiiii)')
		self._get_ptt_duration = self.ref.method('get_ptt_duration', '', '(iiiii)')
		self._get_title_duration = self.ref.method('get_title_duration', '', '(iiiii)')
		self._set_menu_langage = self.ref.method('set_menu_langage', 'i', 'i')
		self._next_chapter = self.ref.method('next_chapter', '', 'i')
		self._previous_chapter = self.ref.method('previous_chapter', '', 'i')
		self._get_player_mode = self.ref.method('get_player_mode', '', '(ii)')
		self._check_menu_available = self.ref.method('check_menu_available', 'i', '(ii)')
		self._resume = self.ref.method('resume', '', 'i')
		self._set_parental_level = self.ref.method('set_parental_level', 'i', 'i')
		self._set_parental_country = self.ref.method('set_parental_country', 'i', 'i')
		self._get_parental_info = self.ref.method('get_parental_info', '', '(iiii)')
		self._time_play = self.ref.method('time_play', 'iiii', 'i')
		self._time_search = self.ref.method('time_search', 'iii', 'i')
		self._set_angle = self.ref.method('set_angle', 'i', 'i')
		self._get_number_of_angle = self.ref.method('get_number_of_angle', 'i', '(ii)')
		self._get_current_angle = self.ref.method('get_current_angle', '', '(ii)')
		self._set_video_output = self.ref.method('set_video_output', 'i', 'i')
		self._is_sub_enabled = self.ref.method('is_sub_enabled', '', '(ii)')
		self._seek_percent = self.ref.method('seek_percent', 'ii', 'i')
		self._set_breakpoint = self.ref.method('set_breakpoint', 'i', 'i')
		self._set_surround = self.ref.method('set_surround', 'i', 'i')
		self.domain = self._domain_type[0]
		self.cur_title = 0
		self.cur_ptt = 0
		self._test = self.ref.method('test', '', 'i')
		return None

	def _wss_management(self, param):
		try:
			change_type = (param & 4278190080L) >> 24
			change_val = param & 16777215
			change_type = self._wss_change_type[change_type]
			if change_type == 'DCAWC_NONE':
				print 'DCAWC_NONE'
			elif change_type == 'DCAWC_COPY_MODE':
				change_val = self._copy_mode[change_val]
			elif change_type == 'DCAWC_COPY_PROTECTION':
				change_val = self._copy_protection[change_val]
			elif change_type == 'DCAWC_ANALOGUE_SOURCE_MODE':
				change_val = self._video_analog_source_mode[change_val]
			elif change_type == 'DCAWC_MPEG_PRESENTATION_MODE':
				change_val = self._display_mode_get[change_val]
			elif change_type == 'DCAWC_WSS_ASPECT_RATIO':
				change_val = self._video_presentation_mode[change_val]
			elif change_type == 'DCAWC_FILM_CAMERA_MODE':
				change_val = self._video_film_camera_mode[change_val]
			elif change_type == 'DCAWC_SUBTITLING_MODE':
				change_val = self._video_sub_mode[change_val]
		except Exection, e:
			print 'error in wss management :',
			print e
			change_val = 0
			change_type = 0
		return (change_type, change_val)

	def _event_callback(self, type, param):
		event = {}
		event['type'] = self._event_type[type]
		event['param'] = param
		if event['type'] == 'WYDVD_PLAYBACK_MODE_CHANGE':
			try:
				event['param'] = self._player_mode[param]
			except:
				event['param'] = self._player_mode[0]
		elif event['type'] == 'WYDVD_DOMAIN_CHANGE':
			try:
				event['param'] = self._domain_type[param]
				self.domain = self._domain_type[param]
			except:
				event['param'] = self._domain_type[0]
				self.domain = self._domain_type[0]
		elif event['type'] == 'WYDVD_TITLE_CHANGE':
			event['param'] = param
			self.cur_title = param
		elif event['type'] == 'WYDVD_PART_OF_TITLE_CHANGE':
			event['param'] = param
			self.cur_ptt = param
		elif event['type'] == 'WYDVD_DISPLAY_MODE_CHANGE':
			try:
				event['param'] = self._display_mode_get[param]
			except:
				event['param'] = self._display_mode_get[0]
		elif event['type'] == 'WYDVD_VIDEO_STANDARD_CHANGE':
			try:
				event['param'] = self._video_mode_get[param]
			except:
				event['param'] = self._video_mode_get[0]
		elif event['type'] == 'WYDVD_CGMS_APS_WSS_CHANGE':
			event['param'], event['value'] = self._wss_management(param)
		if self._client_callback != None:
			self._client_callback(event)
		return None

	def _ready(self):
		self.ready_event.set()
		return None

	def register_callback(self, callback):
		self._client_callback = callback
		return None

	def unregister_callback(self):
		self._client_callback = None
		return None

	def stop_wydvd(self):
		self.dbus_thread.stop()
		self.dbus_thread.join()
		return None

	def _check_error(self, res):
		if res != 0:
			raise WydvdException('wydvd', self._wydvd_error[res], res)
		return None

	def _call(self, func, *args):
		try:
			ret = func(*args)
		except:
			raise WydvdException('call')
		if isinstance(ret, int):
			self._check_error(ret)
		else:
			self._check_error(ret[0])
			return ret[1:]
		return None

	# Spawn a runnning wydvd process and connect to it    
	# @postcondition: connected to wydvd process
	def open(self, path=None):
		print 'WyDvd.open path: ',
		print path
		if not path:
			_pre_process = Popen(['ln', '-sf', '/dev/sr0', '/dev/cdrom'])
			os.waitpid(_pre_process.pid, 0)
			self._reader = Popen(['wydvd'])
			self._iso = False
		else:
			path = urllib.unquote(path)
			ss = path.split('://')
			if len(ss) == 1:
				_pre_process = Popen(['ln', '-sf', path, '/dev/loop0'])
			else:
				if ss[0] != 'file':
					raise WydvdException('Unsupported URI type')
				_pre_process = Popen(['ln', '-sf', ss[1], '/dev/loop0'])
			os.waitpid(_pre_process.pid, 0)
			self._reader = Popen(['wydvd', 'iso'])
			self._iso = True
		self.ready_event.wait(15)
		if self.ready_event.isSet():
			self._call(self._open)
			self.ready_event.clear()
		else:
			raise WydvdException('Error Open')
		return None

	def close(self):
		os.system('kill ' + str(self._reader.pid))
		os.waitpid(self._reader.pid, 0)
		return None

	# Connect to a running wydvd process
	# @postcondition: connected to wydvd process
	def start(self):
		self._call(self._open)
		return None

	# Start playback of DVD Video
	# @precondition: connected to wydvd process
	# @postcondition: DVD Video playback is started
	def play(self):
		time.sleep(1)
		self._call(self._play)
		return None

	# Stop playback of DVD Video
	# @precondition: DVD Video playback must be start before
	def stop(self):
		self._call(self._stop)
		return None

	# Play given title
	# @precondition: connected to wydvd process
	def play_title(self, title=1):
		try:
			title = int(title)
		except:
			print 'warning : except. parameter are incorrect'
			title = 1
		self._call(self._play_title, title)
		return None

	# Play PTT indentify by 'title' and 'ptt'
	# Could return an error
	# @precondition: connected to wydvd process
	def play_ptt(self, title=1, ptt=1):
		try:
			title = int(title)
			ptt = int(ptt)
		except:
			print 'warning : except. parameter are incorrect'
			title = 1
			ptt = 1
		self._call(self._play_ptt, title, ptt)
		return None

	# @precondition: connected to wydvd process
	def get_number_of_title(self):
		ret = self._call(self._get_number_of_title)
		return ret[0]

	def get_number_of_ptt(self, title=1):
		try:
			title = int(title)
		except:
			print 'warning : except. parameter are incorrect'
			title = 1
		ret = self._call(self._get_number_of_ptt, title)
		return ret[0]

	def get_volume_name(self):
		ret = self._call(self._get_volume_name)
		return ret[0]

	def pause(self):
		self._call(self._pause, True)
		return None

	def unpause(self):
		self._call(self._pause, False)
		return None

	def set_speed(self, speed=1):
		try:
			speed = float(speed)
		except:
			print 'warning : except. parameter are incorrect'
			speed = 1
		self._call(self._set_speed, speed)
		return None

	def set_trickmode(self, speed=1):
		try:
			speed = float(speed)
		except:
			print 'warnin : except parameter are incorrect'
			speed = 1
		print 'ENTERING TRICK MODE'
		self._call(self._set_trickmode, speed)
		return None

	def get_speed(self):
		ret = self._call(self._get_speed)
		return ret[0]

	def get_audio_info(self, audio_stream=0):
		try:
			audio_stream = int(audio_stream)
		except:
			print 'warning : except. parameter are incorrect'
			audio_stream = 0
		ret = self._call(self._get_audio_info, audio_stream)
		info = {}
		if ret[0] != 0:
			info['language'] = chr(ret[0] >> 8) + chr(ret[0] & 255)
		else:
			info['language'] = ''
		if ret[1] != 0:
			info['language_ext'] = chr(ret[1] >> 8) + chr(ret[1] & 255)
		else:
			info['language_ext'] = ''
		if ret[2] < len(self._audio_type):
			info['coding'] = self._audio_type[ret[2]]
		else:
			info['coding'] = 'None'
		info['bitspersample'] = ret[3]
		info['samplespersecond'] = ret[4]
		info['channels'] = ret[5]
		return info

	def get_audio_stream(self):
		ret = self._call(self._get_audio_stream)
		return ret[0]

	def set_audio_stream(self, audio_stream=0):
		try:
			audio_stream = int(audio_stream)
		except:
			print 'warning : except. parameter are incorrect'
			audio_stream = 0
		self._call(self._set_audio_stream, audio_stream)
		return None

	def get_sub_stream(self):
		ret = self._call(self._get_sub_stream)
		return ret[0]

	def set_sub_stream(self, sub_stream=0, display=True):
		try:
			sub_stream = int(sub_stream)
			if isinstance(display, str):
				if display.lower() == 'true':
					display = True
				else:
					display = False
			else:
				display = bool(display)
		except Exception, e:
			print 'warning : except. parameter are incorrect :',
			print e
			sub_stream = 0
			display = True
		self._call(self._set_sub_stream, sub_stream, display)
		return None

	def set_langage(self, audio_lang='en', sub_lang='en'):
		try:
			if isinstance(audio_lang, str) == False:
				audio_lang = 'en'
			if isinstance(sub_lang, str) == False:
				sub_lang = 'en'
			audio_dec = ord(audio_lang[0]) << 8 | ord(audio_lang[1])
			sub_dec = ord(sub_lang[0]) << 8 | ord(sub_lang[1])
		except:
			print 'warning : except. parameter are incorrect'
			audio_dec = 25966
			sub_dec = 25966
		self._call(self._set_langage, audio_dec, 0, sub_dec, 0)
		return None

	def select_menu(self, menu='title'):
		try:
			if isinstance(menu, str) and menu in self._menu_type:
				menu_type = self._menu_type[menu]
			else:
				menu_type = 0
		except:
			print 'warning : except. parameter are incorrect'
			menu_type = 0
		self._call(self._select_menu, menu_type)
		return None

	def get_sub_info(self, sub_stream=0):
		try:
			sub_stream = int(sub_stream)
		except:
			print 'warning : except. parameter are incorrect'
			sub_stream = 0
		ret = self._call(self._get_sub_info, sub_stream)
		info = {}
		if ret[0] != 0:
			info['language'] = chr(ret[0] >> 8) + chr(ret[0] & 255)
		else:
			info['language'] = ''
		return info

	def get_available_stream(self):
		ret = self._call(self._get_available_stream)
		stream = {}
		stream['nb_audio'] = ret[0]
		stream['nb_sub'] = ret[1]
		return stream

	def action_button(self, action='activate', num_button=0):
		try:
			if isinstance(action, str) and action in self._action_type:
				action_type = self._action_type[action]
			else:
				action_type = self._action_type['activate']
			num_button = int(num_button)
		except:
			print 'warning : except. parameter are incorrect'
			action_type = self._action_type['activate']
			num_button = 0
		self._call(self._action_button, action_type, num_button)
		return None

	def get_button_info(self):
		ret = self._call(self._get_button_info)
		button = {}
		button['min'] = ret[0]
		button['nb'] = ret[1]
		button['current'] = ret[2]
		return button

	def set_display_mode(self, display_mode='4_3'):
		try:
			if isinstance(display_mode, str) and display_mode in self._display_mode_set:
				display_type = self._display_mode_set[display_mode]
			else:
				display_type = 0
		except:
			print 'warning : except. parameter are incorrect'
			display_type = 0
		self._call(self._set_display_mode, display_type)
		return None

	def get_display_mode(self):
		ret = self._call(self._get_display_mode)
		return self._display_mode_get[ret[0]]

	def get_ptt_location(self):
		ret = self._call(self._get_ptt_location)
		info = {}
		info['num'] = ret[0]
		info['hours'] = ret[1]
		info['minutes'] = ret[2]
		info['seconds'] = ret[3]
		return info

	def get_ptt_duration(self):
		ret = self._call(self._get_ptt_duration)
		info = {}
		info['num'] = ret[0]
		info['hours'] = ret[1]
		info['minutes'] = ret[2]
		info['seconds'] = ret[3]
		return info

	def get_title_location(self):
		ret = self._call(self._get_title_location)
		info = {}
		info['num'] = ret[0]
		info['hours'] = ret[1]
		info['minutes'] = ret[2]
		info['seconds'] = ret[3]
		return info

	def get_title_duration(self):
		ret = self._call(self._get_title_duration)
		info = {}
		info['num'] = ret[0]
		info['hours'] = ret[1]
		info['minutes'] = ret[2]
		info['seconds'] = ret[3]
		return info

	def set_menu_langage(self, menu_lang='en'):
		try:
			if isinstance(menu_lang, str) == False:
				menu_lang = 'en'
			menu_dec = ord(menu_lang[0]) << 8 | ord(menu_lang[1])
		except:
			print 'warning : except. parameter are incorrect'
			menu_dec = 25966
		self._call(self._set_langage, menu_dec)
		return None

	def next_chapter(self):
		self._call(self._next_chapter)
		return None

	def previous_chapter(self):
		self._call(self._previous_chapter)
		return None

	def get_player_mode(self):
		ret = self._call(self._get_player_mode)
		return self._player_mode[ret[0]]

	def check_menu_available(self, menu='title'):
		try:
			if isinstance(menu, str) and menu in self._menu_type:
				menu_type = self._menu_type[menu]
			else:
				menu_type = 0
		except:
			print 'warning : except. parameter are incorrect'
			menu_type = 0
		ret = self._call(self._check_menu_available, menu_type)
		return bool(ret[0])

	def resume(self):
		self._call(self._resume)
		return None

	def set_parental_level(self, level=1):
		try:
			level = int(level)
		except:
			print 'warning : except. parameter are incorrect'
			level = 1
		self._call(self._set_parental_level, level)
		return None

	def set_parental_country(self, country=1):
		try:
			country = int(country)
		except:
			print 'warning : except. parameter are incorrect'
			country = 1
		self._call(self._set_parental_country, country)
		return None

	def get_parental_info(self):
		ret = self._call(self._get_parental_info)
		info = {}
		info['level'] = ret[0]
		info['country'] = ret[1]
		info['is_parental'] = ret[2]
		return info

	def time_play(self, title=1, hours=0, minutes=0, seconds=0):
		try:
			title = int(title)
			hours = int(hours)
			minutes = int(minutes)
			seconds = int(seconds)
		except:
			print 'warning : except. parameter are incorrect'
			title = 1
			hours = 0
			minutes = 0
			seconds = 0
		self._call(self._time_play, title, hours, minutes, seconds)
		return None

	def time_search(self, hours=0, minutes=0, seconds=0):
		try:
			hours = int(hours)
			minutes = int(minutes)
			seconds = int(seconds)
		except:
			print 'warning : except. parameter are incorrect'
			hours = 0
			minutes = 0
			seconds = 0
		self._call(self._time_search, hours, minutes, seconds)
		return None

	def set_angle(self, angle=0):
		try:
			angle = int(angle)
		except:
			print 'warning : except. parameter are incorrect'
			angle = 1
		self._call(self._set_angle, angle)
		return None

	def get_number_of_angle(self, title=1):
		try:
			title = int(title)
		except:
			print 'warning : except. parameter are incorrect'
			title = 1
		ret = self._call(self._get_number_of_angle, title)
		return ret[0]

	def get_current_angle(self):
		ret = self._call(self._get_current_angle)
		return ret[0]

	def set_video_output(self, video='NONE'):
		try:
			if isinstance(video, str) and video in self._video_mode_set:
				video_mode = self._video_mode_set[video]
			else:
				video_mode = 0
		except:
			print 'warning : except. parameter are incorrect'
			video_mode = 0
		self._call(self._set_video_output, video_mode)
		return None

	def is_sub_enabled(self):
		ret = self._call(self._is_sub_enabled)
		return bool(ret[0])

	def seek_percent(self, direction=1):
		try:
			direction = int(direction)
		except:
			print 'warning : except. parameter are incorrect'
			direction = 1
		self._call(self._seek_percent, 10, direction)
		return None

	def set_breakpoint(self):
		self._call(self._set_breakpoint)
		return None

	# Enable or disable sending raw surround data to the SP/DIF output.    
	# If False, send PCM audio data.
	# If True, send raw undecoded audio frames. may be AC3, DTS, or
	# any audio codec supported by an external amplifier connected through SP/DIF or HDMI.
	def set_surround(self, enable):
		if enable not in (False, True):
			return None
		self._set_surround(int(enable))
		return None

	spdif_surround = property(fset=set_surround)

	def test(self):
		self._call(self._test)
		return None
