# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definition
#
#
#
# Changes:
#
# 2012-03-23
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

import sys
import time

from wydvd.hooker import HookProxy

__all__ = ['TimerHookProxy']



# Proxy with timing support
# This proxy will dump all method call in file given at instanciation (default to sys.stderr)
# Each method call is preceded by a time.sleep() with a duration of return of previous method call, and time before the next method call
class TimerHookProxy(HookProxy):

	def __init__(self, objname, obj, dafile=sys.stderr):
		HookProxy.__init__(self, objname, obj)
		self._last_time = time.time()
		self._file = dafile
		return None
		
	def _pre(self, name, *args, **kwds):
		delay = time.time() - self._last_time
		print >> self._file, 'time.sleep(%f)' % delay
		print >> self._file, 'rval = %s' % self._call_str(name, *args, **kwds)
		return None

	def _post(self, name, *args, **kwds):
		self._last_time = time.time()
		return None



