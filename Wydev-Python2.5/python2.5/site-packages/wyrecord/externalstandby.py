# -*- coding: utf-8 -*- 
#
# Description:
#
# WyRecord External Standby Class Definition
#
#
#
# Changes:
#
# 2014-03-26
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from logger import log
from config import *
from peewee.analyse import Chrono
from peewee.analyse import timestep


class ExternalStandby(object):
	
	def __init__(self, wydb, scheduler=None):
		self.wdb = wydb
		self.scheduler = scheduler
		self.ref_wystandby = self.wdb.reference(config.standby_dbus_bus_name, config.standby_dbus_path_name)
		self._AddStandbyModule = self.ref_wystandby.method('AddStandbyModule', 's', 's')
		self._RemoveStandbyModule = self.ref_wystandby.method('RemoveStandbyModule', 's', 'i')
		self.SetMaxPowerState = self.ref_wystandby.method('NotifyNewMaxPowerState', 'si', '')
		self.SetPowerState = self.ref_wystandby.method('NotifyPowerStateChanged', 'si', '')
		self.SetAlarm = self.ref_wystandby.method('SetAlarm', 'x', '')
		return None

	def AddStandbyModule(self, id):
		try:
			return self._AddStandbyModule(id)
		except BaseException, e:
			log.debug(str(e))
		return id

	def RemoveStandbyModule(self, id):
		try:
			return self._RemoveStandbyModule(id)
		except BaseException, e:
			log.debug(str(e))
		return 0

	def treat_StateReadySignal(self):
		log.debug('StateReadySignal')
		self.scheduler.AsynchronousCheckSchedule()
		self.SetPowerState(config.wystandby_id, APM_STATE_READY)
		return None

	def treat_StateStandbySignal(self):
		log.debug('StateStandbySignal')
		self.SetPowerState(config.wystandby_id, APM_STATE_STANDBY)
		return None

	def treat_StateSuspendSignal(self):
		log.debug('StateSuspendSignal')
		if self._ExternalStandby__is_standby_ready():
			self.SetPowerState(config.wystandby_id, APM_STATE_SUSPEND)
		else:
			self.SetPowerState(config.wystandby_id, APM_STATE_STANDBY)
		return None

	def treat_StateOffSignal(self):
		log.debug('StateOffSignal')
		if self._ExternalStandby__is_standby_ready():
			self.SetPowerState(config.wystandby_id, APM_STATE_OFF)
		else:
			self.SetPowerState(config.wystandby_id, APM_STATE_STANDBY)
		return None

	def _ExternalStandby__is_standby_ready(self):
		if self.scheduler.IsSomeRecordingRunning():
			return False
		rec = self.scheduler.GetFirstRecordingToStart()
		if rec:
			if rec.start_time:
				time = rec.start_time - rec.start_padding
			else:
				time = int(time.time())
			self.SetAlarm(time)
		return True
