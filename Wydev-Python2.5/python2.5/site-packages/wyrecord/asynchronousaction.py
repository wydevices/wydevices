# -*- coding: utf-8 -*- 
#
# Description:
#
# WyRecord Async Action Class Definition
#
#
#
# Changes:
#
# 2014-03-26
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from threading import Thread
from threading import Lock
from peewee.misc_utils import MetaSingleton
from tools import removeFolder
from logger import log
from config import *
import time


# An action is an object with an execute method
class Action():
	
	def __init__(self):
		return None

	def execute(self):
		return None


# This thread is used by wyrecord in order to do action in another thread.
class AsynchronousAction(Thread):
	
	__metaclass__ = MetaSingleton
	
	def __init__(self):
		Thread.__init__(self)
		self.action_list = []
		self.quit = False
		self.on_pause = False
		self.protec_list = Lock()
		return None

	def appendAction(self, action):
		self.protec_list.acquire()
		self.action_list.append(action)
		self.protec_list.release()
		return None

	def pause(self):
		self.on_pause = True
		return None

	def resume(self):
		self.on_pause = False
		return None

	def exit(self):
		self.quit = True
		return None

	def run(self):
		while not self.quit:
			while not self.action_list or self.on_pause:
				time.sleep(0.80000000000000004)
			time.sleep(0.80000000000000004)
			if self.on_pause:
				continue
			self.protec_list.acquire()
			loop_list = [] + self.action_list
			self.protec_list.release()
			for action in loop_list:
				if self.on_pause:
					break
				action.execute()
				self.protec_list.acquire()
				self.action_list.remove(action)
				self.protec_list.release()
		return None


# This thread is used by wyrecord in order to do action in another thread.
class AsynchronousZap(Thread):

	def __init__(self, live_controller):
		Thread.__init__(self)
		self.service = None
		self.live_controller = live_controller
		return None

	def appendService(self, service):
		self.service = service
		return None

	def run(self):
		while self.service:
			current_zap = self.service
			self.live_controller.real_zap(current_zap)
			if self.service == current_zap:
				self.service = None
		return None

	def isRequiredService(self, service_id):
		if not config.asynchronous_zap:
			return True
		return service_id == self.service


class ActionSaveRecordingList(Action):
	
	def __init__(self, scheduler):
		self.scheduler = scheduler
		return None

	def execute(self):
		self.scheduler.RealSaveRecordingList()
		return None


class ActionRemoveFolder(Action):
	
	def __init__(self, path):
		self.path = path
		return None

	def execute(self):
		log.debug('remove folder start: ' + self.path)
		removeFolder(self.path)
		log.debug('remove folder over: ' + self.path)
		return None


class ActionDeleteRecorderInstance(Action):

	def __init__(self, recorder_factory, recorder_instance):
		self.recorder_factory = recorder_factory
		self.recorder_instance = recorder_instance
		return None

	def execute(self):
		self.recorder_factory.deleteRecorder(self.recorder_instance)
		return None
