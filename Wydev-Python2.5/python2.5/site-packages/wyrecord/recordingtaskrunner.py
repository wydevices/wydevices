# -*- coding: utf-8 -*- 
#
# Description:
#
# WyRecord Recording Task Runner Class Definition
#
#
#
# Changes:
#
# 2014-03-26
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from logger import log
from recording import RECORDING_TYPE_NOT_SCHEDULED
from config import *


class RecordingTaskRunner(object):

	def __init__(self, live, ext_disk_space):
		self.task_list = []
		self._RecordingTaskRunner__global_start_time = 0
		self._RecordingTaskRunner__global_stop_time = 0
		self.live = live
		self.ext_disk_space = ext_disk_space
		return None

	def getTaskList(self):
		return self.task_list

	def containsSchedule(self):
		for rec in self.task_list:
			if rec.type != RECORDING_TYPE_NOT_SCHEDULED:
				return True
		return False

	def beginRec(self, rec):
		self.task_list.append(rec)
		return True

	def endRec(self, rec):
		self.task_list.remove(rec)
		return None

	def _RecordingTaskRunner__get_global_start_time(self):
		if not self.task_list:
			self._RecordingTaskRunner__global_start_time = 0
		else:
			self._RecordingTaskRunner__global_start_time = min([rec.start_time for rec in self.task_list])
		return self._RecordingTaskRunner__global_start_time

	def _RecordingTaskRunner__set_global_start_time(self, global_start_time):
		self._RecordingTaskRunner__global_start_time = global_start_time
		return None

	global_start_time = property(fget=_RecordingTaskRunner__get_global_start_time, fset=_RecordingTaskRunner__set_global_start_time)

	def _RecordingTaskRunner__get_global_stop_time(self):
		if not self.task_list:
			self._RecordingTaskRunner__global_stop_time = 0
		else:
			stop_time_list = [rec.stop_time for rec in self.task_list]
			if 0 in stop_time_list:
				self._RecordingTaskRunner__global_stop_time = 0
			else:
				self._RecordingTaskRunner__global_stop_time = max(stop_time_list)
		return self._RecordingTaskRunner__global_stop_time

	def _RecordingTaskRunner__set_global_stop_time(self, global_stop_time):
		self._RecordingTaskRunner__global_stop_time = global_stop_time
		return None

	global_stop_time = property(fget=_RecordingTaskRunner__get_global_stop_time, fset=_RecordingTaskRunner__set_global_stop_time)
