# -*- coding: utf-8 -*- 
#
# Description:
#
# WyRecord External Recorder Factory Class Definition
#
#
#
# Changes:
#
# 2014-03-26
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from logger import log
import os
from externalrecorder import ExternalRecorder
from externalrecorder import DummyExternalRecorder
from config import *
from asynchronousaction import ActionRemoveFolder
from asynchronousaction import AsynchronousAction
from asynchronousaction import ActionDeleteRecorderInstance
from peewee.analyse import timestep


class ExternalRecorderFactory(object):
	
	def __init__(self, wydb):
		self.wydb = wydb
		record = wydb.reference(config.wyplayer_dbus_bus_name, config.wyplayer_dbus_record_path_name)
		self.rec_new = record.method('new', 's', 'o')
		self.rec_del = record.method('del', 'o', '')
		self.recorder_to_delete_list = []
		return None

	def getNewExternalRecorder(self, dest_uri):
		log.info('ExternalRecorderFactory called: getNewExternalRecorder' + dest_uri)
		dest_dir = os.path.split(dest_uri[len(URL_PREFIX_REC_TIMESHIFT):])[0]
		log.debug('dest_dir timeshift ' + dest_dir)
		os.makedirs(dest_dir)
		dest_uri = dest_uri + '?cksize=' + str(config.timeshift_chunk_max_size) + '&recsize=' + str(config.max_size_for_timeshift) + '&silent_seek=1'
		timestep('rec_new_init')
		try:
			new_dbuspath = self.rec_new(dest_uri)
		except BaseException, e:
			log.debug(str(e))
			return False
		timestep(config.wyplayer_dbus_record_path_name + ' new')
		log.debug('new_dbuspath= ' + new_dbuspath)
		reference = self.wydb.reference(config.wyplayer_dbus_bus_name, new_dbuspath)
		return ExternalRecorder(dest_uri, reference, new_dbuspath)

	def deleteExternalRecorder(self, ext_recorder):
		timestep('deleteExternalRecorder init')
		try:
			self.rec_del(ext_recorder.dbuspath)
			timestep(config.wyplayer_dbus_record_path_name + ' delete')
		except BaseException, e:
			log.debug(str(e))
		return None

	def appendRecorderToDelete(self, recorder):
		if not recorder:
			log.debug('ask to delete a None recorder')
			return None
		dest_uri = recorder.dest_uri
		ActionDeleteRecorderInstance(self, recorder).execute()
		if dest_uri:
			if dest_uri.startswith(URL_PREFIX_REC_TIMESHIFT):
				folder_path = os.path.split(dest_uri[len(URL_PREFIX_REC_TIMESHIFT):])[0]
				if config.asynchronous_chunk_removal:
					AsynchronousAction().appendAction(ActionRemoveFolder(folder_path))
				else:
					log.debug('remove timeshift folder: ' + folder_path)
					removeFolder(folder_path)
					timestep('delete_timeshift time')
		return None

	def deleteRecorder(self, external_recorder):
		self.deleteExternalRecorder(external_recorder)
		return None



class DummyExternalRecorderFactory(object):
	
	def __init__(self):
		return None

	def getNewExternalRecorder(self, dest_uri):
		log.info('ExternalRecorderFactory called: getNewExternalRecorder' + dest_uri)
		return DummyExternalRecorder(dest_uri, None, 'dummy')

	def deleteExternalRecorder(self, ext_recorder):
		log.info('ExternalRecorderFactory called: deleteExternalRecorder')
		return None

	def appendRecorderToDelete(self, recorder):
		log.info('ExternalRecorderFactory called: appendRecorderToDelete')
		return None

	def checkRecorderToDelete(self):
		log.info('ExternalRecorderFactory called: checkRecorderToDelete')
		return None
