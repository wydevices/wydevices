# -*- coding: utf-8 -*- 
#
# Description:
#
# WyRecord Dbus API Class Definition
#
#
#
# Changes:
#
# 2014-03-26
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


import time
from config import *
from logger import log
from wydbus import WDB_AS_THREAD
from peewee.powerutils import PowerManagerModule
from globallock import GlobalLock
from tools import WyrecordOnShotTimer


class DbusSignaler(object):
	
	def __init__(self, wdb):
		self.wdb = wdb
		self.signalNewRecord = self.wdb.signal(config.wyrecord_dbus_path_name, 'signal_new_record', '(siiss)', interface=config.wyrecord_dbus_bus_name)
		return None

	def emitNewRecordInfo(self, record_info):
		channel_name = record_info.service_name
		scheduled_start_time = record_info.start_time
		scheduled_end_time = record_info.stop_time
		duration = record_info.stop_time - record_info.start_time
		title = (record_info.name if record_info.name else ('%s %s %s' % record_info.start_time, record_info.service_name, duration))
		uri = record_info.url
		self.signalNewRecord((channel_name, scheduled_start_time, scheduled_end_time, title, uri))
		return None



class DbusListener(object):
	
	def __init__(self, wdb, scheduler, ext_standby, live_manager, wyscan):
		self.wdb = wdb
		self.scheduler = scheduler
		self.ext_standby = ext_standby
		self.live_manager = live_manager
		self.wyscan = wyscan
		self.wyscan.macrovision.register(self.dbus_handler_macrovision_signal)
		self.wdb_inst_wyclock = self.wdb.instance(config.wyclock_dbus_path_name)
		self.wdb_inst_wyclock.signal('TimeChanged', 'x', self.time_updated, WDB_AS_THREAD)
		try:
			self.wdb_inst_standby = PowerManagerModule('wyrecord')
			self.wdb_inst_standby.apm_ready = self.ext_standby.treat_StateReadySignal
			self.wdb_inst_standby.apm_standby = self.ext_standby.treat_StateStandbySignal
			self.wdb_inst_standby.apm_suspend = self.ext_standby.treat_StateSuspendSignal
			self.wdb_inst_standby.apm_off = self.ext_standby.treat_StateOffSignal
		except:
			log.error('failed to initialyse wycrs')
		return None

	def time_updated(self, delta_time):
		log.debug('time_updated ' + str(delta_time))
		self.live_manager.AsynchronousUpdateLiveTime(delta_time)
		self.scheduler.AsynchronousCheckSchedule()
		return None

	def ChangeState(self, state):
		try:
			log.debug('Change State => state_to_call: ' + str(state))
			self.state_to_call[state]()
		except:
			log.debug('Change State => unknown state')
		return None

	def dbus_handler_macrovision_signal(self, service_id, has_macrovision):
		if config.manage_macrovision:
			WyrecordOnShotTimer(self.cbTreatMacrovisionSignal, service_id, has_macrovision).start(0)
		return None

	@GlobalLock()
	def cbTreatMacrovisionSignal(self, service_id, has_macrovision):
		log.debug('TreatMacrovisionSignal ' + str(service_id) + ' ' + str(has_macrovision))
		for live in self.live_manager.GetRunningLiveList():
			if live.serviceid == service_id:
				live.has_macrovision = has_macrovision
				if live.isRecording():
					self.scheduler.StopRecording(live.current_rec.id)
		return None
