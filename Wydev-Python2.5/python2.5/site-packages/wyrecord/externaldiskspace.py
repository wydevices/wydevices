# -*- coding: utf-8 -*- 
#
# Description:
#
# WyRecord External Disk Space Class Definition
#
#
#
# Changes:
#
# 2014-03-26
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from logger import log
from config import *
from peewee.analyse import Chrono
from peewee.analyse import timestep
import os


class SpaceInfo(object):
	
	def __init__(self, wyspace_manager_dict):
		self.device_id = wyspace_manager_dict[0]
		self.total_blocks = wyspace_manager_dict[1]
		self.free_blocks = wyspace_manager_dict[2]
		self.used_blocks = wyspace_manager_dict[3]
		self.size_of_block = wyspace_manager_dict[4]
		return None


class ExternalDiskSpace(object):
	
	def __init__(self, wdb, device):
		self.wdb = wdb
		self.device = device
		self.ref_wyscpacemanager = self.wdb.reference(config.space_manager_dbus_bus_name, config.space_manager_dbus_path_name)
		self.max_timeshift_size = config.max_size_for_timeshift
		self.total_rec = 0
		self.total_used = 0
		self.blind_free_space = 0
		self.free_space = 0
		self.live_manager = None
		return None

	def ReserveSpace(self, path, size):
		try:
			return self._ReserveSpace(path, size)
		except BaseException, e:
			log.debug(str(e))
		return False

	def ResizeSpace(self, path, size):
		try:
			return self._ResizeSpace(path, size)
		except BaseException, e:
			log.debug(str(e))
		return False

	def SpaceInfo(self):
		stats = os.statvfs(config.base_timeshift)
		return SpaceInfo([0, stats.f_blocks, stats.f_bfree, stats.f_blocks - stats.f_bfree, stats.f_bsize])

	def getAvailableDiskSpace(self):
		self.update()
		return self.free_space

	def _ExternalDiskSpace__freeSpace(self):
		stats = self.SpaceInfo()
		res = (stats.total_blocks * config.max_percentage_disk_use / 100 - stats.total_blocks - stats.free_blocks) * stats.size_of_block
		return res

	def update(self):
		total_rec = 0
		total_used = 0
		for live in self.live_manager.GetRunningLiveList():
			rec = live.getRecordingSize()
			total_rec += rec
			used = live.getUsedSpace()
			total_used += used
		blind_free_space = self._ExternalDiskSpace__freeSpace()
		total_for_wyrecord = blind_free_space + total_used
		total_for_timeshift = total_for_wyrecord - total_rec
		max_timeshift_size = total_for_timeshift / config.live_count_max
		if max_timeshift_size >= config.max_size_for_timeshift:
			max_timeshift_size = config.max_size_for_timeshift
		else:
			if max_timeshift_size <= config.min_size_for_timeshift:
				max_timeshift_size = config.min_size_for_timeshift
		total_for_timeshift = max_timeshift_size * config.live_count_max
		self.max_timeshift_size = max_timeshift_size
		self.total_rec = total_rec
		self.total_used = total_used
		self.blind_free_space = blind_free_space
		self.free_space = self.blind_free_space + self.total_used - self.total_rec - total_for_timeshift
		return None
