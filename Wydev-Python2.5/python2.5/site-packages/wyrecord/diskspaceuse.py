# -*- coding: utf-8 -*- 
#
# Description:
#
# WyRecord Disk Space Used Class Definition
#
#
#
# Changes:
#
# 2014-03-26
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


import os
from config import *
from externaldiskspace import SpaceInfo
from logger import log
from peewee.analyse import Chrono
from callbacks import Callbacks
from globallock import GlobalLock


#Checks the disk usage for timeshift and record.
#
#timeshift have a max disk use property
#record may be stopped when needed
#
#configuration :
#
#config.disk_usage_check_period
#config.max_size_for_timeshift
#config.max_percentage_disk_use
class DiskSpaceChecker(object):
	
	def __init__(self, wyrecord):
		self.live_manager = wyrecord.live_manager
		self.scheduler = wyrecord.scheduler
		self.ext_disk_space = wyrecord.ext_disk_space
		self.renderer_manager = wyrecord.renderer_manager
		return None

	@GlobalLock
	def checkDiskUsage(self):
		callback_needed = False
		if not self.live_manager.GetRunningLiveList():
			return None
		total_rec = 0
		if self.ext_disk_space.getAvailableDiskSpace() < 0:
			total_rec = self.ext_disk_space.total_rec
			if total_rec:
				self.stopAllRecord()
				self.ext_disk_space.getAvailableDiskSpace()
				callback_needed = True
			if self.ext_disk_space.free_space < 0:
				if self.stopAllTimeshift(True):
					log.info('Callbacks().disk_space_alert ' + str(config.max_size_for_timeshift) + ', 0')
					callback_needed = True
		for live in self.live_manager.GetRunningLiveList():
			if live.updateTimeshiftSize(self.ext_disk_space.max_timeshift_size):
				if self.ext_disk_space.max_timeshift_size != config.max_size_for_timeshift:
					callback_needed = True
		if callback_needed:
			if self.ext_disk_space.free_space < 0:
				available_space = 0
				timeshift_size_percentage = 0
			else:
				available_space = self.ext_disk_space.max_timeshift_size * config.live_count_max + self.ext_disk_space.total_rec
				timeshift_size_percentage = float(self.ext_disk_space.max_timeshift_size) / config.max_size_for_timeshift * 100
			needed_space = config.max_size_for_timeshift * config.live_count_max + total_rec
			log.info('Callbacks().disk_space_alert ' + str(available_space) + ' ' + str(needed_space) + ' timeshift_size_percentage:' + str(timeshift_size_percentage))
			Callbacks().disk_space_alert.notify(needed_space, available_space, timeshift_size_percentage)
		return None

	def stopAllTimeshift(self, force=False):
		ret = False
		for live in self.live_manager.GetRunningLiveList():
			if force or not live.IsRecording():
				if self.renderer_manager.getDefaultRenderer().live == live:
					if live.external_recorder:
						self.renderer_manager.getDefaultRenderer().stop()
						live.resetRecorder()
						live.zap(live.serviceid, live.deviceid)
						self.renderer_manager.getDefaultRenderer().play(live, start_extern_eit=False)
						ret = True
				else:
					live.stop()
					ret = True
		return ret

	def stopAllRecord(self):
		self.scheduler.StopAllRunningRecord()
		return None
