# -*- coding: utf-8 -*- 
#
# Description:
#
# Streaming Items Class Definitions
#
#
#
# Changes:
#
# 2012-05-14
# Initial Commit.
# Live Streaming from http://community-links.googlecode.com
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import os
from peewee.debug import PRINT_EXCEPTION, GET_LOGGER
from peewee.misc_utils import MetaSingleton
from pygui.config import user_config
from pygui.facilities.livestreaming_rss import LiveStreamingRSSBrowser
from pygui.item.containers import GenericContainer
from pygui.item.core import ActionItem
from pygui.item.mediaitem.core import MediaItem, VideoItem, ImageItem
from pygui.window import MessageWindow, LoadingWindow, KeyboardWindow

log = GET_LOGGER(__name__)

# Init the live streaming data clients
LiveStreaming_Data = LiveStreamingRSSBrowser()



class LiveStreamingItem(VideoItem):

	def __init__(self, name, parent, **kw):
		VideoItem.__init__(self, name, type_='video', **kw)
		self.parent = parent
		return None

	@property
	def wpl_options(self):
		return {'live':'1'}

	def __hash__(self):
		return hash(self['id'])

	def __eq__(self, other):
		if isinstance(other, LiveStreamingItem):
			if self['thumbnail'] == other['thumbnail']:
				if self.name == other.name:
					return True
		return False

	def __ne__(self, other):
		return not self == other

	def __cmp__(self, other):
		if isinstance(other, MediaItem):
			if self.wymedia_resource is None or other.wymedia_resource is None:
				return cmp(self.name + self.type + self['id'], other.name + other.type + other['id'])
			return cmp(self.wymedia_resource['id'], other.wymedia_resource['id'])
		else:
			if isinstance(other, dict) and 'id' in other:
				return cmp(self.wymedia_resource['id'], other['id'])
			else:
				return cmp(type(self), type(other))
		return None

	def execute(self):
		items = self.parent.browse()
		try:
			self.player.play(self, items)
		except Exception, e:
			PRINT_EXCEPTION(e)



class LiveStreamingSubChannelContainer(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, channel, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='playlist', **kw)
		self.channel = channel
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if self._content is None or LiveStreaming_Data.catalog.is_old():
			self._content = []
			try:
				self._content = [LiveStreamingItem(subchannel_item['title'], parent=self, menu=self.menu, **subchannel_item) for subchannel_item in LiveStreaming_Data.get_subchannel_items(self.channel)]
			except:
				pass
		win.hide()
		return self._content



class LiveStreamingChannelContainer(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, channel, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='playlist', **kw)
		self.channel = channel
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if self._content is None or LiveStreaming_Data.catalog.is_old():
			self._content = []
			try:
				for channel_item in LiveStreaming_Data.get_channel_items(self.channel):
					self._content.append(LiveStreamingItem(channel_item['title'], parent=self, menu=self.menu, **channel_item))
			except:
				pass
			try:
				for subchannel in LiveStreaming_Data.get_subchannels(self.channel):
					self._content.append(LiveStreamingSubChannelContainer(subchannel['title'], [self.channel, subchannel['position']], parent=self, menu=self.menu, **subchannel))
			except:
				pass
		win.hide()
		return self._content



class LiveStreamingContainer(MediaItem, GenericContainer):

	__metaclass__ = MetaSingleton

	def __init__(self, parent=None, **kw):
		MediaItem.__init__(self, 'Live Streaming', type_='dir', **kw)
		self.parent = parent
		self._items = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		# Return nothing if preview is True
		if preview:
			return []
		# Preview is False, this mean the item is entred
		# Check network connection
		try:
			from wynetwork import wynetwork as wn
			gateway = wn.NetDevices().getDeviceInfos(wn.NetConfigurations().getActiveConfigurationInfos()['interface'])['gateway']
		except:
			gateway = '0.0.0.0'
		if gateway == '0.0.0.0':
			MessageWindow(text=_('Please configure connection'), title=_('Not connected'), button=False).show(timeout=5)
			return None
		# Network is connected, we can start playing with Youtube
		win = LoadingWindow()
		win.show()
		if self._items is None or LiveStreaming_Data.catalog.is_old():
			self._items = []
			try:
				self._items = [LiveStreamingChannelContainer(chan['title'], chan['position'], parent=self, menu=self.menu, **chan) for chan in LiveStreaming_Data.get_channels()]
			except Exception, e:
				PRINT_EXCEPTION(e)
		win.hide()
		return self._items
