# -*- coding: utf-8 -*- 
#
# Description:
#
# TV Replay Items Class Definitions
#
#
#
# Changes:
#
# 2012-04-16
# Initial Commit (Only M6 Replay French TV)
#
# 2012-04-20
# Add W9 Replay French TV
#
# 2012-04-28
# Add TF1 Replay French TV
#
# 2012-11-12
# Add RTVE Replay Spanish TV
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review Wydev-Python2.5 README & LICENSE files for further details.


from __future__ import absolute_import

import os
from peewee.debug import PRINT_EXCEPTION, GET_LOGGER
from peewee.misc_utils import MetaSingleton
from pygui.config import user_config
from pygui.facilities.m6replay_rss import M6ReplayBrowser
from pygui.facilities.tf1replay_rss import TF1ReplayBrowser
from pygui.facilities.w9replay_rss import W9ReplayBrowser
from pygui.facilities.rtvereplay_rss import RTVEReplayBrowser
from pygui.item.containers import GenericContainer
from pygui.item.core import ActionItem
from pygui.item.mediaitem.core import MediaItem, VideoItem, ImageItem
from pygui.window import MessageWindow, LoadingWindow, KeyboardWindow

log = GET_LOGGER(__name__)

# Init the Replay data clients
M6Replay_Data = M6ReplayBrowser()
TF1Replay_Data = TF1ReplayBrowser()
W9Replay_Data = W9ReplayBrowser()
RTVEReplay_Data = RTVEReplayBrowser()



class M6ReplayItem(VideoItem):

	def __init__(self, name, parent, **kw):
		VideoItem.__init__(self, name, type_='video', **kw)
		self.parent = parent
		return None

	@property
	def wpl_options(self):
		return {'live':'1'}

	def __hash__(self):
		return hash(self['id'])

	def __eq__(self, other):
		if isinstance(other, M6ReplayItem):
			if self['thumbnail'] == other['thumbnail']:
				if self.name == other.name:
					return True
		return False

	def __ne__(self, other):
		return not self == other

	def __cmp__(self, other):
		if isinstance(other, MediaItem):
			if self.wymedia_resource is None or other.wymedia_resource is None:
				return cmp(self.name + self.type + self['id'], other.name + other.type + other['id'])
			return cmp(self.wymedia_resource['id'], other.wymedia_resource['id'])
		else:
			if isinstance(other, dict) and 'id' in other:
				return cmp(self.wymedia_resource['id'], other['id'])
			else:
				return cmp(type(self), type(other))
		return None

	def execute(self):
		items = self.parent.browse()
		try:
			self.player.play(self, items)
		except Exception, e:
			PRINT_EXCEPTION(e)



class M6ReplaySubCategory(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, category, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='playlist', **kw)
		self.category = category
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if M6Replay_Data.catalog.is_old() or self._content is None:
			self._content = []
			try:
				self._content = [M6ReplayItem(prod['title'], parent=self, menu=self.menu, **prod) for prod in M6Replay_Data.get_product(self.category)]
			except:
				PRINT_EXCEPTION()
		win.hide()
		return self._content



class M6ReplayCategory(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, category, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='playlist', **kw)
		self.parent = parent
		self.category = category
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if M6Replay_Data.catalog.is_old() or self._content is None:
			self._content = []
			try:
				self._content = [M6ReplaySubCategory(sub_cat['title'], [self.category, sub_cat['position']], parent=self, menu=self.menu, **sub_cat) for sub_cat in M6Replay_Data.get_subcategories(self.category)]
			except:
				PRINT_EXCEPTION()
		win.hide()
		return self._content



class M6ReplayContainer(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if M6Replay_Data.catalog.is_old() or self._content is None:
			self._content = []
			try:
				self._content = [M6ReplayCategory(cat['title'], cat['position'], parent=self, menu=self.menu, **cat) for cat in M6Replay_Data.get_categories()]
			except:
				PRINT_EXCEPTION()
		win.hide()
		return self._content



class TF1ReplayItem(VideoItem):

	def __init__(self, name, parent, **kw):
		VideoItem.__init__(self, name, type_='video', **kw)
		self.parent = parent
		return None

	@property
	def wpl_options(self):
		return {'live':'1'}

	def __hash__(self):
		return hash(self['id'])

	def __eq__(self, other):
		if isinstance(other, TF1ReplayItem):
			if self['thumbnail'] == other['thumbnail']:
				if self.name == other.name:
					return True
		return False

	def __ne__(self, other):
		return not self == other

	def __cmp__(self, other):
		if isinstance(other, MediaItem):
			if self.wymedia_resource is None or other.wymedia_resource is None:
				return cmp(self.name + self.type + self['id'], other.name + other.type + other['id'])
			return cmp(self.wymedia_resource['id'], other.wymedia_resource['id'])
		else:
			if isinstance(other, dict) and 'id' in other:
				return cmp(self.wymedia_resource['id'], other['id'])
			else:
				return cmp(type(self), type(other))
		return None

	def execute(self):
		items = self.parent.browse()
		try:
			self.player.play(self, items)
		except Exception, e:
			PRINT_EXCEPTION(e)



class TF1ReplayProduct(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, web_path, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='playlist', **kw)
		self.web_path = web_path
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		if self._content is not None and len(self._content) > 0:
			self._content[0].execute()
		return None

	def browse(self, preview=False):
		if self._content is None or TF1Replay_Data.must_be_refresh():
			win = LoadingWindow()
			win.show()
			self._content = []
			try:
				chapters = TF1Replay_Data.get_chapters(self.web_path)
				if chapters is not None:
					self._content = [TF1ReplayItem(chapter['title'], parent=self, menu=self.menu, **chapter) for chapter in chapters]
			except:
				PRINT_EXCEPTION()
			win.hide()
		return self._content



class TF1ReplaySubCategory(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, web_path, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='playlist', **kw)
		self.web_path = web_path
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		if self._content is None or TF1Replay_Data.must_be_refresh():
			win = LoadingWindow()
			win.show()
			self._content = []
			try:
				product = TF1Replay_Data.get_products(self.web_path)
				if product is not None:
					self._content = [TF1ReplayProduct(product['title'], product['url_path'], parent=self, menu=self.menu, **product)]
			except:
				PRINT_EXCEPTION()
			win.hide()
		return self._content



class TF1ReplayCategory(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, web_path, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='playlist', **kw)
		self.parent = parent
		self.web_path = web_path
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		if self._content is None or TF1Replay_Data.must_be_refresh():
			win = LoadingWindow()
			win.show()
			self._content = []
			try:
				next_page, subcategories = TF1Replay_Data.get_subcategories(self.web_path)
				if next_page is not None:
					self._content.append(TF1ReplayCategory(_('Next page'), next_page, parent=self, menu=self.menu))
				for sub_cat in subcategories:
					self._content.append(TF1ReplaySubCategory(sub_cat['title'], sub_cat['url_path'], parent=self, menu=self.menu, **sub_cat))
			except:
				PRINT_EXCEPTION()
			win.hide()
		return self._content



class TF1ReplayContainer(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		if self._content is None or TF1Replay_Data.must_be_refresh():
			win = LoadingWindow()
			win.show()
			self._content = []
			try:
				self._content = [TF1ReplayCategory(cat['title'], cat['url_path'], parent=self, menu=self.menu, **cat) for cat in TF1Replay_Data.get_categories()]
			except:
				PRINT_EXCEPTION()
			win.hide()
		return self._content



class W9ReplayItem(VideoItem):

	def __init__(self, name, parent, **kw):
		VideoItem.__init__(self, name, type_='video', **kw)
		self.parent = parent
		return None

	@property
	def wpl_options(self):
		return {'live':'1'}

	def __hash__(self):
		return hash(self['id'])

	def __eq__(self, other):
		if isinstance(other, W9ReplayItem):
			if self['thumbnail'] == other['thumbnail']:
				if self.name == other.name:
					return True
		return False

	def __ne__(self, other):
		return not self == other

	def __cmp__(self, other):
		if isinstance(other, MediaItem):
			if self.wymedia_resource is None or other.wymedia_resource is None:
				return cmp(self.name + self.type + self['id'], other.name + other.type + other['id'])
			return cmp(self.wymedia_resource['id'], other.wymedia_resource['id'])
		else:
			if isinstance(other, dict) and 'id' in other:
				return cmp(self.wymedia_resource['id'], other['id'])
			else:
				return cmp(type(self), type(other))
		return None

	def execute(self):
		items = self.parent.browse()
		try:
			self.player.play(self, items)
		except Exception, e:
			PRINT_EXCEPTION(e)



class W9ReplaySubCategory(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, category, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='playlist', **kw)
		self.category = category
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if W9Replay_Data.catalog.is_old() or self._content is None:
			self._content = []
			try:
				self._content = [W9ReplayItem(prod['title'], parent=self, menu=self.menu, **prod) for prod in W9Replay_Data.get_product(self.category)]
			except:
				PRINT_EXCEPTION()
		win.hide()
		return self._content



class W9ReplayCategory(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, category, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='playlist', **kw)
		self.parent = parent
		self.category = category
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if W9Replay_Data.catalog.is_old() or self._content is None:
			self._content = []
			try:
				self._content = [W9ReplaySubCategory(sub_cat['title'], [self.category, sub_cat['position']], parent=self, menu=self.menu, **sub_cat) for sub_cat in W9Replay_Data.get_subcategories(self.category)]
			except:
				PRINT_EXCEPTION()
		win.hide()
		return self._content



class W9ReplayContainer(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if W9Replay_Data.catalog.is_old() or self._content is None:
			self._content = []
			try:
				self._content = [W9ReplayCategory(cat['title'], cat['position'], parent=self, menu=self.menu, **cat) for cat in W9Replay_Data.get_categories()]
			except:
				PRINT_EXCEPTION()
		win.hide()
		return self._content



class RTVEReplayItem(VideoItem):

	def __init__(self, name, parent, **kw):
		VideoItem.__init__(self, name, type_='video', **kw)
		self.parent = parent
		return None

	@property
	def wpl_options(self):
		return {'live':'1'}

	def __hash__(self):
		return hash(self['id'])

	def __eq__(self, other):
		if isinstance(other, RTVEReplayItem):
			if self['thumbnail'] == other['thumbnail']:
				if self.name == other.name:
					return True
		return False

	def __ne__(self, other):
		return not self == other

	def __cmp__(self, other):
		if isinstance(other, MediaItem):
			if self.wymedia_resource is None or other.wymedia_resource is None:
				return cmp(self.name + self.type + self['id'], other.name + other.type + other['id'])
			return cmp(self.wymedia_resource['id'], other.wymedia_resource['id'])
		else:
			if isinstance(other, dict) and 'id' in other:
				return cmp(self.wymedia_resource['id'], other['id'])
			else:
				return cmp(type(self), type(other))
		return None

	def execute(self):
		items = self.parent.browse()
		try:
			self.player.play(self, items)
		except Exception, e:
			PRINT_EXCEPTION(e)



class RTVEReplaySubContainer(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='playlist', **kw)
		self.parent = parent
		self.action = kw['action']
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		if self._content is None or RTVEReplay_Data.must_be_refresh():
			win = LoadingWindow()
			win.show()
			self._content = []
			try:
				# Execute item action
				itemlist = self.action()
				for item in itemlist:
					if item['type'] is 'video':
						self._content.append(RTVEReplayItem(item['title'], parent=self, menu=self.menu, **item))
					else:
						self._content.append(RTVEReplaySubContainer(item['title'], parent=self, menu=self.menu, **item))
			except:
				PRINT_EXCEPTION()
			win.hide()
		return self._content



class RTVEReplayContainer(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		if self._content is None or RTVEReplay_Data.must_be_refresh():
			win = LoadingWindow()
			win.show()
			self._content = []
			try:
				self._content = [RTVEReplaySubContainer(item['title'], parent=self, menu=self.menu, **item) for item in RTVEReplay_Data.get_categories()]
			except:
				PRINT_EXCEPTION()
			win.hide()
		return self._content



class TVReplayContainer(MediaItem, GenericContainer):

	__metaclass__ = MetaSingleton

	def __init__(self, parent=None, **kw):
		MediaItem.__init__(self, 'TV Replay', type_='dir', **kw)
		self.parent = parent
		self._items = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		# Only return content if preview is True
		if preview:
			return [TF1ReplayContainer(_('TF1 Replay'), thumbnail="http://upload.wikimedia.org/wikipedia/fr/thumb/6/60/Logo_TF1.svg/200px-Logo_TF1.svg.png", menu=self.menu, parent=self),
							M6ReplayContainer(_('M6 Replay'), thumbnail="http://upload.wikimedia.org/wikipedia/fr/thumb/2/22/M6_2009.svg/170px-M6_2009.svg.png", menu=self.menu, parent=self),
							RTVEReplayContainer(_('RTVE Replay'), thumbnail="http://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Logo_RTVE.svg/220px-Logo_RTVE.svg.png", menu=self.menu, parent=self),
							W9ReplayContainer(_('W9 Replay'), thumbnail="http://upload.wikimedia.org/wikipedia/fr/thumb/8/86/W9_2010.png/180px-W9_2010.png", menu=self.menu, parent=self)]
		# Preview is False, this mean the item is entred
		# Check network connection
		try:
			from wynetwork import wynetwork as wn
			gateway = wn.NetDevices().getDeviceInfos(wn.NetConfigurations().getActiveConfigurationInfos()['interface'])['gateway']
		except:
			gateway = '0.0.0.0'
		if gateway == '0.0.0.0':
			MessageWindow(text=_('Please configure connection'), title=_('Not connected'), button=False).show(timeout=5)
			return None
		# Network is connected, we can start playing with Youtube
		if not self._items:
			self._items = [TF1ReplayContainer(_('TF1 Replay'), thumbnail="http://upload.wikimedia.org/wikipedia/fr/thumb/6/60/Logo_TF1.svg/200px-Logo_TF1.svg.png", menu=self.menu, parent=self),
										 M6ReplayContainer(_('M6 Replay'), thumbnail="http://upload.wikimedia.org/wikipedia/fr/thumb/2/22/M6_2009.svg/170px-M6_2009.svg.png", menu=self.menu, parent=self),
										 RTVEReplayContainer(_('RTVE Replay'), thumbnail="http://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Logo_RTVE.svg/220px-Logo_RTVE.svg.png", menu=self.menu, parent=self),
										 W9ReplayContainer(_('W9 Replay'), thumbnail="http://upload.wikimedia.org/wikipedia/fr/thumb/8/86/W9_2010.png/180px-W9_2010.png", menu=self.menu, parent=self)]
		return self._items
