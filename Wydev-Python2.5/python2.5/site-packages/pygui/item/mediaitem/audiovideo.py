# -*- coding: utf-8 -*- 
#
# Description:
#
# Audio & Video Items Class Definitions
#
#
#
# Changes:
#
# 2011-10-02
# Initial Commit
#
# 2011-10-04
# Add keyboard pattern search keeping to Youtube & Dailymotion
#
# 2011-10-18
# Add available and choosen format to Youtube Item
# Allow to select a format for each video with Hand menu in Youtube menu
#
# 2011-11-15
# Add Network connection check before trying to access Youtube and Dailymotion
#
# 2011-11-25
# Add available and choosen format to DailyMotion Item
# Allow to select a format for each video with Hand menu in DailyMotion menu
#
# 2011-12-11
# Add loading windows to Youtube and Dailymotion
#
# 2012-01-06
# Remove Youtube items from this file
#
# 2012-05-01
# Remove DailyMotion items from this file
# Add RtmpStreaming item.
# Allow to stream media content from rtmp server
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import os
import urllib
from peewee.debug import PRINT_EXCEPTION, DEBUG, GET_LOGGER
from peewee.misc_utils import MetaSingleton
from pygui.config import plugins, user_config
from pygui.item.containers import GenericContainer
from pygui.item.core import Item, ActionItem
from pygui.item.mediaitem.core import MediaItem, DirItem
from pygui.item.mediaitem.progressive_result import WindowedItemList
from pygui.facilities.codemapping import country_dict
from pygui.window import MessageWindow, LoadingWindow

log = GET_LOGGER(__name__)



class AudioItem(MediaItem):

	player = None
	media_update_fields = ('title', 'uri')

	def __init__(self, wymedia_resource, type_='audio', **kw):
		MediaItem.__init__(self, wymedia_resource, type_=type_, **kw)
		if AudioItem.player is None:
			try:
				from pygui.menu.players import AudioPlayer
				AudioItem.player = AudioPlayer()
			except Exception, e:
				log.error('Unable to spawn AudioPlayer: %s', str(e))
		return None

	def execute(self):
		if self.wymedia_resource:
			self._npl_decision()
		else:
			if self.parent:
				items = self.parent.browse()
			else:
				items = None
			try:
				self.player.play(self, items)
			except Exception, e:
				PRINT_EXCEPTION(e)
		return None



class ImageItem(MediaItem):

	player = None
	media_update_fields = ('title', 'uri')

	def __init__(self, wymedia_resource, type_='image', **kw):
		MediaItem.__init__(self, wymedia_resource, type_=type_, **kw)
		try:
			if ImageItem.player is None:
				from pygui.menu.players import ImageViewer
				ImageItem.player = ImageViewer()
		except Exception, e:
			log.error('Unable to spawn ImageViewer: %s', str(e))
		return None

	def execute(self):
		if self.wymedia_resource:
			self._npl_decision()
		else:
			if self.parent:
				items = self.parent.browse()
			else:
				items = None
			try:
				self.player.play(self, items)
			except Exception, e:
				PRINT_EXCEPTION(e)
		return None



class VideoItem(MediaItem):

	player = None
	media_update_fields = ('title', 'uri', 'height', 'nrAudioChannels')

	def __init__(self, wymedia_resource, type_='video', **kw):
		MediaItem.__init__(self, wymedia_resource, type_=type_, **kw)
		if VideoItem.player is None:
			try:
				from pygui.menu.players import VideoPlayer
				VideoItem.player = VideoPlayer()
			except Exception, e:
				log.error('Unable to spawn VideoPlayer: %s', str(e))
		return None

	def execute(self, delay=None):
		if self.wymedia_resource:
			if delay is None:
				self._npl_decision()
			else:
				self._npl_decision(delay=delay)
		else:
			if self.parent:
				items = self.parent.browse()
			else:
				items = None
			try:
				self.player.play(self, items)
			except Exception, e:
				PRINT_EXCEPTION(e)
		return None

	@property
	def wpl_options(self):
		return {}



# TV record (MPEG-2 TS). Extra options have to be passed
# to wyplayer to ensure proper playback.
class TVRecordItem(VideoItem):

	media_update_fields = ('title', 'uri', 'recordedDuration', 'dvbServiceId', 'channelName', 'recordedStartDateTime')

	@property
	def wpl_options(self):
		return {'wyts':'1', 'service':(self['dvbServiceId'] or '-1'), 'probe':'0', 'live':'1'}



class DVDItem(MediaItem):

	player = None

	def __init__(self, wymedia_resource, type_='usb_device', **kw):
		MediaItem.__init__(self, wymedia_resource, type_=type_, **kw)
		if DVDItem.player is None:
			try:
				from pygui.menu.players import DVDPlayer
				DVDItem.player = DVDPlayer()
			except Exception, e:
				log.error(' No DVD Player support: %s', str(e))
		return None

	def browse(self, preview=False):
		if user_config['video']['dvdbrowse']:
			return WindowedItemList(self, menu=self.menu, universe=self.universe)
		return None

	def execute(self, delay=0):
		if self['backend'] != 'upnp':
			try:
				if os.path.exists('/dev/sr0'):
					self.player.play(self, playlist=None, delay=delay)
				else:
					MessageWindow(text=_('No external USB DVD reader found'), title=_('DVD Error'), button=False).show(timeout=5)
			except Exception, e:
				PRINT_EXCEPTION(e)
		return None



class IsoDVDItem(DVDItem):

	def __init__(self, wymedia_resource, type_='iso_dvd', **kw):
		DVDItem.__init__(self, wymedia_resource, type_=type_, **kw)
		return None

	def browse(self, preview=False):
		return None

	def execute(self, delay=0):
		if self['backend'] != 'upnp':
			try:
				self.player.play(self, playlist=None, delay=delay)
			except Exception, e:
				PRINT_EXCEPTION(e)
		return None



# Item representing UPNP directory 
class UpnpDirItem(DirItem):

	def __init__(self, wymedia_resource, type_='upnp', **kw):
		DirItem.__init__(self, wymedia_resource, type_=type_, **kw)
		return None



# Item representing Usb directory/device
class UsbDirItem(DirItem):

	def __init__(self, wymedia_resource, type_='usb_device', **kw):
		DirItem.__init__(self, wymedia_resource, type_=type_, **kw)
		return None



# RTMP Streaming Item
# Place a .rtmp file under "My Videos/Streaming" which contain a rtmp url.
# Ex: "/wymedia/My Videos/Descovery HD.rtmp" file which contain 
class RtmpStreamingItem(VideoItem):

	@property
	def wpl_options(self):
		return {'live':'1'}

	def media_update(self):
		# Read rtmp link from .rtmp file
		wm_uri = self.wymedia_resource.get('uri', '')
		if wm_uri.startswith('file:///'):
			rtmp_path = urllib.unquote(wm_uri[7:])
			if os.path.exists(rtmp_path):
				rtmp_file = open(rtmp_path)
				self['uri'] = rtmp_file.readline()
				rtmp_file.close()
		return None
