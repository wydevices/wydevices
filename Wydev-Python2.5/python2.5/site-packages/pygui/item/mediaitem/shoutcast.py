# -*- coding: utf-8 -*-
#
# Description:
#
# Shoutcast Class Definitions
#
#
#
# Changes:
#
# 2011-11-14
# Initial Commit
#
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


__all__ = ['ShoutCastFolder']

import urllib
import urllib2
import xml.etree.ElementTree as ET

from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from peewee.misc_utils import MetaSingleton
from pygui.item.containers import GenericContainer
from pygui.item.mediaitem.core import AudioItem, MediaItem
from pygui.window import MessageWindow, LoadingWindow, KeyboardWindow
from pygui.facilities.searchsave import ShoutCastConfig

log = GET_LOGGER(__name__)

# Shoucast Developper ID (Polo35)
# dev_id = 'po1c7__q-vBXJSPl'
# Temp dev ID found on web
# dev_id = 'fa1669MuiRPorUBw'
# dev_id = 'sh1iqrPHnhjFmXiT'
dev_id = 'sh17tOUi_ezL61_A'



class ShoutCastRadio(AudioItem):

	def __init__(self, name, station, parent, **kw):
		self.pls_uri = 'http://yp.shoutcast.com/sbin/tunein-station.pls?id=%s&k=%s' % (station['id'], dev_id)
		AudioItem.__init__(self, name, type_='audio', **kw)
		self.parent = parent
		return None

	@property
	def wpl_options(self):
		return {'live':'1', 'ifmt':'mpga', 'probe':'0'}

	def execute(self):
		self['uri'] = self.parse_pls()
		try:
			self.player.play(self)
		except Exception, e:
			PRINT_EXCEPTION(e)
		return None

	def parse_pls(self):
		request = urllib2.Request(self.pls_uri)
		request.add_header('User-Agent', "WyGui/1.3.0")
		data = urllib2.urlopen(request)
		str = data.read()
		data.close()
		lines = str.splitlines()
		for line in lines:
			if line.startswith("File") == True:
				return line.split("=", 1)[1]
		return ''

	# Get current song from stream meta-data
	# TODO: Implement this somewhere
	def update_title(self):
		# Request Metadata
		request = urllib2.Request(self['uri'])
		request.add_header('Icy-MetaData','1')
		opener = urllib2.build_opener()
		data = opener.open(request)
		# Parse header to get metadata position
		while True:
			header_line = data.readline()
			if header_line[0:12] == "icy-metaint:":
				metadata_offset = int(header_line.split(':')[1])
			if header_line == "\r\n":
				break
		# Seek to metadata
		data.read(metadata_offset)
		# Get len of metadata
		metadata_len = ord(data.read(1))*16
		if metadata_len <> 0:
			# Read metadata
			metadata = data.read(metadata_len)
			metadata_lines = metadata.split(';')
			# Get stream titile in metadata
			for line in metadata_lines:
				if line[0:12] == "StreamTitle=":
					stream_title = line.split('=')[1]
					stream_title = stream_title.replace('\'', '')
					stream_title = stream_title.replace(';', '')
					stream_title = stream_title.replace('  ', '')
					break
		else:
			stream_title = ''
		data.close()
		if stream_title != '':
			self['title'] = stream_title



class ShoutCastSubSearchFolder(MediaItem, GenericContainer):

	def __init__(self, name, what, parent=None, **kw):
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.what = urllib.quote(what)
		self._content = None
		self.parent = parent
		return None

	def execute(self, *args, **kw):
		return None

	def search(self):
		ret = []
		data = urllib.urlopen('http://api.shoutcast.com/legacy/stationsearch?k=%s&search=%s&mt=audio/mpeg' % (dev_id, self.what))
		try:
			shoutcast = ET.fromstring(data.read())
			for station in shoutcast.findall('station'):
				ret.append(station.attrib)
		finally:
			data.close()
		return ret

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if not self._content:
			self._content = []
			for station in self.search():
				self._content.append(ShoutCastRadio(name=station['name'], station=station, parent=self, menu=self.menu))
		win.hide()
		return self._content



class ShoutCastSearchFolder(MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.parent = parent
		self._items = None
		self.pattern = ''
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		if not self._items:
			def _validate(kb):
				self.pattern = kb._text
				ShoutCastConfig().AddSearch(self.pattern)
				new_dir = ShoutCastSubSearchFolder(self.pattern, what=self.pattern, parent=self, menu=self.menu)
				self._items.append(new_dir)
				kb.hide()
				self.menu.get_item_list('main_list').append(new_dir)
				return None

			def _search():
				kb = KeyboardWindow('Search for:', text=self.pattern, confirm_action=_validate)
				kb.show()
				return None

			from pygui.item.core import ActionItem
			self._items = [ActionItem(_('Search') + '...', type_='exe', action=_search)]
			for search in ShoutCastConfig().GetSearchs():
				self._items.append(ShoutCastSubSearchFolder(search, what=search, parent=self, menu=self.menu))
		return self._items



class ShoutCastSubGenreFolder(MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.genre = name
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if not self._content:
			self._content = []
			data = urllib.urlopen('http://api.shoutcast.com/legacy/genresearch?k=%s&genre=%s&mt=audio/mpeg' % (dev_id, self.genre))
			try:
				shoutcast = ET.fromstring(data.read())
				for station in shoutcast.findall('station'):
					self._content.append(ShoutCastRadio(name=station.attrib['name'], station=station.attrib, parent=self, menu=self.menu))
			finally:
				data.close()
		win.hide()
		return self._content



class ShoutCastGenreFolder(MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if not self._content:
			self._content = []
			data = urllib.urlopen('http://api.shoutcast.com/legacy/genrelist?k=%s' % dev_id)
			try:
				tree = ET.fromstring(data.read())
				for genre in tree.findall('genre'):
					self._content.append(ShoutCastSubGenreFolder(genre.attrib.pop('name'), menu=self.menu, parent=self))
			finally:
				data.close()
		win.hide()
		return self._content



class ShoutCastTop500Folder(MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		if not self._content:
			self._content = []
			data = urllib.urlopen('http://api.shoutcast.com/legacy/Top500?k=%s&mt=audio/mpeg' % (dev_id))
			try:
				shoutcast = ET.fromstring(data.read())
				for station in shoutcast.findall('station'):
					self._content.append(ShoutCastRadio(name=station.attrib['name'], station=station.attrib, parent=self, menu=self.menu))
			finally:
				data.close()
		win.hide()
		return self._content



class ShoutCastFolder(MediaItem, GenericContainer):

	__metaclass__ = MetaSingleton

	def __init__(self, parent=None, **kw):
		MediaItem.__init__(self, 'Shoutcast Radios', type_='dir', **kw)
		self.parent = parent
		self._items = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		# Only return content if preview is True
		if preview:
			return [ShoutCastTop500Folder(_('Shoutcast Top 500'), menu=self.menu, parent=self),
							ShoutCastGenreFolder(_('Shoutcast by Genre'), menu=self.menu, parent=self),
							ShoutCastSearchFolder(_('Shoutcast Search'), menu=self.menu, parent=self)]
		# Preview is False, this mean the item is entred
		# Check network connection
		try:
			from wynetwork import wynetwork as wn
			gateway = wn.NetDevices().getDeviceInfos(wn.NetConfigurations().getActiveConfigurationInfos()['interface'])['gateway']
		except:
			gateway = '0.0.0.0'
		if gateway == '0.0.0.0':
			MessageWindow(text=_('Please configure connection'), title=_('Not connected'), button=False).show(timeout=5)
			return None
		# Network is connected, we can start playing
		elif not self._items:
			self._items = [ShoutCastTop500Folder(_('Shoutcast Top 500'), menu=self.menu, parent=self),
										 ShoutCastGenreFolder(_('Shoutcast by Genre'), menu=self.menu, parent=self),
										 ShoutCastSearchFolder(_('Shoutcast Search'), menu=self.menu, parent=self)]
		return self._items



if (__name__ == '__main__'):
	folder = ShoutCastFolder()
	folder_list = folder.browse()

	print '#########################################'
	print 'TOP 500'
	print '#########################################'
	radio_list = folder_list[0].browse()
	for radio in radio_list:
		print 'Name: ',
		print radio.real_name,
		print ', URI: ',
		print radio.real_uri

	print '#########################################'
	print 'Reggae Radios'
	print '#########################################'
	reggaefolder = ShoutCastSubGenreFolder({'name': 'Reggae'})
	radio_list = reggaefolder.browse()
	for radio in radio_list:
		print 'Name: ',
		print radio.real_name,
		print ', URI: ',
		print radio.real_uri

	print '#########################################'
	print ''
