# -*- coding: utf-8 -*- 
#
# Description:
#
# Youtube Items Class Definitions
#
#
#
# Changes:
#
# 2012-01-06
# Initial Commit
#
# 2012-01-07
# Add youtube user playlist
#
# 2012-01-24
# Add playlist thumbnail
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import os
from peewee.debug import PRINT_EXCEPTION, GET_LOGGER
from peewee.misc_utils import MetaSingleton
from pygui.config import user_config
from pygui.facilities.youtube_rss import YoutubeData
from pygui.facilities.searchsave import YoutubeConfig
from pygui.item.containers import GenericContainer
from pygui.item.core import ActionItem
from pygui.item.mediaitem.core import MediaItem, VideoItem, ImageItem
from pygui.window import MessageWindow, LoadingWindow, KeyboardWindow

log = GET_LOGGER(__name__)

# Init the Youtube Gdata client
Youtube_GData = YoutubeData()



class YouTubeItem(VideoItem):

	player = None
	choosen_format = 0
	available_formats = []

	def __init__(self, name, parent, **kw):
		if YouTubeItem.player is None:
			try:
				from pygui.menu.players.video_player import YoutubePlayer
				YouTubeItem.player = YoutubePlayer()
			except Exception, e:
				log.error('Unable to spawn YouTubeVideoPlayer: %s', str(e))
		VideoItem.__init__(self, name, type_='youtubevideo', **kw)
		self.parent = parent
		return None

	@property
	def wpl_options(self):
		return {'live':'1', 'ifmt':'mov,mp4,m4a,3gp,3g2,mj2', 'probe':'0'}

	def media_update(self):
		self['uri'], self.choosen_format, self.available_formats = Youtube_GData._get_flv_uri(self['player_url'], self.choosen_format)
		return None

	def __hash__(self):
		return hash(self['id'])

	def __eq__(self, other):
		if isinstance(other, YouTubeItem):
			if self['thumbnail'] == other['thumbnail']:
				if self.name == other.name:
					return True
		return False

	def __ne__(self, other):
		return not self == other

	def __cmp__(self, other):
		if isinstance(other, MediaItem):
			if self.wymedia_resource is None or other.wymedia_resource is None:
				return cmp(self.name + self.type + self['id'], other.name + other.type + other['id'])
			return cmp(self.wymedia_resource['id'], other.wymedia_resource['id'])
		else:
			if isinstance(other, dict) and 'id' in other:
				return cmp(self.wymedia_resource['id'], other['id'])
			else:
				return cmp(type(self), type(other))
		return None

	def execute(self):
		items = self.parent.browse()
		try:
			self.player.play(self, items)
		except Exception, e:
			PRINT_EXCEPTION(e)



class YouTubeSubContainer(ImageItem, MediaItem, GenericContainer):

	def __init__(self, name, list_fn, parent=None, **kw):
		ImageItem.__init__(self, name, type_='image', **kw)
		MediaItem.__init__(self, name, type_='playlist', **kw)
		self.list_fn = list_fn
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		if self._content is None or Youtube_GData.must_be_refresh():
			win = LoadingWindow()
			win.show()
			self._content = []
			try:
				self._content = [YouTubeItem(infos['title'], parent=self, menu=self.menu, **infos) for infos in self.list_fn()]
			except:
				PRINT_EXCEPTION()
			win.hide()
		return self._content



class YoutubeStandardFeedContainer(MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.parent = parent
		self._items = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		if not self._items:
			self._items = [YouTubeSubContainer(feed_name, (lambda feed_num=i: Youtube_GData.search_feed(feed=feed_num, lang=user_config['video']['youtube_languages'])), menu=self.menu, parent=self) for i, feed_name in enumerate(Youtube_GData._standard_feeds_name)]
		return self._items



class YoutubeSearchContainer(MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.parent = parent
		self._items = None
		self.pattern = ''
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		if not self._items:
			def _validate(kb):
				self.pattern = kb._text
				YoutubeConfig().AddSearch(self.pattern)
				new_dir = YouTubeSubContainer(self.pattern, (lambda query=self.pattern: Youtube_GData.search_video(video=query, lang=user_config['video']['youtube_languages'])), menu=self.menu, parent=self)
				self._items.append(new_dir)
				kb.hide()
				self.menu.get_item_list('main_list').append(new_dir)
				return None

			def _search():
				kb = KeyboardWindow(_('Video name'), text=self.pattern, confirm_action=_validate)
				kb.show()
				return None

			self._items = [ActionItem(_('Search') + '...', type_='exe', action=_search)]
			for search in YoutubeConfig().GetSearchs():
				self._items.append(YouTubeSubContainer(search, (lambda query=search: Youtube_GData.search_video(video=query, lang=user_config['video']['youtube_languages'])), menu=self.menu, parent=self))
		return self._items



class YoutubePlaylistContainer(MediaItem, GenericContainer):

	def __init__(self, name, list_fn, parent=None, **kw):
		MediaItem.__init__(self, name, type_='youtubedir', **kw)
		self.list_fn = list_fn
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		if self._content is None or Youtube_GData.must_be_refresh():
			win = LoadingWindow()
			win.show()
			self._content = []
			try:
				self._content = [YouTubeSubContainer(playlist['title'], (lambda playlist_id=playlist['id']: Youtube_GData.parse_playlist(id=playlist_id)), parent=self, menu=self.menu, thumbnail=playlist['thumbnail']) for playlist in self.list_fn()]
			except:
				PRINT_EXCEPTION()
			win.hide()
		return self._content



class YoutubeUsersContainer(MediaItem, GenericContainer):

	def __init__(self, name, parent=None, **kw):
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.parent = parent
		self._items = None
		self.pattern = ''
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		if not self._items:
			def _validate(kb):
				self.pattern = kb._text
				YoutubeConfig().AddUser(self.pattern)
				new_dir = YoutubePlaylistContainer(self.pattern, (lambda query=self.pattern: Youtube_GData.search_playlist(username=query)), menu=self.menu, parent=self)
				self._items.append(new_dir)
				kb.hide()
				self.menu.get_item_list('main_list').append(new_dir)
				return None

			def _search():
				kb = KeyboardWindow(_('User name'), text=self.pattern, confirm_action=_validate)
				kb.show()
				return None

			self._items = [ActionItem(_('Add User') + '...', type_='exe', action=_search)]
			for username in YoutubeConfig().GetUsers():
				self._items.append(YoutubePlaylistContainer(username, (lambda name=username: Youtube_GData.search_playlist(username=name)), menu=self.menu, parent=self))
		return self._items



class YouTubeContainer(MediaItem, GenericContainer):

	__metaclass__ = MetaSingleton

	def __init__(self, parent=None, **kw):
		MediaItem.__init__(self, 'YouTube', type_='youtubedir', **kw)
		self.parent = parent
		self._items = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		# Only return content if preview is True
		if preview:
			return [YoutubeUsersContainer(_('User Playlists'), menu=self.menu, parent=self),
							YoutubeStandardFeedContainer(_('Standard Feeds'), menu=self.menu, parent=self),
							YoutubeSearchContainer(_('Search Videos'), menu=self.menu, parent=self)]
		# Preview is False, this mean the item is entred
		# Check network connection
		try:
			from wynetwork import wynetwork as wn
			gateway = wn.NetDevices().getDeviceInfos(wn.NetConfigurations().getActiveConfigurationInfos()['interface'])['gateway']
		except:
			gateway = '0.0.0.0'
		if gateway == '0.0.0.0':
			MessageWindow(text=_('Please configure connection'), title=_('Not connected'), button=False).show(timeout=5)
			return None
		# Network is connected, we can start playing with Youtube
		if not self._items:
			self._items = [YoutubeUsersContainer(_('User Playlists'), menu=self.menu, parent=self),
										 YoutubeStandardFeedContainer(_('Standard Feeds'), menu=self.menu, parent=self),
										 YoutubeSearchContainer(_('Search Videos'), menu=self.menu, parent=self)]
		return self._items
