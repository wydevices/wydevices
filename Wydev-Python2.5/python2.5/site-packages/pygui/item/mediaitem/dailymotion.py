# -*- coding: utf-8 -*- 
#
# Description:
#
# Audio & Video Items Class Definitions
#
#
#
# Changes:
#
# 2011-10-02
# Initial Commit
#
# 2011-10-04
# Add keyboard pattern search keeping
#
# 2011-11-15
# Add Network connection check before trying to access items
#
# 2011-11-25
# Add available and choosen format to DailyMotion Item
# Allow to select a format for each video with Hand menu in DailyMotion menu
#
# 2011-12-11
# Add loading windows
#
# 2012-05-01
# Move DailyMotion items here
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.debug import PRINT_EXCEPTION, GET_LOGGER
from peewee.misc_utils import MetaSingleton
from pygui.config import user_config
from pygui.item.containers import GenericContainer
from pygui.item.core import Item, ActionItem
from pygui.item.mediaitem.core import MediaItem, VideoItem, ImageItem
from pygui.window import MessageWindow, LoadingWindow, KeyboardWindow

log = GET_LOGGER(__name__)



class DailyMotionItem(VideoItem):

	choosen_format = 'xx'
	available_formats = []

	def __init__(self, name, parent, **kw):
		VideoItem.__init__(self, name, type_='video', **kw)
		self.parent = parent
		return None

	@property
	def wpl_options(self):
		return {'live':'1', 'ifmt':'mp4', 'probe':'0'}

	def media_update(self):
		from pygui.facilities.dailymotionrss import DailyMotionBrowser
		self['uri'], self.choosen_format, self.available_formats = DailyMotionBrowser()._get_flv_uri(self['player_url'], self.choosen_format)
		return None

	def __hash__(self):
		return hash(self['id'])

	def __eq__(self, other):
		if isinstance(other, DailyMotionItem):
			if self['thumbnail'] == other['thumbnail']:
				if self.name == other.name:
					return True
		return False

	def __ne__(self, other):
		return not self == other

	def __cmp__(self, other):
		if isinstance(other, MediaItem):
			if self.wymedia_resource is None or other.wymedia_resource is None:
				return cmp(self.name + self.type + self['id'], other.name + other.type + other['id'])
			return cmp(self.wymedia_resource['id'], other.wymedia_resource['id'])
		else:
			if isinstance(other, dict) and 'id' in other:
				return cmp(self.wymedia_resource['id'], other['id'])
			else:
				return cmp(type(self), type(other))
		return None

	def execute(self):
		items = self.parent.browse()
		try:
			self.player.play(self, items)
		except Exception, e:
			PRINT_EXCEPTION(e)
		return None



class DailyMotionSubContainer(MediaItem, GenericContainer):

	def __init__(self, name, list_fn, parent=None, **kw):
		MediaItem.__init__(self, name, type_='dir', **kw)
		self.list_fn = list_fn
		self.parent = parent
		self._content = None
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		win = LoadingWindow()
		win.show()
		self._content = []
		for elt in self.list_fn():
			try:
				v_uri = elt._video_uri
				if v_uri:
					infos = dict(id=v_uri, player_url=v_uri, thumbnail=elt._thumbnail_uri)
					self._content.append(DailyMotionItem(elt.title, parent=self, menu=self.menu, **infos))
			except:
				MessageWindow(text=_('Enable to access RSS informations.\nTry again in few minutes.'), title=_('RSS Error'), button=False).show(timeout=5)
		win.hide()
		return self._content



class DailyMotionContainer(MediaItem, GenericContainer):

	__metaclass__ = MetaSingleton

	def __init__(self, parent=None, **kw):
		from pygui.facilities.dailymotionrss import DailyMotionBrowser
		MediaItem.__init__(self, 'DailyMotion', type_='dir', **kw)
		self.client = DailyMotionBrowser()
		self.parent = parent
		self._items = None
		self.pattern = ''
		return None

	def execute(self, *args, **kw):
		return None

	def browse(self, preview=False):
		# Only return content if preview is True
		if preview:
			return [DailyMotionSubContainer(section_name, (lambda section_num=i: self.client.search(what=section_num, lang=user_config['video']['dailymotion_languages'])), menu=self.menu, parent=self) for i, section_name in enumerate(self.client._sections_name)]
		# Preview is False, this mean the item is entred
		# Check network connection
		try:
			from wynetwork import wynetwork as wn
			gateway = wn.NetDevices().getDeviceInfos(wn.NetConfigurations().getActiveConfigurationInfos()['interface'])['gateway']
		except:
			gateway = '0.0.0.0'
		if gateway == '0.0.0.0':
			MessageWindow(text=_('Please configure connection'), title=_('Not connected'), button=False).show(timeout=5)
			return None
		# Network is connected, we can start playing
		elif not self._items:
			def _validate(kb):
				self.pattern = kb._text
				new_dir = DailyMotionSubContainer("%s '%s'" % (_('Search'), self.pattern), (lambda query=self.pattern: self.client.search(what=query, lang=user_config['video']['dailymotion_languages'])), menu=self.menu, parent=self)
				self._items.append(new_dir)
				kb.hide()
				self.menu.get_item_list('main_list').append(new_dir)
				return None

			def _search():
				from pygui.window import KeyboardWindow
				kb = KeyboardWindow('Search for:', text=self.pattern, confirm_action=_validate)
				kb.show()
				return None

			self._items = [DailyMotionSubContainer(section_name, (lambda section_num=i: self.client.search(what=section_num, lang=user_config['video']['dailymotion_languages'])), menu=self.menu, parent=self) for i, section_name in enumerate(self.client._sections_name)]
			self._items.append(ActionItem(_('Search') + '...', type_='exe', menu=self.menu, action=_search))
		return self._items
