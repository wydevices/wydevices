# -*- coding: utf-8 -*- 
#
# Description:
#
# Network items (RSS-based web services)
#
#
#
# Changes:
#
# 2011-10-02
# Initial Commit
#
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.debug import GET_LOGGER
from pygui.item.mediaitem.audiovideo import AudioItem, VideoItem, ImageItem
from pygui.item.mediaitem.core import MediaItem, DirItem

log = GET_LOGGER(__name__)



# Network resource container.
# Under the hood, it's an OPML <outline> element.
class NetDirItem(DirItem):

	def __init__(self, wymedia_resource, type_='net_dir', **kw):
		DirItem.__init__(self, wymedia_resource, type_, **kw)
		return None



# Actual RSS feed. Contains news items (NetItem instances).
# 
# Basically a read-only DirItem that uses
# a favicon as its display_type (or does it?).
class NetFeedItem(DirItem):

	def __init__(self, wymedia_resource, type_='net_feed', **kw):
		display_type = wymedia_resource.get('favicon', None)
		DirItem.__init__(self, wymedia_resource, type_=type_, display_type=display_type, **kw)
		return None



# Network resource of some sort. Has an embedded URI that the user
# can attempt to read as any standard wymedia type (audio, video, image...).
# Of course, since the URI only has one type, only one of play_as_audio(),
# play_as_video() and play_as_image() will work -- the other two will display
# an error dialog.
# 
# The standard play() method launches the NetPlayer (text+thumbnail+metadata
# visualization).
# 
# TODO Automatically play the item as the correct type (requires extra
# metadata).
class NetItem(MediaItem):

	player = None
	media_update_fields = ()

	def __init__(self, wymedia_resource, type_='net', menu=None, **kw):
		MediaItem.__init__(self, wymedia_resource, type_=type_, menu=menu, **kw)
		if NetItem.player is None:
			try:
				from pygui.menu.players.net_player import NetPlayer
				NetItem.player = NetPlayer()
			except Exception, e:
				log.error('Unable to spawn NetPlayer: %r', e)
		return None

	# Launch the text-style RSS player.
	def execute(self):
		items = self.parent.browse()
		self.player.play(self, items)
		return None

	# Attempt to launch the audio player for the embedded URI
	def play_embedded_audio(self):
		forged_item = AudioItem(self.name, menu=self.menu, parent=self, uri=self['uri'], backend='dummy')
		forged_item.player.play(forged_item, [forged_item])
		return None

	# Attempt to launch the video player for the embedded URI
	def play_embedded_video(self):
		forged_item = VideoItem(self.name, menu=self.menu, parent=self, uri=self['uri'], backend='dummy')
		forged_item.player.play(forged_item, [forged_item])
		return None

	# Attempt to launch the image player for the embedded
	def play_embedded_image(self):
		forged_item = ImageItem(self.name, menu=self.menu, parent=self, uri=self['uri'], backend='dummy')
		forged_item.player.play(forged_item, [forged_item])
		return None
