# -*- coding: utf-8 -*- 
#
# Description:
#
# Items Info Class Definition
#
#
#
# Changes:
#
# 2011-10-02
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from peewee.formatters import seconds_to_hhmmss_utc, seconds_to_mmss_utc, bytes_to_human, bits_to_human
from peewee.messages import send as louie_send
from pygui.facilities.codemapping import soundconfig_dict, audio_codec_substitution_dict
from pygui.facilities.l10n import get_date_format, get_time_format, omnicode
from pygui.item.containers import ActionContainer
from pygui.item.core import Item
from pygui.item.mediaitem.core import DirItem, wymedia_sorting
from pygui.markerlist import Markerlist
from pygui.window import KeyboardWindow, LoadingWindow
from time import localtime, strftime
from wymedia.wmplus import get_child_count, playlist_get_membership

log = GET_LOGGER(__name__)



# Allow easy access and formatting of items attributes
def get_field(it, field):
	if field == 'size':
		if it['size']:
			return bytes_to_human(int(it['size']))
		return _('Unknown size')
	elif field == 'duration':
		duration = it['duration']
		if duration:
			seconds = int(duration)
			if seconds >= 3600:
				return seconds_to_hhmmss_utc(seconds)
			return seconds_to_mmss_utc(seconds)
		return _('Unknown duration')
	elif field == 'bitrate':
		if it['bitrate']:
			return ('%ss' % bits_to_human(int(it['bitrate'])))
		return _('Unknown bitrate')
	elif field in ('date', 'recordedStartDateTime'):
		if it['field']:
			return strftime('%s %s' % (get_date_format(), get_time_format()), localtime(float(it['field'])))
		return _('Unknown date')
	elif field == 'uri':
		uri = it['uri']
		if uri:
			if uri.startswith('file://'):
				return uri[16:]
			return uri
		return _('Unknown URI')
	elif field == 'favorite_list':
		return it.parent.name
	elif field == 'cas':
		return {0 : _('Free content'), 1 : _('Scrambled content')}.get(it['freeCaMode'], _('Unknown content access'))
	elif field == 'resolution':
		w = it['width']
		h = it['height']
		if w and h:
			return ('%s x %s' % (w, h))
		return _('Unknown resolution')
	elif field == 'childs':
		if it.wymedia_resource and it.wymedia_resource['backend'] != 'upnp':
				return omnicode(get_child_count(it.wymedia_resource, dict(universe=it.universe)))
		return _('Unknown number')
	elif field == 'nrAudioChannels':
		if it['nrAudioChannels']:
			return soundconfig_dict.get(int(it['nrAudioChannels']), _('Unknown sound format'))
		return _('Unknown sound format')
	elif field == 'playlists':
		wm_pl = playlist_get_membership(it.wymedia_resource, 0, 10, wymedia_sorting, dict(universe=it.universe))
		return ', '.join([pl['title'] for pl in wm_pl])
	elif field == 'audio_codec':
		a_codec = it['audio_codec']
		print a_codec
		if audio_codec_substitution_dict.get(a_codec):
			return audio_codec_substitution_dict.get(a_codec)
		return _('Unknown audio codec')
	if it['field']:
		return it['field']
	return _('Unknown')



# Item used to store a metadata (title: value)
class InfoItem(Item):

	def __init__(self, item, title, field, editable=False):
		Item.__init__(self, name=get_field(item, field), type_='info')
		self.item = item
		self.title = title
		self.field = field
		self.editable = editable
		return None

	def _edit_value(self):
		text = None
		def _InfoItem__do_update(kbd):
			new_value = kbd._text
			try:
				if self.item['refid']:
					kw = {self.field: new_value}
					self.item.vfs_set_metas(_unref_link=True, **kw)
				else:
					self.item[self.field] = new_value
			except:
				log.debug('setting ParentalRating failed ')
				PRINT_EXCEPTION()
			else:
				self.name = new_value
			kbd.hide()
			louie_send('main_list', sender=self.menu, action='reset', value=self.menu['main_list'], position=self.menu.selected_pos)

		kbd = KeyboardWindow(self.title, text=self.name, confirm_action=_InfoItem__do_update)
		kbd.show()
		return None

	def execute(self):
		if self.editable:
			self._edit_value()
		return None

	def reload(self):
		self.name = get_field(self.item, self.field)
		return None

	def __hash__(self):
		return hash(self.name + self.field)

	def __eq__(self, other):
		if isinstance(other, InfoItem):
			if self.name == other.name:
				return self.field == other.field
		return False

	def __cmp__(self, other):
		if isinstance(other, InfoItem):
			if cmp(self.name, other.name):
				return cmp(self.field, other.field)
			else:
				return cmp(self.name, other.name)
		return cmp(type(self), type(other))



# Item used to toggle the active/inactive status
# of a scheduled record.
class RecordActivationItem(ActionContainer):

	radio = True

	def __init__(self, item, menu, name, **kw):
		self.item = item
		self.actions_dict = {'on': {'handler': self.check_active, 'caption': _('Active'), 'checked': self.item.active, 'args': ('on',), 'kwargs': {}}, 'off': {'handler': self.check_active, 'caption': _('Inactive'), 'checked': not self.item.active, 'args': ('off',), 'kwargs': {}}}
		ActionContainer.__init__(self, name, type_='info', menu=menu, **kw)
		return None

	# Toggles the record's active/inactive status
	def check_active(self, key):
		self.item.active = not self.item.active
		self._update_checked(key)
		self.menu._set_options_list(keep_selection=True)
		return None



# Handle protections on Item (only hide for now)
class ProtectionsActionItem(ActionContainer):

	def __init__(self, item, menu, name, **kw):
		self.item = item
		self.actions_dict = {'hide': {'handler': self.hide, 'caption': _('Hide'), 'checked': bool(self.item['hidden']), 'args': ('hide',), 'kwargs': {}}, 'unhide': {'handler': self.hide, 'caption': _('Unhide'), 'checked': not bool(self.item['hidden']), 'args': ('unhide',), 'kwargs': {}}}
		self.title = name
		self.field = 'protection'
		if item['hidden']:
			name = _('Hidden')
		else:
			name = _('Unhide')
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		self.radio = True
		return None

	def hide(self, key):
		self._update_checked(key)
		if self.item['hidden']:
			new_hide = ''
		else:
			new_hide = '1'
		try:
			self.item['hidden'] = new_hide
		except:
			log.debug('Setting %s[hide] failed ', self.item)
			PRINT_EXCEPTION()
		self.menu._set_options_list(keep_selection=True)
		return None



# Handle parental rating on Item
class ParentalRatingActionItem(ActionContainer):

	def __init__(self, item, menu, name, **kw):
		self.item = item
		if not self.item['maturity_rating']:
			rate = 0
		else:
			rate = self.item['maturity_rating']
		self.title = name
		self.field = 'parental_rating'
		self.actions_dict = {'0': {'handler': self.rate, 'caption': _('No rating'), 'checked': rate == 0, 'args': ('0',), 'kwargs': {}, 'pos': 0}, '10': {'handler': self.rate, 'caption': _('-10 years'), 'checked': rate == 10, 'args': ('10',), 'kwargs': {}, 'pos': 1}, '12': {'handler': self.rate, 'caption': _('10 - 12 years'), 'checked': rate == 12, 'args': ('12',), 'kwargs': {}, 'pos': 2}, '16': {'handler': self.rate, 'caption': _('12 - 16 years'), 'checked': rate == 16, 'args': ('16',), 'kwargs': {}, 'pos': 3}, '18': {'handler': self.rate, 'caption': _('16 - 18 years'), 'checked': rate == 18, 'args': ('18',), 'kwargs': {}, 'pos': 4}, '99': {'handler': self.rate, 'caption': _('Hidden'), 'checked': rate == 99, 'args': ('99',), 'kwargs': {}, 'pos': 5}}
		if rate not in self.actions_dict:
			rate = '0'
		name = self.actions_dict[rate]['caption']
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		self.radio = True
		self._update_checked(rate)
		return None

	def rate(self, age):
		self._update_checked(age)
		self.name = self.actions_dict[age]['caption']
		self.menu._set_options_list(keep_selection=True)
		try:
			if isinstance(self.item, DirItem):
				w = LoadingWindow()
				w.show()
				ml = Markerlist(self.item.universe, 'rate')
				ml.add_item(self.item)
				ml['maturity_rating'] = age
				w.hide()
				ml.clear()
			else:
				if self.item['refid']:
					self.item.vfs_set_metas(_unref_link=True, maturity_rating=age)
				else:
					self.item['maturity_rating'] = age
		except:
			log.debug('setting %s[maturity_rating] failed ', self.item)
			PRINT_EXCEPTION()
		return None
