# -*- coding: utf-8 -*- 
#
# Description:
#
# Connection Parameters Items Class Definitions
#
#
#
# Changes:
#
# 2011-10-02
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import pygui.config as config

from pygui.facilities.codemapping import hdmiresolution_dict
from pygui.facilities.l10n import UnicodeDict
from pygui.facilities.mixer import Mix as Mixer
from pygui.item.core import ActionItem
from pygui.item.parameters import ParametersSetupItem, UserConfigSetupItem, BooleanUserConfigSetupItem
from pygui.shared import pygui_globs
from pygui.window import BigMessageWindow, ConfirmWindow, Button

HDMI_BOOL_OPTIONS = UnicodeDict({False: 'ON', True: 'OFF'})
SPDIF_SURROUND = UnicodeDict({True: '5.1', False: 'Stereo'})
COMPOSITE_OUT = UnicodeDict({'pal': 'PAL', 'ntsc': 'NTSC'})



# Generic Resolution setup item
class ResolutionSetupItem(UserConfigSetupItem):

	depth = 2

	def _set_resolution(self, resolution):
		if resolution in COMPOSITE_OUT:
			real_resolution = config.cvbs_resolution[resolution]
		else:
			real_resolution = resolution
		w, h, interlaced, freq = real_resolution
		pygui_globs['display'].set_resolution((w, h), interlaced, freq)
		config.user_config[self.domain][self.key] = resolution
		return None

	def _select_option(self, option):
		self._previous_resolution = config.user_config[self.domain][self.key]
		self._new_resolution = option
		super(ResolutionSetupItem, self)._select_option(option)
		if config.user_config['connections']['active_device'] == self.associated_device:
			self._go_change_resolution()
		return None

	def _go_change_resolution(self):
		option = self._new_resolution
		if self.associated_device == 'hdmi':
			resolution_caption = hdmiresolution_dict[option]
		else:
			resolution_caption = COMPOSITE_OUT[option]
		self._set_resolution(option)
		self.menu.related_menu.refresh_connection(resolution_caption)
		self._confirm_new_resolution(self._previous_resolution, option)
		return None

	# Prompt the user to press play/pause if the new resolution was set successfully. If not,
	# go back to the screen's previous resolution
	def _confirm_new_resolution(self, old_resolution, new_resolution):
		title = _('Compatibility check')
		msg = _('If you can read this page, your display resolution was successfully changed. Hit Play/Pause to confirm.')
		next = Button(_('OK'))
		next.connect((lambda : config.user_config.save()))
		win = BigMessageWindow(msg, title, next)
		win.show(timeout=20, timeout_callback=(lambda : self._discard_new_resolution(old_resolution)))
		return None

	# Restore the resolution to its previous setting, and update the display accordingly
	def _discard_new_resolution(self, old_resolution):
		if not old_resolution:
			old_resolution = self.fallback
		super(ResolutionSetupItem, self)._select_option(old_resolution)
		self._set_resolution(old_resolution)
		config.user_config.save()
		if self.associated_device == 'hdmi':
			resolution_caption = hdmiresolution_dict[old_resolution]
		else:
			resolution_caption = COMPOSITE_OUT[old_resolution]
		self.menu.related_menu.refresh_connection(resolution_caption)
		title = _('Compatibility check')
		msg = _('Your display resolution has been restored to its previous setting')
		BigMessageWindow(msg, title).show()
		return None



class HdmiOutSetupItem(ResolutionSetupItem):

	translation_dict = hdmiresolution_dict
	associated_device = 'hdmi'
	fallback = (1280, 720, 0, 50)

	def __init__(self, name, menu, domain, key, choices_list):
		def sort_resolutions(r1, r2):
			if r1[3] - r2[3] > 1:
				return 1
			elif r2[3] - r1[3] > 1:
				return -1
			elif abs(r1[3] - r2[3]) <= 1:
				if r1[1] > r2[1]:
					return -1
				elif r1[1] < r2[1]:
					return 1
				else:
					return 0
			return None

		resolutions = hdmiresolution_dict.keys()
		resolutions.sort(sort_resolutions)
		ResolutionSetupItem.__init__(self, name=name, menu=menu, domain=domain, key=key, choices_list=resolutions)
		return None



class CompositeOutSetupItem(ResolutionSetupItem):

	translation_dict = COMPOSITE_OUT
	associated_device = 'cvbs'
	fallback = 'pal'



# Automatic Framerate adaptation setup
class AutoFrameRateSetupItem(BooleanUserConfigSetupItem):

	depth = 2

	def execute_action(self, val):
		if val:
			msg = _("Warning, when you activate this option, some short black screens may be displayed at the beginning and the end of playback. Don't worry about it; your box is just switching its frame rate to guarantee you the best image!")
			BigMessageWindow(msg).show(10)
		return None



# HDMI sound setup
class HdmiSoundSetupItem(UserConfigSetupItem):

	depth = 2
	translation_dict = HDMI_BOOL_OPTIONS

	def _select_option(self, val):
		ret = Mixer().set_hdmi_mute(val)
		if ret:
			UserConfigSetupItem._select_option(self, val)
		return None



# S/PDIF surround sound setup
class SpdifSurroundSetupItem(UserConfigSetupItem):

	depth = 2
	translation_dict = SPDIF_SURROUND
