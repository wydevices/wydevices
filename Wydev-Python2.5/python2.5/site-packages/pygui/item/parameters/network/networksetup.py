# -*- coding: utf-8 -*- 
#
# Description:
#
# Network Parameters Items Class Definitions
#
#
#
# Changes:
#
# 2012-04-12
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.messages import send as louie_send
from pygui.config import user_config
from pygui.item.containers import GenericContainer
from pygui.item.core import ActionItem, Item
from pygui.menu.menu import Menu
from pygui.window import IpWindow
from wynetwork import wynetwork as wn

wn_dev = wn.NetDevices()
wn_cfg = wn.NetConfigurations()



class ConnectionTypeContainer(GenericContainer):

	def __init__(self, callback, **kw):
		GenericContainer.__init__(self, **kw)
		self._callback = callback
		return None

	def browse(self, preview=False):
		return [ActionItem(name=_('Ethernet'), type_='setupparameters', action=self._callback, args=('802.3',)),
						ActionItem(name=_('Wireless'), type_='setupparameters', action=self._callback, args=('802.11',))]



class AutoManConnectionContainer(GenericContainer):

	def __init__(self, callback, **kw):
		GenericContainer.__init__(self, **kw)
		self._callback = callback
		return None

	def browse(self, preview=False):
		return [ActionItem(name=_('Automatic'), type_='setupparameters', action=self._callback, args=('upnp',)),
						ActionItem(name=_('Manual'), type_='setupparameters', action=self._callback, args=('static',))]



class AuthTypeConnectionContainer(GenericContainer):

	def __init__(self, callback, **kw):
		GenericContainer.__init__(self, **kw)
		self._callback = callback
		return None

	def browse(self, preview=False):
		from pygui.facilities.codemapping import wifi_security_dict
		return [ActionItem(infos['caption'], type_='setupitem', action=self._callback, args=(infos,)) for key_type, infos in wifi_security_dict.items()]



class NetworkWireSetupItem(ActionItem):

	def __init__(self, *args, **kw):
		ActionItem.__init__(self, action=self.launch_config, type_='setupparameters', **kw)
		return None

	def browse(self, preview=False):
		return None

	def launch_config(self):
		from pygui.menu.menu.network_connect import NetworkConnectMenu
		NetworkConnectMenu(name='ConnectionMenu', type='network_connect').show()
		return None



# Used for manual network setting
class EditNetworkConfSetupItem(GenericContainer):

	def __init__(self, callback, default_values, **kw):
		GenericContainer.__init__(self, **kw)
		self._callback = callback
		self._default_values = default_values
		return None

	def _update_values(self, value, key):
		self._default_values[key] = value
		return None

	def browse(self, preview=False):
		return [IpSetupItem(can_modify=True, callback=self._update_values, callback_args=('ipAddress',), active_values=self._default_values),
						NetmaskSetupItem(can_modify=True, callback=self._update_values, callback_args=('netmask',), active_values=self._default_values),
						GatewaySetupItem(can_modify=True, callback=self._update_values, callback_args=('gateway',), active_values=self._default_values),
						DnsSetupItem(dns_num=1, can_modify=True, callback=self._update_values, callback_args=('dns1',), active_values=self._default_values),
						DnsSetupItem(dns_num=2, can_modify=True, callback=self._update_values, callback_args=('dns2',), active_values=self._default_values),
						ActionItem(_('Apply'), type_='setupitem', action=self._callback, args=[self._default_values])]



class StatusNetworkConfSetupItem(GenericContainer):

	depth = 2

	def __init__(self, can_modify, **kw):
		GenericContainer.__init__(self, **kw)
		self._can_modify = can_modify
		return None

	def browse(self, preview=False):
		trans = {'802.3': _('Ethernet'), '802.11': _('Wireless'), None: _('Disconnected')}
		active_cfg = wn_cfg.getActiveConfigurationInfos()
		dev_infos = wn_dev.getDeviceInfos(active_cfg['interface'])
		return [Item(trans[dev_infos['networkType']], type_='setupitem'),
						IpSetupItem(can_modify=self._can_modify, active_values=dev_infos),
						NetmaskSetupItem(can_modify=self._can_modify, active_values=dev_infos),
						GatewaySetupItem(can_modify=self._can_modify, active_values=dev_infos),
						DnsSetupItem(dns_num=1, can_modify=self._can_modify, active_values=dev_infos),
						DnsSetupItem(dns_num=2, can_modify=self._can_modify, active_values=dev_infos),
						Item(_('MAC : %(addr)s') % dict(addr=dev_infos['hwAddress']), type_='setupitem')]



# Mother class for classes that display network information (such as IP address, netmask...)
# and permit to change it, if can_modify is True. In this case, an IpWindow is displayed to
# get new addresses and a callback method can be called (if provided).
# Informations are retrieved from MetworkManager object.
# Custom attributes :
# - item's name follows pattern_name. Interpolates with self.<pattern_values['name']> attribute(s)
# - window's title (for modification) follows pattern_title.
# Interpolates with self.<pattern_values['title']> attribute(s)
class NetworkParamSetupItem(ActionItem):

	pattern_name = '%(addr)s'
	pattern_title = 'IP address'
	pattern_values = {'name': ('addr',), 'title': ()}

	def __init__(self, can_modify, callback=None, callback_args=(), active_values=None, **kw):
		self._can_modify = can_modify
		self._callback = callback
		self._callback_args = callback_args
		if not active_values:
			active_cfg = wn_cfg.getActiveConfigurationInfos()
			active_values = wn_dev.getDeviceInfos(active_cfg['interface'])
		_default = ('0.0.0.0' if can_modify else _('Disconnected'))
		self.addr = (active_values[self.attribute] if active_values[self.attribute] else _default)
		ActionItem.__init__(self, name=_(self.pattern_name) % dict(((elt, getattr(self, elt)) for elt in self.pattern_values['name'])), action=self._modify, type_='setupitem', **kw)
		return None

	def update_addr(self, addr):
		if addr not in ('', self.addr):
			self.addr = addr
			self.name = _(self.pattern_name) % dict(((elt, getattr(self, elt)) for elt in self.pattern_values['name']))
			self.reset_view()
		return None

	def _modify(self):
		if not self._can_modify:
			return None

		def _update():
			val = kbd.text
			self.update_addr(val)
			kbd.hide()
			if self._callback is not None:
				self._callback(val, *self._callback_args)
			return None

		kbd = IpWindow(self.addr, title=_(self.pattern_title) % dict(((elt, getattr(self, elt)) for elt in self.pattern_values['title'])), confirm_action=_update)
		kbd.show()
		return None



class IpSetupItem(NetworkParamSetupItem):

	pattern_name = 'IP : %(addr)s'
	pattern_title = 'IP address'
	attribute = 'ipAddress'



class NetmaskSetupItem(NetworkParamSetupItem):

	pattern_name = 'Mask : %(addr)s'
	pattern_title = 'Mask'
	attribute = 'netmask'



class GatewaySetupItem(NetworkParamSetupItem):

	pattern_name = 'Gateway : %(addr)s'
	pattern_title = 'Gateway'
	attribute = 'gateway'



class DnsSetupItem(NetworkParamSetupItem):

	pattern_name = 'DNS %(dns_num)s : %(addr)s'
	pattern_title = 'DNS %(dns_num)s'
	pattern_values = {'name': ('addr', 'dns_num'), 'title': ('dns_num',)}

	def __init__(self, dns_num, can_modify, callback=None, callback_args=(), active_values=None, **kw):
		self.dns_num = dns_num
		self.attribute = 'dns%s' % dns_num
		NetworkParamSetupItem.__init__(self, can_modify, callback=callback, callback_args=callback_args, active_values=active_values, **kw)
		return None
