# -*- coding: utf-8 -*- 
#
# Description:
#
# Security Parameters Items Class Definitions
#
#
#
# Changes:
#
# 2012-04-12
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from pygui.item.containers import GenericContainer
from pygui.item.parameters import UserConfigSetupMultipleItem, IterItemContainer, UserConfigSetupItem, ParametersSetupItem, BooleanUserConfigSetupItem
from pygui.item.core import ActionItem
from pygui.shared import pygui_globs
from pygui.config import user_config
from pygui.facilities.l10n import UnicodeDict



class SecretCodeContainer(GenericContainer):

	def __init__(self, name, parent, **kw):
		GenericContainer.__init__(self, name, type_='parameter', **kw)
		self.parent = parent
		return None

	def browse(self, preview=False):
		return [IterItemContainer('secret_%d' % i, iter_=xrange(10), menu=self.menu, parent=self.parent) for i in xrange(4)]



# Record a list of 4 integers (0 to 10) in user_config
# (at 'security' configuration class)
class SecretCodeUserConfigSetupItem(UserConfigSetupMultipleItem):

	translation_dict = {}

	def __init__(self, domain, key, *args, **kw):
		UserConfigSetupMultipleItem.__init__(self, domain, key, *args, **kw)
		self.preview_list = SecretCodeContainer('Code', menu=self.menu, parent=self).browse()
		return None



from pygui.item.parameters.core import UserConfigSetupCheckMultipleItem



class SecretCodeCheckConfigSetupItem(UserConfigSetupCheckMultipleItem):

	translation_dict = {}

	def __init__(self, domain, key, *args, **kw):
		UserConfigSetupCheckMultipleItem.__init__(self, domain, key, *args, **kw)
		self.preview_list = SecretCodeContainer('Code', menu=self.menu, parent=self).browse()
		return None



class SecretCodeParameters(ActionItem):

	def __init__(self, name, type_):
		ActionItem.__init__(self, name, type_, action=self._launch_secret_menu)
		return None

	def _launch_secret_menu(self):
		SecretCodeSetupParametersMenu(name=_('Code PIN')).show(hide_previous_menu=False)
		return None



class QuestionAnswerParameters(ActionItem):

	def __init__(self, name, type_, check=True, end_action=None, end_action_args=(), end_action_kw={}):
		ActionItem.__init__(self, name, type_, action=self._launch_qa_menu)
		self._check = check
		self._end_action = end_action
		self._end_action_args = end_action_args
		self._end_action_kw = end_action_kw
		return None

	def _launch_qa_menu(self):
		QuestionAnswerSetupParametersLauncher(self._check, self._end_action, self._end_action_args, self._end_action_kw)
		return None



class ParentalControlConfigSetupItem(BooleanUserConfigSetupItem):

	def __init__(self, reload_center=True, *args, **kw):
		self._reload_center = reload_center
		BooleanUserConfigSetupItem.__init__(self, *args, **kw)
		return None

	def execute_action(self, val):
		if val and (user_config['security']['secretcode'], user_config['security']['question'], user_config['security']['answer']) == (None, None, None):
			self.menu.first_parental = True
			def _reload_when_ok():
				if self._reload_center:
					self.reload_center_list(rebuild=True)
				return None

			self.menu.end_func = _reload_when_ok
			self.menu.on_first_parental_control()
		elif self._reload_center:
			self.reload_center_list(rebuild=True)
		return None



# This class is the mother for all those are browseable when
# parental_control is activated and are 'empty' when it is deactivated
class ParentalDependantSetupItem(UserConfigSetupItem):

	def __init__(self, domain, key, choices, reload_center=True, **kw):
		if not user_config['security']['parental_control']:
			choices = []
		self._reload_center = reload_center
		UserConfigSetupItem.__init__(self, domain, key, choices, **kw)
		return None

	def execute_action(self, val):
		if self._reload_center:
			self.reload_center_list(rebuild=True)
		return None



class ParentModeConfigSetupItem(ActionItem):

	def __init__(self, *args, **kw):
		ActionItem.__init__(self, action=self.execute_action, *args, **kw)
		return None

	def execute_action(self):
		from pygui.markerlist import markerlists
		user_config['security']['parent_mode'] = False
		user_config.save()
		pygui_globs['menustack'].back_to_home()
		markerlists().clear_all_markerlists()
		return None



class ParentalRatingConfigSetupItem(ParentalDependantSetupItem):

	translation_dict = UnicodeDict({0: 'No rating', 10: '-10 years', 12: '10 - 12 years', 16: '12 - 16 years', 18: '16 - 18 years'})



class ProtectionParametersSetupItem(ParametersSetupItem):

	depth = 3

	def __init__(self, *args, **kw):
		ParametersSetupItem.__init__(self, *args, **kw)
		return None

	def browse(self, preview=False):
		preview_list = [ParentalControlConfigSetupItem(domain='security', key='parental_control', choices_list=(True, False), name='Parental control', type_='setupitem')]
		if user_config['security']['parental_control']:
			preview_list.append(ParentModeConfigSetupItem(name=_('Set to child mode'), type_='setupitem', menu=self.menu))
		if (user_config['security']['answer'], user_config['security']['question'], user_config['security']['secretcode']) != (None, None, None):
			preview_list.extend([SecretCodeParameters(name=_('Modify Secret Code'), type_='parameters'), QuestionAnswerParameters(name=_('Modify Question / Answer'), type_='parameters')])
		if user_config['security']['parental_control']:
			preview_list.append(ParentalRatingConfigSetupItem(domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), name='Parental rating', type_='setupitem'))
		return preview_list



from pygui.menu.menu.parameters import SecretCodeSetupParametersMenu
from pygui.menu.menu.security import QuestionAnswerSetupParametersLauncher
