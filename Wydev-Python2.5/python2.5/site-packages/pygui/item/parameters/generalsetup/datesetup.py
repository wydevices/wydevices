# -*- coding: utf-8 -*- 
#
# Description:
#
# DateSetup Parameters Items Class Definitions
#
#
#
# Changes:
#
# 2012-04-12
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.dateutils import TimeManager
from peewee.debug import PRINT_EXCEPTION
from peewee.messages import send as louie_send
from peewee.notifier import Task
from pygui.config import user_config
from pygui.facilities.codemapping import month_dict
from pygui.facilities.l10n import UnicodeDict, get_date_format, get_time_format
from pygui.item.containers import GenericContainer
from pygui.item.core import Item, ActionItem
from pygui.item.parameters import UserConfigSetupMultipleItem, UserConfigSetupItem, ParametersSetupItem, IterItemContainer
from time import localtime



class DateUserConfigSetupItem(UserConfigSetupMultipleItem):

	translation_dict = month_dict
	
	def __init__(self, domain, key, *args, **kw):
		class DateContainer(GenericContainer):
			def __init__(self, **kw):
				GenericContainer.__init__(self, type_='parameter', **kw)
				return None

			def browse(self, preview=False):
				return [IterItemContainer(name='day', iter_=('%02d' % i for i in xrange(1, 32)), menu=self.menu, parent=self.parent),
								IterItemContainer(name='month', iter_=month_dict, menu=self.menu, parent=self.parent),
								IterItemContainer(name='year', iter_=xrange(2000, 2020), menu=self.menu, parent=self.parent),
								IterItemContainer(name='hour', iter_=('%02d' % i for i in xrange(24)), menu=self.menu, parent=self.parent),
								IterItemContainer(name='min', iter_=('%02d' % i for i in xrange(60)), menu=self.menu, parent=self.parent)]

		UserConfigSetupMultipleItem.__init__(self, domain, key, *args, **kw)
		self.preview_list = DateContainer(name='Date', menu=self.menu, parent=self).browse()
		return None

	def execute_action(self, val):
		from time import mktime
		year, month, day, hour, min = (int(val[2]), int(val[1]), int(val[0]), int(val[3]), int(val[4]))
		time_sec = mktime((year, month, day, hour, min, 0, 0, 0, -1))
		TimeManager().time_setter = 1
		TimeManager().set_time(time_sec)
		TimeManager().time_setter = user_config['base']['timeupdatemode']
		return None



class ModifyDateSetupItem(ActionItem):

	def __init__(self, *args, **kw):
		ActionItem.__init__(self, *args, **kw)
		self.preview_list = []
		return None

	def execute(self):
		from pygui.menu.menu.timezone import DateSetupMenu
		if TimeManager().time_setter == 1:
			DateSetupMenu().show(hide_previous_menu=False)
		return None



class UpdateModeItem(UserConfigSetupItem):

	translation_dict = UnicodeDict({1: 'Manual', 3: 'Automatic'})
	
	def execute_action(self, val):
		TimeManager().time_setter = val
		self.reload_center_list(True)
		return None



class DateFormatItem(UserConfigSetupItem):

	translation_dict = UnicodeDict({0: 'YYYY/MM/DD', 1: 'DD/MM/YYYY', 2: 'MM/DD/YYYY'})

	def execute_action(self, val):
		louie_send('clock', sender='clock', date_format=get_date_format())
		return None



class TimeFormatItem(UserConfigSetupItem):

	translation_dict = UnicodeDict({0: '12 hours', 1: '24 hours'})

	def execute_action(self, val):
		louie_send('clock', sender='clock', time_format=get_time_format())
		return None



class TimeZoneItem(ActionItem):

	def __init__(self, *args, **kw):
		ActionItem.__init__(self, *args, **kw)
		return None

	def execute(self):
		from pygui.menu.menu.timezone import TimeZoneSetupMenu
		TimeZoneSetupMenu(name=_('Time zone')).show(hide_previous_menu=False)
		return None



class TimeZoneUserConfigSetupItem(UserConfigSetupItem):

	translation_dict = dict(((zone, _(zone)) for zone in TimeManager().get_timezones()))
	def execute_action(self, val):
		try:
			TimeManager().set_timezone(val)
		except Exception , e:
			PRINT_EXCEPTION(e)
		return None



class DateParametersContainer(ParametersSetupItem):

	depth = 3
	def __init__(self, *args, **kw):
		ParametersSetupItem.__init__(self, *args, **kw)
		return None

	def browse(self, preview=False):
		preview_list = [UpdateModeItem('base', 'timeupdatemode', [1, 3], 'Update mode', type_='setupitem'),
										DateFormatItem('base', 'dateformat', [0, 1, 2], 'Date format', type_='setupitem'),
										TimeFormatItem('base', 'timeformat', [0, 1], 'Time format', type_='setupitem')]
		if user_config['base']['timeupdatemode'] == 1:
			preview_list.append(ModifyDateSetupItem(_('Time set'), 'setupitem', menu=self.menu))
		preview_list.append(TimeZoneItem(_('Time zone'), 'setupitem', menu=self.menu))
		return preview_list



# This item permits to get date and time and refresh it every second (thaks to Task)
class DateClockSetupItem(Item):

	format = ('Y', 'M', 'd', 'h', 'm', 's')

	def __init__(self, template, menu, *args, **kw):
		self.template = template
		Item.__init__(self, name='', type_='setupitem', menu=menu, *args, **kw)
		self._t = Task(self.update_name)
		self._t.start(delay=1, loop=True, init_delay=0, consider_idle=True)
		return None

	# Put the item name, with date and time, formatting thanks to DateClockSetupItem.format
	def update_name(self):
		tt = localtime()[:-4]
		self.name = self.template % dict(((form, str(t).rjust(2, 0)) for form, t in zip(DateClockSetupItem.format, tt)))
		self.reset_view()
		return None

	def stop(self):
		self._t.stop()
		return None
