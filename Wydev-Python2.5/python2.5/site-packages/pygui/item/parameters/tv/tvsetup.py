# -*- coding: utf-8 -*- 
#
# Description:
#
# TvSetup Parameters Items Class Definitions
#
#
#
# Changes:
#
# 2012-04-12
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.debug import GET_LOGGER
from pygui.config import user_config
from pygui.item.core import Item, ActionItem
from pygui.item.parameters import ParametersSetupItem, UserConfigSetupItem, BooleanUserConfigSetupItem
from pygui.item.parameters.tv import wyscanserver
from time import gmtime, strftime
from wyrecord import WyRecord

import pygui.config as config

log = GET_LOGGER(__name__)



class FirstbootTNTScanSetupItem(ParametersSetupItem):

	def browse(self, preview=False):
		return [ActionItem(name=_('Yes'), type_='setupitem', action=(lambda : TNTAutomaticScanItem(parent=None, name=_('Yes'), menu=self.menu, type_='setupitem').execute())),
						ActionItem(name=_('No'), type_='setupitem', action=(lambda : self.menu._set_options_list(None)))]



class EPGMarginItem(UserConfigSetupItem):

	depth = 2
	translation_dict = {}

	def __init__(self, *args, **kw):
		if not EPGMarginItem.translation_dict:
			for d in config.HMI_TV['epg_margins']:
				_d = d * 60
				EPGMarginItem.translation_dict[d] = strftime(_('%M min'), gmtime(_d))
		UserConfigSetupItem.__init__(self, *args, **kw)
		return None

	def _select_option(self, val):
		UserConfigSetupItem._select_option(self, val)
		WyRecord().setRecordPadding(val * 60)
		return None



class TNTScanMenuSetupItem(ParametersSetupItem):

	depth = 2

	def __init__(self, *args, **kw):
		ParametersSetupItem.__init__(self, *args, **kw)
		self.include_scrambled = user_config['tv']['scan_with_scrambled']
		self.all_channels_item = ActionItem(_('Free and pay channels'), type_='setupitem', display_type=('checked' if self.include_scrambled else 'not_checked'), action=self.set_include_scrambled, args=(True,))
		self.free_channels_only_item = ActionItem(_('Free channels only'), type_='setupitem', display_type=('not_checked' if self.include_scrambled else 'checked'), action=self.set_include_scrambled, args=(False,))
		self.preview_list = [self.all_channels_item,
												 self.free_channels_only_item,
												 TNTAutomaticScanItem(parent=self, name='Start scan', type_='setupitem')]
		return None

	# Set whether to include scrambled channels in the scan, and
	# update the display accordingly.
	# 
	# Note: Canal+, being scrambled only part of the time, is considered
	# a free (not scrambled) channel for the purposes of the scan.
	def set_include_scrambled(self, value):
		self.include_scrambled = value
		self.all_channels_item.display_type = ('checked' if value else 'not_checked')
		self.free_channels_only_item.display_type = ('not_checked' if value else 'checked')
		self.all_channels_item.reset_view()
		self.free_channels_only_item.reset_view()
		return None



class ExternalAntenna(BooleanUserConfigSetupItem):

	depth = 2

	def execute_action(self, value):
		wyscanserver().EnableHighLnbVoltage(1, value)
		return None



class TNTAutomaticScanItem(ParametersSetupItem):

	preview_list = None

	def __init__(self, parent, *args, **kw):
		ParametersSetupItem.__init__(self, *args, **kw)
		self.parent = parent
		return None

	# Launch a DVB scan
	def scan(self, name, antenna, transponder, scan_network, include_scrambled):
		scan_item_list = [DVBSScanItem(wyscanserver(), name, antenna, transponder, scan_network, include_scrambled, menu=self.menu)]
		user_config['tv']['scan_with_scrambled'] = include_scrambled
		user_config.save()
		scan_item_list[0].player.play(scan_item_list[0], playlist=scan_item_list, hide_previous_menu=False)
		return None

	def execute(self):
		country = 'none'
		tpset_list = [tp for tp in wyscanserver().GetTransponderSets(-1, 1) if tp[1] == country]
		if len(tpset_list) == 0:
			log.warning('Your country does not seem to be listed in wyscan database')
			return None
		tpset = tpset_list[0]
		antenna_list = [antenna for antenna in wyscanserver().GetAntenna(-1) if antenna[6] == tpset[0]]
		if len(antenna_list) == 0:
			log.warning('No antenna for this country seem to be listed in wyscan database')
			return None
		antenna = antenna_list[0]
		self.scan(_(tpset[1]), antenna, [-1], 0, (self.parent.include_scrambled if self.parent else user_config['tv']['scan_with_scrambled']))
		return None



class DVBSScanItem(Item):

	player = None
	wyscanserver = None

	def __init__(self, server, name, antenna, transponder, scan_network, include_scrambled=True, high_lnb_power=False, type_='dvbsscan', menu=None):
		Item.__init__(self, name, type_=type_, menu=menu)
		if self.player is None:
			try:
				from pygui.menu.players import ChannelScanner
				self.player = ChannelScanner()
			except Exception, e:
				log.error('Unable to spawn ChannelScanner (%s)', e)
		self.antenna = antenna
		self.wyscanserver = server
		self.transponder = transponder
		self.scan_network = scan_network
		self.include_scrambled = include_scrambled
		self.high_lnb_power = high_lnb_power
		return None
