# -*- coding: utf-8 -*- 
#
# Description:
#
# ReInitBoxItem Item Class Definition
# DeleteContents Item Class Definition (Not Used)
#
#
# Changes:
#
# 2011-10-08
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.formatters import bytes_to_human
from peewee.notifier import Task
from pygui.item.containers import GenericContainer
from pygui.item.core import ActionItem
from pygui.item.mediaitem import RootItem



class ReInitBoxItem(ActionItem):

	def __init__(self, *args, **kw):
		ActionItem.__init__(self, action=self._check_action, **kw)
		self.depth = 1
		return None

	def _check_action(self):
		from pygui.window.core import Button
		from pygui.window import ConfirmWindow
		w = ConfirmWindow(text=_("You are about to reset the box. Are you sure you want to do it?\nIf 'Yes', box will reboot."), confirm_action=self.reinit_box, buttons=[Button(_('Yes'), False), Button(_('No'), True)])
		w.show()
		return None

	def reinit_box(self):
		import os
		from pygui.config import rw_dir
		from pygui.facilities.power import reboot
		f = open(os.path.join(rw_dir, 'reset-all'), 'w')
		f.flush()
		os.fsync(f.fileno())
		f.close()
		Task(reboot).start(delay=1)
		return None



# Handle the retrieval of each universes' size and their contents suppress
class DeleteContentsItem(GenericContainer):

	depth = 2

	def browse(self, preview=False):
		_root = RootItem()
		self._music = list(_root.browse(universe='audio', menu=self.menu))
		self._image_video = list(_root.browse(universe='video_image', menu=self.menu))
		self._tv = list(_root.browse(universe='tv', menu=self.menu))
		self.items = [UniverseDeleteItem(_('TV'), 'tv', [], menu=self.menu), UniverseDeleteItem(_('Audio'), 'audio', self._music, menu=self.menu), UniverseDeleteItem(_('Video/Photo'), 'image_video', self._image_video, menu=self.menu), UniverseDeleteItem(_('All'), 'all', self._music, menu=self.menu)]
		return self.items + [ConfirmDeleteItem(_('Confirm'), 'setupitem', self.confirm)]

	def confirm(self):
		from pygui.window import ConfirmWindow
		cw = ConfirmWindow(_('Delete %s ?' % '\n'.join(self._get_universes_to_delete())), confirm_action=self._delete)
		cw.buttons[1].connect(self._uncheck_all_items)
		cw.show()
		return None

	def _delete(self):
		univ_to_delete = self._get_universes_to_delete()
		for it in self.items:
			if it._universe in univ_to_delete:
				it.delete_content()
		self._uncheck_all_items()
		return None

	def _get_universes_to_delete(self):
		l = []
		for it in self.items:
			if it.to_delete:
				l.append(it._universe)
		return l

	def _uncheck_all_items(self):
		for it in self.items:
			it.to_delete = False
		return None



class UniverseDeleteItem(ActionItem):
	def __init__(self, universe_name, universe, related_items, *args, **kw):
		self._universe = universe
		self.universe_name = universe_name
		self.related_items = related_items
		self._to_delete = False
		self._total_size = 0
		l = []
		for i in related_items:
			if int(i['storageUsed']):
				l.append(int(i['storageUsed']))
			else:
				l.append(0)
		name = '%s %s' % (universe_name, bytes_to_human(sum(l)))
		ActionItem.__init__(self, name, type_='setupitem', display_type='not_checked', *args, **kw)
		self.action = self._action
		return None

	def _action(self):
		self.to_delete = not self.to_delete
		return None

	def _set_to_delete(self, value):
		self._to_delete = value
		if value:
			self.display_type = 'checked'
		else:
			self.display_type = 'not_checked'
		self.reset_view()
		return None

	to_delete = property((lambda self: self._to_delete), _set_to_delete)
	del _set_to_delete

	def delete_content(self):
		print 'DELETE',
		print self._universe
		return None



class ConfirmDeleteItem(ActionItem):
	def __init__(self, name, type_, action, *args, **kw):
		ActionItem.__init__(self, name, type_, action=action, *args, **kw)
		return None
