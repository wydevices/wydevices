# -*- coding: utf-8 -*- 
#
# Description:
#
# PSFreedom Items Class Definitions
#
#
#
# Changes:
#
# 2011-10-02
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from pygui.item.parameters import ParametersSetupItem
from pygui.item.core import ActionItem
from pygui.item.core import Item
from pygui.shared import pygui_globs
from pygui.window import ConfirmWindow
from pygui.window.core import Button
from peewee.messages import send as louie_send
from peewee.notifier import Task

import os


glob_usb_mode_orig = 0
glob_usb_mode_dict = {0: 'PC Transfert', 1: 'PSFreedom'}
glob_current_usb_mode = 0
glob_ps3_fw_dict = {0: '2.76', 1: '3.01', 2: '3.10', 3: '3.15', 4: '3.21', 5: '3.30', 6: '3.40', 7: '3.41', 8:'3.41_kiosk'}
glob_current_ps3_fw = 0


class PSFreedomCommonSetupItem(Item):
	def __init__(self, name, type_, menu = None, display_type = None, action = None, args = None, kwargs = None):
		Item.__init__(self, name, type_, menu=menu, display_type=display_type)
		self.action = action
		self.preview_list = []
		self.args = (args or tuple())
		self.kwargs = (kwargs or dict())

	def reset_view(self):
		for i in range(len(self.preview_list)):
			self.preview_list[i].reset_view()
		Item.reset_view(self)

	def execute(self):
		if (self.action is None):
			return 
		try:
			self.action(*self.args, **self.kwargs)
		except:
			pass

	def browse(self, preview=False):
		return self.preview_list

	def reload_center_list(self, rebuild = False):
		menu = self.menu
		if rebuild:
			center_selected = menu.selected_center
			menu._browse_main()
			menu.selected_center = center_selected
		louie_send('center_list', sender=menu, action='reset', value=menu['center_list'])


class PSFreedomConfigurationItem(ParametersSetupItem):
	depth = 3
	def __init__(self, *args, **kw):
		global glob_usb_mode_dict, glob_current_usb_mode, glob_ps3_fw_dict, glob_current_ps3_fw, glob_usb_mode_orig
		self._get_psfreedom_conf()
		glob_usb_mode_orig = glob_current_usb_mode
		ParametersSetupItem.__init__(self, *args, **kw)
		self.USBModeItem=PSFreedomCommonSetupItem(name=_('Mode: %s'%(glob_usb_mode_dict[glob_current_usb_mode])), type_='setupitem', menu=self.menu, display_type=None, action=self._set_usb_mode)
		self.PS3FwVersionItem=PSFreedomCommonSetupItem(name=_('PS3 firmware: v%s'%(glob_ps3_fw_dict[glob_current_ps3_fw])), type_='setupitem', menu=self.menu, display_type=None, action=self._set_ps3_fw_version)
		self.PSFreedomStatusItem=PSFreedomCommonSetupItem(name=_('Status: %s'%(self._get_psfreedom_status())), type_='setupitem', menu=self.menu, display_type=None, action=None)
		self.SaveSettingsItem=ActionItem(name=_('Save settings'), type_='setupitem', display_type=None, action=self._save_usb_mode)
		self.refresh_task = Task(self._refresh_status)

	def browse(self, preview=False):
		global glob_usb_mode_dict, glob_current_usb_mode, glob_ps3_fw_dict, glob_current_ps3_fw
		if self.menu.selected_main.__eq__(self):
			self.preview_list = [self.USBModeItem]
			if glob_current_usb_mode == 1:
				self.preview_list.append(self.PS3FwVersionItem)
				self.preview_list.append(self.PSFreedomStatusItem)
			self.preview_list.append(self.SaveSettingsItem)
			self.refresh_task.start(delay=5, loop=True, init_delay=0, consider_idle=True)
			return self.preview_list

	def _refresh_status(self):
		try:
			if self.menu.selected_main.__eq__(self):
				if glob_current_usb_mode == 1:
					self.PSFreedomStatusItem.name=_('Status: %s'%(self._get_psfreedom_status()))
					self.PSFreedomStatusItem.reset_view()
			else:
				self.refresh_task.stop()
		except:
			self.refresh_task.stop()

	def _get_psfreedom_status(self):
		Status = 'NONE'
		try:
			if os.path.exists('/proc/psfreedom/status'):
				status_file = os.popen('cat /proc/psfreedom/status')
				line = status_file.readline()
				status_file.close()
				Status = line.replace('\n', '')
		except:
			pass
		return Status

	def _find_key(self, dic, val):
		return [k for k, v in dic.iteritems() if v == val][0]

	def _get_psfreedom_conf(self):
		global glob_current_usb_mode, glob_ps3_fw_dict, glob_current_ps3_fw
		try:
			if not os.path.exists('/wymedia/usr/etc/usbcable.conf'):
				os.system('echo Mode MTP > /wymedia/usr/etc/usbcable.conf')
				os.system('echo %s >> /wymedia/usr/etc/usbcable.conf'%(glob_ps3_fw_dict[0]))
			conf_file = os.popen('cat /wymedia/usr/etc/usbcable.conf')
			lines = conf_file.readlines()
			conf_file.close()
			for line in lines:
				line = line.replace('\n', '')
				if line == '':
					continue
				elif 'Mode MTP' in line:
					glob_current_usb_mode = 0
				elif 'Mode PS3' in line:
					glob_current_usb_mode = 1
				else:
					glob_current_ps3_fw = self._find_key(glob_ps3_fw_dict, line)
					if glob_current_ps3_fw is None:
						glob_current_ps3_fw = 0
		except:
			pass

	def _set_usb_mode(self):
		global glob_usb_mode_dict, glob_current_usb_mode
		if glob_current_usb_mode == 0:
			glob_current_usb_mode = 1
		else:
			glob_current_usb_mode = 0
		self.USBModeItem.name = _('Mode: %s'%(glob_usb_mode_dict[glob_current_usb_mode]))
		self.USBModeItem.reset_view()
		self.USBModeItem.reload_center_list(True)

	def _set_ps3_fw_version(self):
		global glob_ps3_fw_dict, glob_current_ps3_fw
		glob_current_ps3_fw = glob_current_ps3_fw + 1
		if glob_current_ps3_fw >= 9:
			glob_current_ps3_fw = 0
		if os.path.exists('/proc/psfreedom/fw_version'):
			os.system('echo %s > /proc/psfreedom/fw_version'%(glob_ps3_fw_dict[glob_current_ps3_fw]))
		self.PS3FwVersionItem.name = _('PS3 firmware: v%s'%(glob_ps3_fw_dict[glob_current_ps3_fw]))
		self.PS3FwVersionItem.reset_view()
		self._refresh_status()

	def _save_usb_mode(self):
		global glob_current_usb_mode, glob_current_ps3_fw, glob_usb_mode_orig
		try:
			if glob_current_usb_mode == 0:
				os.system('echo Mode MTP > /wymedia/usr/etc/usbcable.conf')
				os.system('echo %s >> /wymedia/usr/etc/usbcable.conf'%(glob_ps3_fw_dict[glob_current_ps3_fw]))
				self._update_initng(0)
			else:
				os.system('echo Mode PS3 > /wymedia/usr/etc/usbcable.conf')
				os.system('echo %s >> /wymedia/usr/etc/usbcable.conf'%(glob_ps3_fw_dict[glob_current_ps3_fw]))
				self._update_initng(1)
			if glob_usb_mode_orig != glob_current_usb_mode:
				w = ConfirmWindow(text=_('Modifications will take effect after reboot.\nDo you want to reboot now ?'), confirm_action=self._reinit_box, buttons=[Button(_('Yes'), False), Button(_('No'), True)])
				w.show()
		except:
			pass

	def _update_initng(self, mode):
		try:
			psfreedom_found = 0
			initng_file = open('/etc/initng/runlevel/default.runlevel', 'rw+')
			lines = initng_file.readlines()
			initng_file.seek(0,0)
			new_lines = []
			for line in lines:
				if mode == 0:
					if 'daemon/wymtsd' in line:
						new_lines.append('daemon/wymtsd\n')
					elif 'system/psfreedom' in line:
						psfreedom_found = 1
						new_lines.append('#system/psfreedom\n')
					else:
						new_lines.append(line)
				else:
					if 'daemon/wymtsd' in line:
						new_lines.append('#daemon/wymtsd\n')
					elif 'system/psfreedom' in line:
						psfreedom_found = 1
						new_lines.append('system/psfreedom\n')
					else:
						new_lines.append(line)
			if psfreedom_found == 0:
				if mode == 0:
					new_lines.append('#system/psfreedom\n')
				else:
					new_lines.append('system/psfreedom\n')
			initng_file.writelines(new_lines)
			initng_file.close()
		except:
			pass

	def _reinit_box(self):
		os.system('/sbin/reboot')
