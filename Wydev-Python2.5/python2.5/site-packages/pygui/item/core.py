# -*- coding: utf-8 -*- 
#
# Description:
#
# Items Core Class Definition
#
#
#
# Changes:
#
# 2011-10-02
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

__all__ = ['Item', 'ActionItem']

from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from peewee.messages import send as louie_send

log = GET_LOGGER(__name__)



# Base class for all Items
class Item(object):

	locked = False
	hidden = False

	def __init__(self, name, type_, menu=None, display_type=None, parent=None):
		self._name = name
		self.type = type_
		self.menu = menu
		self.display_type = display_type
		self.parent = parent
		self.list_owned = []
		return None

	def _get_name(self):
		return self._name

	def _set_name(self, name):
		self._name = name
		return None

	name = property(_get_name, _set_name)
	del _get_name
	del _set_name

	# execute is the default function called when item is selected.
	def execute(self):
		log.info('This is not an executable item (%s).' % self.__class__.__name__)
		return None

	def __repr__(self):
		return '<%s::%s(%s)>' % (self.__class__.__name__, self.type, repr(self.name))

	def __hash__(self):
		return hash(self.name)

	def __eq__(self, other):
		if isinstance(other, Item):
			return (self.name == other.name)
		return False

	def __cmp__(self, other):
		if isinstance(other, Item):
			return cmp(self.name, other.name)
		else:
			return cmp(type(self), type(other))

	sensitive = True

	def is_marked(self):
		log.debug('This item has no marking support.')
		return False

	def _get_universe(self):
		if self.menu.universe:
			return self.menu.universe
		return self.menu.type

	universe = property(_get_universe)
	del _get_universe

	def show_menu(self):
		from pygui.shared import pygui_globs
		pygui_globs['menustack'].back_to_menu(self.menu)
		return None

	# Send to the view the 'reset' signal for all lists this Item is located
	# (if a menu is available)
	def reset_view(self):
		menu = self.menu
		if menu:
			for name in self.list_owned:
				louie_send(name, sender=menu, action='reset', value=menu[name])
		return None



# ActionItem is an Item for which we precise an action to launch
# when item is executed
class ActionItem(Item):

	def __init__(self, name, type_, menu=None, display_type=None, action=None, args=None, kwargs=None):
		Item.__init__(self, name, type_, menu=menu, display_type=display_type)
		self.action = action
		if args:
			self.args = args
		else:
			self.args = tuple()
		if kwargs:
			self.kwargs = kwargs
		else:
			self.kwargs = dict()
		return None

	def execute(self):
		if self.action is None:
			log.info('nothing to do for this item')
			return None
		try:
			self.action(*self.args, **self.kwargs)
		except Exception, e:
			PRINT_EXCEPTION(e)
		return None

	# Equality between ActionItems is determined with name,
	# action and args/kwargs equality (i.e. two ActionItems are equal if
	# they have the same name *and* they do the same thing.
	def __eq__(self, other):
		if Item.__eq__(self, other):
			return (self.action, self.args, self.kwargs) == (other.action, other.args, other.kwargs)
		return Item.__eq__(self, other)
