# -*- coding: utf-8 -*- 
#
# Description:
#
# FailSafe Menu Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

__all__ = ['FailsafeMenu']

import os
from peewee.messages import send as louie_send
from peewee.debug import GET_LOGGER
from peewee.notifier import Task
from pygui.eventmanager.menus import FailsafeMenuEventHandler
from pygui.shared import pygui_globs
from pygui.menu.menu import Menu
from pygui.item.core import ActionItem
from pygui.facilities.codemapping import hdmiresolution_dict
import pygui.config as config

log = GET_LOGGER(__name__)


# Allow the user to try all the supported videomodes en find one that he can use.
class FailsafeMenu(Menu):

	def __init__(self, name='Failsafe menu', eventhandler=None, type='failsafe', universe=None):
		self.eventhandler = FailsafeMenuEventHandler(self)
		modes_list = [ActionItem(_('576i/50Hz'), type_='action', action=self.valid_mode, args=[(720, 576, 1, 50), 'rgb']), ActionItem(_('480i/60Hz'), type_='action', action=self.valid_mode, args=[(720, 480, 1, 59), 'rgb'])]
		for mode, caption in hdmiresolution_dict.items():
			modes_list.extend(ActionItem(caption, type_='action', action=self.valid_mode, args=[mode, 'yuv']))
		Menu.__init__(self, name, choices=modes_list, type=type, universe='audio')
		self['main_list'].cyclic = True
		pygui_globs['videomodes'].handle_events = False
		return None

	def select(self, item, list_name=None, force_select=False):
		ret = Menu.select(self, item, list_name)
		if ret is not False:
			self.switch_mode()
		return None

	def show(self, hide_previous_menu=True):
		Menu.show(self, hide_previous_menu)
		Task(self.switch_mode).start(0.5)
		return None

	def hide(self):
		pygui_globs['videomodes'].handle_events = True
		Menu.hide(self)
		return None

	def switch_mode(self):
		resolution = self.selected.args[0]
		component = self.selected.args[1]
		if component == 'rgb':
			os.system('/sbin/stfbset -d yuv -e rgb -e cvbs')
		elif component == 'yuv':
			os.system('/sbin/stfbset -e yuv -d rgb -e cvbs')
		w, h, interlaced, freq = resolution
		log.debug('Setting resolution to %s', resolution)
		display = pygui_globs['display']
		display.set_resolution((w, h), interlaced, freq)
		return None

	def valid_mode(self, mode, component):
		config.user_config['connections']['component_output'] = component
		config.user_config['connections']['resolution'] = mode
		if mode == (720, 576, 1, 50):
			config.user_config['connections']['composite_output'] = 'pal'
		elif mode == (720, 480, 1, 59):
			config.user_config['connections']['composite_output'] = 'ntsc'
		config.user_config.save()
		self.hide()
		return None

	def execute_selected(self):
		self.selected.execute()
		return None
