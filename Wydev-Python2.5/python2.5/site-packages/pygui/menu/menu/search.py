# -*- coding: utf-8 -*- 
#
# Description:
#
# Media Search Menu Class Definition
#
#
#
# Changes:
#
# 2011-10-04
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

__all__ = ['SearchMenu']

from peewee.debug import GET_LOGGER
from peewee.messages import send as louie_send
from peewee.notifier import Task
from pygui.eventmanager.menus import SearchMenuEventHandler
from pygui.item.mediaitem.core import wymedia_sorting
from pygui.item.mediaitem.progressive_result import WindowedItemList
from pygui.shared import pygui_globs
from pygui.menu.menu import Menu
from pygui.window import SearchKeyboardWindow
from pygui.item.core import Item
import pygui.config as config
from wymedia.wmplus import get_browse_position, search as wm_search

log = GET_LOGGER(__name__)



# Media search Menu
class SearchMenu(Menu):
	def __init__(self, name='Search menu', eventhandler=None, type='media_search', pattern=None, universe=None):
		self.eventhandler = SearchMenuEventHandler(self)
		Menu.__init__(self, name, type=type, universe=universe)
		self.kbd = SearchKeyboardWindow(_('Search'), text='', confirm_action=self.search, search_menu=self)
		self.pattern = pattern
		self.navigator = pygui_globs['menustack'].get_navigator()
		self.positions_dict = dict()
		self.pattern = None
		self._wil_result = None
		self._getitems_keywords['result_count'] = (lambda : self.get_result_count())
		self._getitems_keywords['title'] = (lambda : self.get_title())
		self.show()
		if not hasattr(self, 'move_navigator'):
			mn = Task(self._move_navigator)
			mn.delay = config.HMI_BASE['search_navigator_delay']
			self.move_navigator = mn.start
			self.move_navigator_task = mn
		if not self.pattern:
			self.ask_pattern()
		else:
			self.search()
		return None

	def search(self, kbd):
		self.kbd.hide()
		self.pattern = self.kbd.text
		self._wil_result = WindowedItemList(None, menu=self.navigator, universe=self.universe, browse_fn=wm_search, pattern=self.pattern)
		log.debug('Search(%s): %s', self.pattern, self._wil_result)
		if len(self._wil_result):
			self.set_items(self._wil_result, 'main_list')
			self.select(0, force_select=True)
			louie_send('result_count', sender=self, value=self.get_result_count())
			louie_send('title', sender=self, value=self.get_title())
		else:
			no_result_item = Item(name=_("No results for '%s'") % self.pattern, type_='info')
			self.set_items([no_result_item], 'main_list')
			louie_send('result_count', sender=self, value=self.get_result_count())
			louie_send('title', sender=self, value=self.get_title())
		return None

	def get_title(self):
		if self.pattern:
			return _('Search for "%s"' % self.pattern)
		return _('Search')

	def get_result_count(self):
		if self.selected_pos >= 0:
			res_count = '%s/%s' % (self.selected_pos + 1, len(self['main_list']))
			if self._wil_result and not self._wil_result.end_reached:
				res_count += ' ...'
		else:
			res_count = '0/0'
		return res_count

	# Move the navigator in background to the selected item
	def _move_navigator(self):
		sel = self.selected
		pos = get_browse_position(sel.wymedia_resource, wymedia_sorting, dict(universe=self.universe))
		sel.menu = self.navigator
		self.navigator.go_to_item(sel, 'event_right', pos)
		return None

	def select(self, item, list_name=None, force_select=False):
		ret = Menu.select(self, item, list_name)
		if (ret is not False and self.navigator) or force_select:
			louie_send('result_count', sender=self, value=self.get_result_count())
			self.move_navigator()
		return None

	def show(self):
		return Menu.show(self, False)

	def hide(self):
		pygui_globs['menustack'].back_to_menu(self.navigator)
		return None

	def ask_pattern(self):
		self.kbd.show()
		return None

	def execute_selected(self):
		self.move_navigator_task.stop()
		self.selected.execute()
		return None
