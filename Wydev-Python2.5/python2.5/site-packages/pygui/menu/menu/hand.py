# -*- coding: utf-8 -*- 
#
# Description:
#
# Hand Menu Class Definition
#
#
#
# Changes:
#
# 2011-10-18
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

__all__ = ['ActionMenu']

from peewee.notifier import Task
from pygui.menu.menu.core import ContextMenu



# Defines 'Action' (aka 'hand') menus, to access everything
class ActionMenu(ContextMenu):

	name = _('Hand')

	# Create the ActionMenu, then get the ActionGroup associated
	# Parameters :
	#  * context : dictionary containing
	#    'menu' : Menu from where hand menu is launched
	#    'selected' Item from where hand menu is launched
	#    'parent' : Menu parent of 'menu'
	#  * type_ (optional) : type of the hand menu (see Menu.type)
	#  * category (optional) : category of the hand menu. It can change HandMenu behavior
	def __init__(self, context, type_='action', category='navigator', **kw):
		from pygui.eventmanager.menus import ActionMenuEventHandler
		self.eventhandler = ActionMenuEventHandler(self)
		ContextMenu.__init__(self, 'Hand menu', [], type=type_, **kw)
		self.context = context
		if 'hand_menu' not in self.context:
			self.context['hand_menu'] = self
		from pygui.actions import get_actiongroups_by_category
		self.actiongroup_list = get_actiongroups_by_category(self.context, category)
		self._getitems_keywords.update(dict(focus_list=(lambda : self.get_item_list('focus_list')), main_list=(lambda : self.get_item_list('main_list')), options_list=(lambda : self.get_item_list('options_list'))))
		if len(self.actiongroup_list) == 1 and self.actiongroup_list[0].unique:
			self.available_choices = ['main_list', 'options_list']
			self.set_items(self.actiongroup_list[0].browse(self.context))
			del self._getitems_keywords['focus_list']
			self.select(0)
		else:
			self.available_choices = ['focus_list', 'main_list', 'options_list']
			default_items = [g for g in self.actiongroup_list if g.default]
			marker_items = [g for g in self.actiongroup_list if 'marker' in g.name.lower()]
			selected_item = self.actiongroup_list[0]
			for it in self.actiongroup_list:
				if it.sensitive:
					selected_item = it
					if it in default_items:
						break
			self.set_items(self.actiongroup_list, list_name='focus_list', position=-1)
			self.select(selected_item, 'focus_list')
		self._active_list = self.available_choices[0]
		self.set_items([], list_name='options_list')
		if len(self.available_choices) == 2:
			self._set_options_list()
		Task(self.choices.advertise).start(0)
		return None

	# Set Items contained in 'focus_list' Item selected
	def _set_action_list(self):
		selection = self.get_item_list('focus_list').selected
		self.set_items(selection.browse(self.context) if selection.is_available(self.context) else [], list_name='main_list', position=-1)
		return None

	# Call ContextMenu.select
	# If something is selected and active_list is 'focus_list' then actions are set
	# If something is selected and active_list is 'main_list' then options are set
	def select(self, item, list_name=None):
		if not list_name:
			list_name = self._active_list
		ret = ContextMenu.select(self, item, list_name)
		if ret and list_name == 'focus_list':
			self._set_action_list()
		return ret

	def focus_previous(self):
		old_al = self._active_list
		if ContextMenu.focus_previous(self):
			self.get_item_list(old_al).select()
			if self._active_list == 'focus_list':
				self.set_items([], list_name='options_list')
		return None
