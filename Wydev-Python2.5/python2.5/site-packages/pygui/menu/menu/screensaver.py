# -*- coding: utf-8 -*- 
#
# Description:
#
# ScreenSaver Menus Class Definitions
#
#
#
# Changes:
#
# 2011-10-20
# Initial Commit
#
# 2011-10-21
# Add possibility to display current time in TextScreenSaver Menu
# Options are available in Parameters Menu
#
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

__all__ = ['ScreenSaverMenu', 'ImageScreenSaverMenu']


import os
from time import localtime, time
from pygui.menu.menu import Menu
from pygui.eventmanager.menus.screensaver import ScreenSaverMenuEventHandler
from pygui.shared import pygui_globs
from peewee.formatters import seconds_to_hhmmss_utc, seconds_to_mmss_utc
from peewee.messages import send as louie_send
from peewee.notifier import set_idle_callback
from peewee.notifier import Task
from pygui.config import user_config



# Generic Screen Saver Menu
class ScreenSaverMenu(Menu):

	show_help_banner = False

	def __init__(self, name='ScreenSaver', type='screensaver'):
		self.eventhandler = ScreenSaverMenuEventHandler(self)
		Menu.__init__(self, name, type=type, universe=None)
		self._getitems_keywords = dict()
		set_idle_callback(self.idle, self.busy, user_config['power']['screensaver_threshold'])
		return None

	def idle(self):
		pygui_globs['menustack'].on_idle = True
		self.show(True)
		return None

	def busy(self):
		try:
			pygui_globs['menustack'].get_navigator().force_preview = True
		except:
			pass
		self.hide()
		pygui_globs['menustack'].on_idle = False
		return None

	def clear(self):
		return None



# ScreenSaver to display an animated text (aka killer feature)
class TextScreenSaverMenu(ScreenSaverMenu):

	def __init__(self):
		ScreenSaverMenu.__init__(self, type='text_screensaver')
		if user_config['power']['screensaver_text_type'] == 'time':
			self.text = '%d:%02d:%02d' % tuple(localtime(time())[3:6])
			self.refresh_task = Task(self._refresh_text)
		else:
			self.text = user_config['power']['screensaver_text']
			if len(self.text) > 100:
				self.text = self.text[:100]
		self._getitems_keywords['text'] = self._get_screensaver_text
		return None

	def _get_screensaver_text(self):
		if user_config['power']['screensaver_text_type'] == 'time':
			self.text = '%d:%02d:%02d' % tuple(localtime(time())[3:6])
		return self.text

	def _refresh_text(self):
		louie_send('text', sender=self, value=self._get_screensaver_text())

	def idle(self):
		ScreenSaverMenu.idle(self)
		if user_config['power']['screensaver_text_type'] == 'time':
			self.refresh_task.start(delay=1, loop=True, init_delay=0, consider_idle=True)
		return None

	def busy(self):
		if user_config['power']['screensaver_text_type'] == 'time':
			self.refresh_task.stop()
		ScreenSaverMenu.busy(self)
		return None

	def refresh_metadata(self, title, artist, album):
		return None


# ScreenSaver to display an animated image
class ImageScreenSaverMenu(ScreenSaverMenu):

	def __init__(self):
		ScreenSaverMenu.__init__(self, type='image_screensaver')
		self.image = 'icon_video.png'
		self.stack = pygui_globs['menustack']
		self._getitems_keywords['screensaver_image'] = self._get_screensaver_image
		self._getitems_keywords['title'] = self._get_title
		self._getitems_keywords['artist'] = self._get_artist
		self._getitems_keywords['album'] = self._get_album
		self._getitems_keywords['duration'] = self._get_audio_duration
		return None

	def _get_screensaver_image(self):
		return self.image

	def _get_title(self):
		player = self.stack.get_player('audioplayer')
		if player:
			if player['title']:
				return player['title']
			else:
				return player.selected.name
		return u''

	def _get_artist(self):
		if self.stack.get_player('audioplayer') is not None:
			return self.stack.get_player('audioplayer').get_item_list('main_list').selected['author']
		else:
			return ''

	def _get_album(self):
		if self.stack.get_player('audioplayer') is not None:
			return self.stack.get_player('audioplayer').get_item_list('main_list').selected['album']
		else:
			return ''

	def _get_audio_duration(self):
		duration = None
		if self.stack.get_player('audioplayer') is not None:
			duration = self.stack.get_player('audioplayer').get_item_list('main_list').selected['duration']
		if duration:
			seconds = int(duration)
			if seconds >= 3600:
				return seconds_to_hhmmss_utc(seconds)
			else:
				return seconds_to_mmss_utc(seconds)
		else:
			return ''

	def idle(self):
		nav = self.stack.get_navigator()
		if self.stack.get_player('audioplayer') is not None:
			self.type = 'image_screensaver_player'
		else:
			self.type = 'image_screensaver'
		ScreenSaverMenu.idle(self)
		self.refresh_metadata(*[''] * 3)
		return None

	def refresh_metadata(self, title, artist, album):
		louie_send('title', sender=self, value=title)
		louie_send('artist', sender=self, value=artist)
		louie_send('album', sender=self, value=album)
		louie_send('duration', sender=self, value=self['duration'])
		return None



screensaver_dict = {'text': TextScreenSaverMenu, 'image': ImageScreenSaverMenu}
