# -*- coding: utf-8 -*- 
#
# Description:
#
# FirstBoot Menu Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

__all__ = ['FirstBootMenu']

import pygui.config as config
from pygui.menu.menu.core import Menu
from pygui.eventmanager.menus import FirstBootMenuEventHandler
from pygui.item.core import Item, ActionItem
from pygui.item.containers import GenericContainer
from pygui.item.parameters.generalsetup.i18n import CountryUserConfigSetupItem, OSDLanguageUserConfigSetupItem, FirstBootLanguageUserConfigSetupItem
from pygui.item.parameters.generalsetup.datesetup import DateUserConfigSetupItem, TimeZoneUserConfigSetupItem
from pygui.item.parameters.generalsetup.securitysetup import SecretCodeUserConfigSetupItem, ParentalControlConfigSetupItem, ParentalRatingConfigSetupItem, QuestionAnswerParameters
from pygui.item.parameters.videophoto.video import AspectRatioParametersSetupItem
from pygui.shared import pygui_globs
from pygui.facilities import codemapping
from pygui.facilities.l10n import get_date_format, get_time_format
from peewee.dateutils import TimeManager
if 'tv' in config.plugins:
	from pygui.item.parameters.tv.tvsetup import FirstbootTNTScanSetupItem
from peewee.messages import send as louie_send
from peewee.messages import connect as louie_connect
from peewee.messages import disconnect as louie_disconnect
from peewee.notifier import Task


class ProductTourDummyItem(GenericContainer):

	def browse(self):
		return [ActionItem(name='', type_='setupitem', action=self.menu._set_options_list, args=(None,))]


class FirstBootMenu(Menu):

	def __init__(self, **kw):
		self.main_items = self._gen_items()
		self.eventhandler = FirstBootMenuEventHandler(self)
		self._current_rank, it = self.main_items.next()
		self._history_rank = 0
		Menu.__init__(self, name='First Boot', choices=it, type='firstboot', **kw)
		self.available_choices = ['options_text', 'options0_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list', 'date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'aspect_ratio_list']
		for c in self.available_choices:
			self._getitems_keywords[c] = (lambda list_name=c : self.get_item_list(list_name))
		louie_connect(receiver=self._scan_callback, signal='tv_scan_finished', sender='tv')
		self._getitems_keywords['back_list'] = (lambda : self.get_item_list('back_list'))
		self._getitems_keywords['next_list'] = (lambda : self.get_item_list('next_list'))
		self._getitems_keywords['volume+'] = (lambda : _('volume +'))
		self._getitems_keywords['volume-'] = (lambda : _('volume -'))
		self._getitems_keywords['power'] = (lambda : _('power'))
		self._getitems_keywords['option'] = (lambda : _('option'))
		self._getitems_keywords['play_pause'] = (lambda : _('play / pause'))
		self._getitems_keywords['record'] = (lambda : _('record'))
		self._getitems_keywords['mute'] = (lambda : _('mute'))
		self._getitems_keywords['home'] = (lambda : _('home'))
		self._getitems_keywords['selection'] = (lambda : _('selection'))
		self._getitems_keywords['stop'] = (lambda : _('stop'))
		self._getitems_keywords['list'] = (lambda : _('list'))
		self._getitems_keywords['info'] = (lambda : _('info'))
		self._getitems_keywords['secret_code_explain'] = (lambda : _('Enter your secret code for parental mode activation'))
		self._changed_date = False
		self._stack_history = [None] * 11
		self._stack_history[self._history_rank] = it
		self.set_items([], 'back_list')
		self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
		self._set_options()
		return None

	# Main items generator (for lazy i18n)
	def _gen_items(self):
		yield (0, [FirstBootLanguageUserConfigSetupItem(name='Select your language', menu=self, domain='base', key='language', choices_list=config.HMI_BASE['osd_languages'])])
		self.set_items([Item(name=_('Back'), type_='setupitem', display_type='backitem')], 'back_list')
		self.set_items([Item(name=_('Next'), type_='setupitem', display_type='nextitem')], 'next_list')
		yield (1, [ProductTourDummyItem(name=_('Welcome !'), type_='setupitem', menu=self)])
		louie_send('on_presentation_blur', sender=self)
		yield (2, [CountryUserConfigSetupItem(name='Select your country', menu=self, domain='base', key='country', choices_list=config.HMI_BASE['country'])])
		yield (3, [TimeZoneUserConfigSetupItem(name='Select your time zone', choices_list=TimeManager().get_timezones(), domain='base', key='timezone', type_='setup', menu=self)])
		yield (4, [DateUserConfigSetupItem(name='Enter date and time', menu=self, domain='', key='')])
		yield (5, [AspectRatioParametersSetupItem(name='Select TV physical aspect ratio', menu=self, domain='video', key='aspect_ratio', choices_list=config.HMI_VIDEO['aspect_ratio'])])
		louie_send('on_aspect_ratio_blur', sender=self)
		yield (6, [ParentalControlConfigSetupItem(reload_center=False, name='Parental control', menu=self, domain='security', key='parental_control', choices_list=(True, False), type_='setupitem')])
		yield (7, [ParentalRatingConfigSetupItem(name='Parental rating', menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)])
		yield (8, [SecretCodeUserConfigSetupItem(name='Select a secret code', menu=self, domain='security', key='secretcode')])
		self._on_question = False
		yield (9, [QuestionAnswerParameters(name='', type_='setupitem', check=False, end_action=self.select, end_action_args=(1, 'main_list'))])
		if 'tv' in config.plugins:
			yield (10, [FirstbootTNTScanSetupItem(name=_('Do you want to launch a scan now?'), menu=self, type_='setupitem')])

	# Disable firstboot option
	def disable(self):
		config.user_config['base']['firstboot'] = False
		config.user_config.save()
		return None

	# Return True if event up and down moves have to be inversed
	# eg. for Date and SecretCode, <up> increases value and <down> decreases (default handling is inversed)
	def is_reversed(self):
		if self._active_list in ('date0_list', 'date1_list', 'date2_list', 'date3_list', 'date4_list', 'options1_list', 'options2_list', 'options3_list', 'options4_list'):
			return True
		return False

	def _set_options(self):
		ac = self.available_choices
		for c in ac:
			self.set_items([], c, 0)
		self.active_list = ac[1]
		item_list = self.get_item_list('main_list')
		if isinstance(item_list.selected, QuestionAnswerParameters):
			if not self._on_question:
				louie_send('secret_code_explain_off', sender=self)
				louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
				self.set_items([], list_name=ac[1])
				item_list.selected.execute()
				self.active_list = 'main_list'
				self._on_question = True
			else:
				self._on_question = False
				self._history_rank += 1
				self.select(1, 'main_list', ignore_gen=True)
			return None
		browsed = item_list.selected.browse()
		rank = item_list.selected_pos
		if isinstance(item_list.selected, DateUserConfigSetupItem):
			from pygui.facilities.codemapping import month_dict
			import time
			cur = time.localtime()[:-4]
			d = ('%02d' % cur[2], month_dict[cur[1]], cur[0], '%02d' % cur[3], '%02d' % cur[4])
			date_choices = [list for list in ac if list.startswith('date')]
			for list_name, browseable, val in zip(date_choices, browsed, d):
				self.set_items(browseable.browse(), list_name)
				self.get_item_list(list_name).cyclic = True
				for it in self.list_name:
					if it.name == str(val):
						self.select(it, list_name)
			self.active_list = date_choices[0]
			self._changed_date = True
		elif isinstance(item_list.selected, SecretCodeUserConfigSetupItem):
			for list_name, browseable in zip(ac[2:], browsed):
				self.set_items(browseable.browse(), list_name)
				self.get_item_list(list_name).cyclic = True
			self.active_list = 'options1_list'
			louie_send('secret_code_explain_on', sender=self)
			louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
		elif isinstance(item_list.selected, TimeZoneUserConfigSetupItem):
			from pygui.facilities.codemapping import country_dict
			pre_sel_timezone = country_dict[config.user_config['base']['country']]['raw_timezone']
			self.set_items(browsed, list_name=ac[1])
			for it in self[ac[1]]:
				if it.name == pre_sel_timezone:
					self.select(it, ac[1])
			config.user_config['base']['dateformat'] = int(country_dict[config.user_config['base']['country']]['date_format'])
			config.user_config['base']['timeformat'] = int(country_dict[config.user_config['base']['country']]['time_format'])
			from pygui.gui.widget.clock import Clock
			Clock.date_format = get_date_format()
			Clock.time_format = get_time_format()
		elif isinstance(browsed[0], GenericContainer):
			for list_name, browseable in zip(ac, browsed):
				self.set_items(browseable.browse(), list_name)
				self.get_item_list(list_name).cyclic = True
		elif isinstance(item_list.selected, AspectRatioParametersSetupItem):
			self.set_items(browsed, 'aspect_ratio_list')
			self.active_list = 'aspect_ratio_list'
			self.get_item_list('aspect_ratio_list').cyclic = None
			louie_send('on_aspect_ratio_focus', sender=self)
		else:
			self.set_items(browsed, list_name=ac[1])
			if not isinstance(item_list.selected, (CountryUserConfigSetupItem, OSDLanguageUserConfigSetupItem)):
				self.get_item_list(ac[1]).cyclic = True
			if isinstance(item_list.selected, ProductTourDummyItem):
				self.get_item_list(ac[1]).selected = None
				louie_send('on_presentation_focus', sender=self)
				for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
					louie_send(sig, sender=self, value=self[sig])
			elif isinstance(item_list.selected, CountryUserConfigSetupItem):
				louie_send('on_presentation_blur', sender=self)
		return None

	def _set_options_list(self, selection, keep_selection=False):
		if self._current_rank > self._history_rank:
			ignore = True
			if isinstance(self._stack_history[self._history_rank][0], ParentalControlConfigSetupItem) and not config.user_config['security']['parental_control']:
				try:
					if self._stack_history[self._history_rank + 4] is not None:
						self._history_rank += 4
					else:
						for idx in xrange(self._history_rank + 1, self._history_rank + 4):
							if self._stack_history[idx] is None:
								self._current_rank, self._stack_history[idx] = self.main_items.next()
						self._history_rank += 3
						ignore = False
				except IndexError:
					for idx in xrange(self._history_rank + 1, self._history_rank + 4):
						if self._stack_history[idx] is None:
							self._current_rank, self._stack_history[idx] = self.main_items.next()
					self._history_rank += 3
					ignore = False
				config.user_config['security']['maturity_rating'] = None
				config.user_config['security']['secretcode'] = None
				config.user_config['security']['question'] = None
				config.user_config['security']['response'] = None
				config.user_config.save()
			else:
				self._history_rank += 1
		else:
			ignore = False
		self.select(1, 'main_list', ignore)
		return None

	# Before doing traditional select, generate next current main item
	def select(self, item, list_name=None, ignore_gen=False):
		if list_name == 'main_list':
			if not ignore_gen and self._current_rank == self._history_rank:
				try:
					self._current_rank, it = self.main_items.next()
				except StopIteration:
					self.disable()
					pygui_globs['menustack'].back_to_home()
				else:
					if isinstance(it[0], ParentalRatingConfigSetupItem) and not config.user_config['security']['parental_control']:
						config.user_config['security']['parental_control'] = True
						self._stack_history[self._current_rank] = [ParentalRatingConfigSetupItem(name=_('Parental rating'), menu=self, domain='security', key='maturity_rating', choices=(0, 10, 12, 16, 18), type_='setupitem', reload_center=False)]
						for i in xrange(2):
							try:
								self._current_rank, it = self.main_items.next()
							except StopIteration:
								config.user_config['security']['parental_control'] = False
								self.disable()
								pygui_globs['menustack'].back_to_home()
							self._stack_history[self._current_rank] = it
						try:
							self._current_rank, it = self.main_items.next()
						except StopIteration:
							config.user_config['security']['parental_control'] = False
							self.disable()
							pygui_globs['menustack'].back_to_home()
						config.user_config['security']['parental_control'] = False
					self._history_rank = self._current_rank
					self._stack_history[self._history_rank] = it
					self.set_items(it)
					self._set_options()
			else:
				self.set_items(self._stack_history[self._history_rank])
				self._set_options()
		modified = Menu.select(self, item, list_name)
		return None

	def focus_previous(self):
		if not self.active_list == 'options0_list':
			Menu.focus_previous(self)
		return None

	def back_previous(self):
		if self._history_rank > 0:
			self._history_rank -= 1
		else:
			return False
		if isinstance(self._stack_history[self._history_rank][0], QuestionAnswerParameters):
			if not config.user_config['security']['parental_control']:
				self._history_rank -= 3
			self._on_question = False
		elif isinstance(self._stack_history[self._history_rank][0], SecretCodeUserConfigSetupItem):
			self._on_question = False
			louie_send('secret_code_explain_on', sender=self)
			louie_send('secret_code_explain', sender=self, value=self['secret_code_explain'])
		elif isinstance(self._stack_history[self._history_rank][0], ParentalRatingConfigSetupItem):
			louie_send('secret_code_explain_off', sender=self)
		elif self._history_rank == 0:
			louie_send('on_presentation_blur', sender=self)
			for sig in ('volume+', 'volume-', 'power', 'option', 'play_pause', 'record', 'mute', 'home', 'selection', 'stop', 'list', 'info'):
				louie_send(sig, sender=self, value=self[sig])
			self.main_items = self._gen_items()
			self._current_rank = 0
			self.set_items([], 'back_list')
		self.select(1, 'main_list')
		return None

	# Force to pass to next item if TV scan is finished/canceled
	def _scan_callback(self, *args, **kw):
		if 'tv' in config.plugins and isinstance(self.get_item_list('main_list').selected, FirstbootTNTScanSetupItem):
			self._set_options_list(None)
			Task(louie_disconnect, receiver=self._scan_callback, signal='tv_scan_finished', sender='tv').start(0.01)
		return None

	def on_first_parental_control(self):
		return None
