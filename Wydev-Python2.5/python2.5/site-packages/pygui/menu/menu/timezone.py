# -*- coding: utf-8 -*- 
#
# Description:
#
# TimeZone Menu Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from pygui.menu.menu.core import Menu
from peewee.dateutils import TimeManager
from peewee.debug import PRINT_EXCEPTION, DEBUG
from peewee.notifier import Task
from pygui.item.core import Item
from pygui.shared import pygui_globs
from pygui.eventmanager.menus import DateSetupMenuEventHandler
from pygui.eventmanager.menus import TimeZoneMenuEventHandler
from pygui.item.parameters.generalsetup.datesetup import DateUserConfigSetupItem
from pygui.facilities.codemapping import month_dict
import time


class DateSetupMenu(Menu):

	def __init__(self, **kw):
		main_items = [DateUserConfigSetupItem(name='Date and Time', menu=self, domain='', key='')]
		self.eventhandler = DateSetupMenuEventHandler(self)
		Menu.__init__(self, name='Time Control', choices=main_items, type='datesetup', **kw)
		self.available_choices = ['day_list', 'month_list', 'year_list', 'hour_list', 'minute_list']
		for c in self.available_choices:
			self._getitems_keywords[c] = (lambda list_name=c : self.get_item_list(list_name))
		self._set_options()
		Task(self.focus_previous).start(0.29999999999999999)
		return None

	# Return True if event up and down moves have to be inversed
	# eg. for Date and SecretCode, <up> increases value and <down> decreases (default handling is inversed)
	def is_reversed(self):
		return self._active_list in ('day_list', 'month_list', 'year_list', 'minute_list', 'hour_list')

	def _set_options(self):
		ac = self.available_choices
		for c in ac:
			self.set_items([], c, 0)
		self.active_list = ac[1]
		item_list = self.get_item_list('main_list')
		browsed = item_list.selected.browse()
		rank = item_list.selected_pos
		cur = time.localtime()[:-4]
		d = ('%02d' % cur[2], month_dict[cur[1]], cur[0], '%02d' % cur[3], '%02d' % cur[4])
		for list_name, browseable, val in zip(ac, browsed, d):
			self.set_items(browseable.browse(), list_name)
			self.get_item_list(list_name).cyclic = True
			for it in self[list_name]:
				if it.name == str(val):
					self.select(it, list_name)
		return None

	def execute(self):
		try:
			time_ = [0, 0, 0, 0, 0, 0, 0, 0, -1]
			for i, it in enumerate(['year_list', 'month_list', 'day_list', 'hour_list', 'minute_list']):
				val = self.get_item_list(it).selected.name
				if it == 'month_list':
					for k, v in month_dict.items():
						if v == val:
							val = k
				time_[i] = int(val)
			TimeManager().set_time(time.mktime(time_))
		except Exception, e:
			PRINT_EXCEPTION(e)
		pygui_globs['menustack'].back_one_menu()
		return None


class TimeZoneSetupMenu(Menu):

	def __init__(self, **kw):
		self.eventhandler = TimeZoneMenuEventHandler(self)
		Menu.__init__(self, choices=TimeZoneUserConfigSetupItem(name='TimeZone', choices_list=TimeManager().get_timezones(), domain='base', key='timezone', type_='setup', menu=self).browse(), type='timezone', **kw)
		for it in self['main_list']:
			if it.display_type == 'checked':
				self.selected = it
				break
		self['main_list'].cyclic = True
		return None

	def execute(self):
		self.selected.execute()
		pygui_globs['menustack'].back_one_menu()
		return None



from pygui.item.parameters.generalsetup.datesetup import TimeZoneUserConfigSetupItem
