# -*- coding: utf-8 -*- 
#
# Description:
#
# Image Viewer Player Class Definiton
#
#
#
# Changes:
#
# 2012-04-01
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

__all__ = ['ImageViewer']

from time import sleep
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from peewee.messages import send as louie_send
from peewee.notifier import Task
from pygui.config import user_config, HMI_PHOTO
from pygui.eventmanager.players import ImageEventHandler
from pygui.shared import pygui_globs
from pygui.menu import selective_gui_updater
from pygui.menu.players.core import Player, TimerActivator
from pygui.facilities.codemapping import SYMETRIC_DIRECTION

log = GET_LOGGER(__name__)

pos = [1, 2]
name_activator = TimerActivator(signals=('on_show_name', 'on_hide_name'), delay=user_config['photo'].get('name_banner_period', 3))


# Image player.
class ImageViewer(Player):

	def __init__(self):
		Player.__init__(self, 'imageviewer')
		self.eventhandler = ImageEventHandler(self)
		self._getitems_keywords.update(item_name=self._get_item_name, picture_1=(lambda : None), picture_2=(lambda : None))
		self.tasks.update({'display_timer': Task(self.play_next), 'select_next': Task(self.select, 1), 'transition': Task(self._transition)})
		self.tasks['transition'].delay = 0
		self.speed = 1
		self._paused = True
		self.direction = 1
		return None

	def _get_item_name(self):
		if self.selected and user_config['photo']['filename']:
			return self.selected.name
		return u''

	def _get_status(self):
		if self.paused:
			return 'pause'
		return 'play'

	def _start_timers(self):
		return None

	def _select_next(self):
		self.tasks['select_next'].start(user_config['photo']['period'])
		return None

	def _get_paused(self):
		return self._paused

	def _set_paused(self, val):
		self._paused = val
		if val:
			self.tasks['select_next'].stop()
		else:
			self._select_next()
		louie_send('status_icon', sender=self, value=self._get_status_icon())
		return None

	# Bool indicating if player is paused or not
	paused = property(_get_paused, _set_paused)
	del _get_paused
	del _set_paused

	@selective_gui_updater('item_name')
	@name_activator
	def play(self, item=None, playlist=None):
		Player.play(self, item, playlist)
		if len(self.choices) > 1:
			self._paused = False
		self.tasks['display_timer'].start(0.5)
		return None

	def rotate(self, angle):
		rot = 0
		try:
			unref_link = 'refid' in self.selected.wymedia_resource
			rot = int(self.selected.wymedia_resource.get('rotation', '0'))
			self.selected.vfs_set_metas(_unref_link=unref_link, rotation=str(rot + angle))
		finally:
			louie_send('picture_%d' % pos[1], sender=self, rotate=angle)
		return None

	# Attempt to display a picture.
	#
	# Note that the process is asynchronous -- L{_transition} is called once
	# the picture is properly loaded.
	#
	# TODO Handle failure cases via callbacks (once wyvas supports that).
	def _display_picture(self):
		try:
			louie_send('picture_%d' % pos[0], sender=self, value=self.selected['uri'], callback=self.tasks['transition'].start)
		except IOError, e:
			from pygui.window import MessageWindow
			MessageWindow(_('Invalid picture'), button=None).show(timeout=5)
		except:
			PRINT_EXCEPTION()
			log.error('Unable to display this image')
		return None

	# Retrieve the rotation information for the current picture, and apply it.
	def _apply_rotation(self):
		self.selected.media_update('rotation')
		rot = int(self.selected['rotation'] if self.selected['rotation'] else 0)
		log.info('rotation=%i', rot)
		louie_send('picture_%i' % pos[0], sender=self, rotate=rot)
		return None

	# Launch the transition between current and next picture.
	def _transition(self):
		global pos
		anim = user_config['photo']['transition']
		if self.direction > 0:
			direction = SYMETRIC_DIRECTION['down'][anim]
		else:
			direction = SYMETRIC_DIRECTION['up'][anim]
		log.debug('picture=%s uri=%s anim=%s', self.selected, self.selected['uri'], anim)
		self._apply_rotation()
		louie_send('%s_A_%d' % (direction, pos[0]), sender=self)
		louie_send('%s_B_%d' % (direction, pos[1]), sender=self)
		pos.reverse()
		return None

	def toggle_pause(self):
		self.paused = not self.paused
		return None

	def stop(self, *args, **kw):
		global pos
		for i in pos:
			louie_send('picture_%d' % i, sender=self, value=None)
		pos = [1, 2]
		Player.stop(self, *args, **kw)
		return None

	def play_next(self):
		self._display_picture()
		if not self._paused:
			self._select_next()
		return None

	@selective_gui_updater('item_name')
	@name_activator
	def select(self, val, list_name='main_list'):
		old_selection = self.selected
		if Player.select(self, val, list_name=list_name):
			if self.selected.player != self:
				new_selection = self.selected
				Player.select(self, old_selection, list_name=list_name)
				self.stop()
				new_selection.player.play(new_selection, self.choices)
			else:
				self.direction = val
				self.tasks['display_timer'].start(HMI_PHOTO['lazy_selection'])
		else:
			pygui_globs['menustack'].close_player()
		return None
