# -*- coding: utf-8 -*- 
#
# Description:
#
# Net Player Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import textwrap
from peewee.messages import send
from peewee.notifier import Task
from pygui.eventmanager.players.net_player import NetPlayerEventHandler
from pygui.item.core import Item
from pygui.menu import selective_gui_updater
from pygui.menu.players.core import Player


# Basic player for Internet services. It's a text+thumbnail visualizer for RSS feeds.
# Extra options are included in its hand menu that will enable the
# user to trigger the playback of an item as sound/video/photo.
class NetPlayer(Player):

	AUTOSCROLL_DELAY = 3
	FRAGMENT_LENGTH = 50
	BLOCKER_POS = 15

	def __init__(self):
		Player.__init__(self, 'netplayer')
		self.eventhandler = NetPlayerEventHandler(self)
		self._getitems_keywords.update(title=(lambda : (self.selected.title if self.selected else u'')), author=(lambda : (self.selected.author if self.selected else u'')), date=self._get_date, link=(lambda : (self.selected.link if self.selected else u'')), preview=self._get_preview, embedded_media=self._get_embedded_media, item_numbering=(lambda : '%s/%s' % (self.selected_pos + 1, len(self.choices))), words_list=(lambda : self.get_item_list('words_list')))
		self.set_items([], 'words_list')
		return None

	def play(self, item=None, playlist=None, hide_previous_menu=True):
		Player.play(self, item, playlist, hide_previous_menu)
		self._update_words_list()
		return None

	def select(self, val, list_name='main_list'):
		Player.select(self, val, list_name=list_name)
		if list_name == 'main_list':
			self._update_words_list()
			for key in ['title', 'author', 'date', 'link', 'preview', 'embedded_media', 'item_numbering']:
				send(key, sender=self, value=self[key])
		return None

	def scroll_description(self, value):
		len_words_list = len(self['words_list'])
		if len_words_list > self.BLOCKER_POS:
			self.select(value, 'words_list')
		return None

	def _update_words_list(self):
		items = []
		if not self.selected['description']:
			lines = u''.splitlines()
		else:
			lines = self.selected['description'].splitlines()
		for line in lines:
			items.extend((Item(f, 'text') for f in textwrap.wrap(line, self.FRAGMENT_LENGTH)))
		self.set_items(items, 'words_list')
		return None

	def _get_date(self):
		if self.selected:
			return self.selected['date']
		return u''

	def _get_preview(self):
		if self.selected and self.selected['preview']:
			return self.selected['preview']
		return None

	def _get_embedded_media(self):
		if self.selected and self.selected['uri'] and self.selected['uri'] != '::online::':
				return 'embedded_media.png'
		return None
