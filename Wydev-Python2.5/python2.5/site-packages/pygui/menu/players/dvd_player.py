# -*- coding: utf-8 -*- 
#
# Description:
#
# DVD Player Class Definition
#
#
#
# Changes:
#
# 2011-10-25
# Initial Commit
#
# 2011-11-20
# Added set default language at dvd launch
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import types
import pygui.config as config
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from peewee.messages import send as louie_send
from peewee.notifier import sched, Task
from pygui.eventmanager.players import DVDEventHandler
from pygui.menu.players.core import Player
from pygui.item.mediaitem import DVDItem, IsoDVDItem

log = GET_LOGGER(__name__)

try:
	from wyump import Wydvd, WydvdException
	log.info('Using Blu-Ray backend')
except ImportError:
	from wydvd import Wydvd, WydvdException
	log.info('Using DVD backend')

__all__ = ['DVDPlayer']



def user_action(func):

	def exe(self, *args, **kw):
		def _on_idle():
			actual_speed = self.speed
			if actual_speed and int(actual_speed * 10) != 10:
				self._idle_timer.stop()
				self._idle_timer.start(config.HMI_VIDEO['idle_threshold'])
			else:
				louie_send('on_user_idle', self)
				self._idle_timer = None
			return None

		def _on_action():
			if self.is_menu:
				return None
			if self._idle_timer is None:
				self._idle_timer = Task(_on_idle)
				louie_send('on_user_event', self)
			else:
				self._idle_timer.stop()
			self._idle_timer.start(config.HMI_VIDEO['idle_threshold'])
			return None

		ret = func(self, *args, **kw)
		if self.is_playing:
			_on_action()
		return ret

	return exe



class WydvdCatcher(object):

	actions_dict = dict()

	def __init__(self, player, *args, **kw):
		self._wydvd = Wydvd()
		self._player = player
		WydvdCatcher.actions_dict['WYDVD_UOP_PROHIBITED'] = player._activate_uop_display
		return None

	def __getattr__(self, name):
		res = None
		try:
			res = getattr(self._wydvd, name)
			if not isinstance(res, (types.MethodType, types.FunctionType)):
				return res
		except AttributeError, e:
			def res(*args, **kw):
				return None

		def _fun(*args, **kw):
			try:
				return res(*args, **kw)
			except WydvdException, e:
				WydvdCatcher.actions_dict.get(str(e), (lambda : None))()
			return None

		return _fun



class DVDPlayer(Player):

	media = 'video'
	_tv_aspect = 0
	forward_tricks_icons = {0: 'ff1', 1: 'ff1', 2: 'ff2', 3: 'ff3', 4: 'ff3', 5: 'ff4', 6: 'ff5', 7: 'ff5'}
	backward_tricks_icons = {0: 'bw1', 1: 'bw1', 2: 'bw2', 3: 'bw3', 4: 'bw3', 5: 'bw4', 6: 'bw5', 7: 'bw5'}

	def __init__(self, type='dvdplayer'):
		self.eventhandler = DVDEventHandler(self)
		Player.__init__(self, type)
		self.wydvd = WydvdCatcher(self)
		self._in_pause = False
		self._uop_hide_task = Task(louie_send, 'on_uop_hide', self)
		self._uop_hide_task.delay = 3
		self.nb_ptt = 0
		self._getitems_keywords['speed'] = self._formatted_speed
		return None

	# Return the player's speed, formatted in a human-readable fashion, for display on the OSD.
	# If the speed is 0 or 1 (i.e. stopped, paused or playing at normal speed), return an empty string.
	def _formatted_speed(self):
		s = self.speed
		if 0 < s < 1:
			return '%.1fx' % s
		if s in (0, 1):
			return ''
		return '%dx' % s

	def _get_is_menu(self):
		button_info = self.wydvd.get_button_info()
		return (button_info['nb'] != 0)

	is_menu = property(_get_is_menu)
	del _get_is_menu

	def _get_is_playing(self):
		return (self.wydvd.domain == 'TITLE')
	
	is_playing = property(_get_is_playing)
	del _get_is_playing

	def _activate_uop_display(self):
		if not self._uop_hide_task.running:
			louie_send('on_uop_show', self)
		self._uop_hide_task.start()
		return None

	def tick_callback(self):
		try:
			if self._last_action['time'] + 1 < sched.ts:
				self._last_action = None
		except:
			pass
		if not self._idle_timer:
			return None
		try:
			cur_pos = self.wydvd.get_title_location()
			cur_length = self.wydvd.get_title_duration()
			self.time_elapsed = ((cur_pos['hours'] * 3600) + (cur_pos['minutes'] * 60) + cur_pos['seconds'])
			self.total_time = ((cur_length['hours'] * 3600) + (cur_length['minutes'] * 60) + cur_length['seconds'])
			for it in ('progressbar', 'time_remaining', 'time_elapsed', 'time_total', 'status_icon', 'speed'):
				louie_send(it, sender=self, value=self[it])
		except Exception, e:
			PRINT_EXCEPTION(e)
		return None

	@user_action
	def action_up(self):
		if self.is_menu:
			self.wydvd.action_button('up')
		else:
			if self._in_pause:
				self.speed = 1
			self.wydvd.previous_chapter()
		return None

	@user_action
	def action_down(self):
		if self.is_menu:
			self.wydvd.action_button('down')
		else:
			if self._in_pause:
				self.speed = 1
			self.wydvd.next_chapter()
		return None

	@user_action
	def action_left(self):
		if self.is_menu:
			self.wydvd.action_button('left')
		else:
			if self._in_pause:
				self.speed = 1
			self._last_action = dict(time=sched.ts, val=-1)
			self.wydvd.seek_percent(-1)
		return None

	@user_action
	def action_right(self):
		if self.is_menu:
			self.wydvd.action_button('right')
		else:
			if self._in_pause:
				self.speed = 1
			self._last_action = dict(time=sched.ts, val=1)
			self.wydvd.seek_percent(1)
		return None

	def action_select(self):
		if self.is_menu:
			self.wydvd.action_button('activate')
		else:
			self.toggle_pause()
		return None

	@user_action
	def toggle_pause(self):
		if self._in_pause:
			self.speed = 1
		elif abs(self.speed) > 1:
			self.speed = 1
		else:
			self.speed = 0
		return None
		
	def _get_playmode(self):
		return 'none'

	def play(self, item, playlist=None, delay=0):
		Player.play(self, item, playlist)
		self._idle_timer = None
		_t = type(item)
		if _t == IsoDVDItem:
			self.wydvd.open(path=item['uri'])
		elif _t == DVDItem:
			self.wydvd.open()
		self.wydvd.set_surround(config.user_config['connections']['spdif_surround'])
		if delay:
			delay['title'] = delay.pop('num')
			self.wydvd.time_play(**delay)
		else:
			self.wydvd.play()
		# Set default language to user_config choice
		for stream_num in xrange(self.wydvd.get_available_stream()['nb_audio']):
			audio_stream = self.wydvd.get_audio_info(stream_num)
			if config.user_config['video']['language'] in audio_stream['language']:
				self.wydvd.set_audio_stream(stream_num)
				break
		self._in_pause = False
		return None

	def stop(self):
		self._idle_timer = None
		if self.is_playing and config.resume_dvd:
			self.selected.vfs_set_metas(playbackStatus=repr(self.wydvd.get_title_location()))
		else:
			self.selected.vfs_set_metas(playbackStatus='')
		self.wydvd.stop()
		self.wydvd.close()
		Player.stop(self)
		return None

	@user_action
	def _set_speed(self, val):
		if not self._in_pause and val == 0:
			self.wydvd.pause()
			log.debug('wydvd has been set in pause, check the new speed : %d' % self.wydvd.get_speed())
			self._in_pause = True
		elif self._in_pause and val != 0:
			self.wydvd.unpause()
			self._in_pause = False
		self.wydvd.set_speed(val)
		return None

	def _get_speed(self):
		if not self._in_pause:
			speed = self.wydvd.get_speed()
			if speed:
				return speed
		return 0

	speed = property(_get_speed, _set_speed)
	del _get_speed
	del _set_speed

	# Nothing needs to happen when Info is pressed, other than the info bar reappearing as a result of user_action.
	def action_info(self):
		if self._idle_timer and self._idle_timer.running:
			self._idle_timer.stop()
			self._idle_timer = None
			louie_send('on_user_idle', self)
		else:
			@user_action
			def _do_nothing(self):
				return None
			_do_nothing(self)
		return None

	def _get_status(self):
		if self.is_menu:
			return None
		speed = self.speed
		if self._in_pause or speed == 0:
			return 'pause'
		elif speed == 1:
			try:
				val = self._last_action['val']
				if val < 0:
					return 'previous_track'
				else:
					return 'next_track'
			except:
				return 'play'
		elif -1 <= speed < 0:
			return 'slow_motion_rewind'
		elif 0 < speed < 1:
			return 'slow_motion_forward'
		elif speed > 1:
			return self.forward_tricks_icons[self.eventhandler.forward_steps.index(speed)]
		elif speed < -1:
			return self.backward_tricks_icons[self.eventhandler.backward_steps.index(speed)]
		return 'stop'
