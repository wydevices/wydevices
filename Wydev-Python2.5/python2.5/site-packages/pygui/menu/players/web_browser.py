# -*- coding: utf-8 -*- 
#
# Description:
#
# Web Browser Player Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from pygui.eventmanager.players import WebBrowserEventHandler
from pygui.menu.menu.web import URLNavigatorMenu
from pygui.item.web import URLItem
from pygui.menu.players.core import Player
from pygui.menu import selective_gui_updater
from peewee.debug import DEBUG, PRINT_EXCEPTION, GET_LOGGER
from peewee.messages import send as louie_send
from peewee.notifier import Task
from pygui.shared import pygui_globs
import pygui.config as config

log = GET_LOGGER(__name__)


# WebBrowser interface
class WebBrowser(Player):

	def __init__(self, type='webbrowser'):
		Player.__init__(self, type)
		self.eventhandler = WebBrowserEventHandler(self)
		self._getitems_keywords['url_path'] = (lambda : self.selected.url)
		self._getitems_keywords['url_name'] = (lambda : self.selected.name)
		self._getitems_keywords['browser_display'] = (lambda : self.selected.url)
		self._WebBrowser__banner_timer = None
		self._nav = None
		self.bookmarks = []
		return None

	def load_url(self, url=None):
		if url is None:
			url = self.selected.url
		louie_send('update', value=url, sender=self)
		return None

	def activate_url_banner_timer(self):
		def stop_banner_timer():
			louie_send('on_hide_banner', sender=self)
			self._WebBrowser__banner_timer = None
			return None
		if self._WebBrowser__banner_timer is None:
			self._WebBrowser__banner_timer = Task(stop_banner_timer)
			louie_send('on_show_banner', sender=self)
		else:
			self._WebBrowser__banner_timer.stop()
		self._WebBrowser__banner_timer.start(config.HMI_VIDEO.get('banner_period', 5))
		return None

	def toggle_menu(self):
		if self._nav is None:
			from pygui.menu.menu.web import URLNavigatorMenu
			self._nav = URLNavigatorMenu(_('URL navigator menu'), urls=self.choices, type='url_navigator', universe=self.universe)
			pygui_globs['menustack'].push_menu(self._nav)
		else:
			self.stack.toggle()
		return None

	@selective_gui_updater('url_path', 'url_name', 'browser_display')
	def play(self, item=None, playlist=None):
		Player.play(self, item, playlist)
		return None

	@selective_gui_updater('url_path', 'url_name', 'browser_display')
	def select(self, item, list_name='main_list'):
		self.activate_url_banner_timer()
		ret = Player.select(self, item)
		if ret is True:
			if self._WebBrowser__banner_timer is None:
				self._WebBrowser__banner_timer = Task(self.load_url)
			else:
				self._WebBrowser__banner_timer.stop()
			self._WebBrowser__banner_timer.start(config.HMI_VIDEO.get('lazy_selection', 2))
		return ret

	def browse_action(self, action_name):
		louie_send('browser_display', sender=self, action=action_name)
		return None

	def insert_char(self, char_value):
		louie_send('browser_display', sender=self, action='insert_char', value=char_value)
		return None

	def bookmark_current(self):
		item = URLItem('', url='', menu=self)
		louie_send('browser_display', sender=self, action='get_page_info', value=item)
		self.bookmarks.append(item)
		return None
