# -*- coding: utf-8 -*- 
#
# Description:
#
# Menu Udpater Decorators Definitions
#
#
#
# Changes:
#
# 2011-10-04
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from peewee.messages import send as louie_send
from peewee.notifier import Task
from pygui.facilities.l10n import UnicodeDict

log = GET_LOGGER(__name__)


__all__ = ['gui_updater', 'selective_gui_updater']



# Decorator to specify functions that require the GUI to be refreshed after
def gui_updater(fn):
	def _do_updates(self, *args, **kw):
		ret = None
		try:
			ret = fn(self, *args, **kw)
		except Exception, e:
			PRINT_EXCEPTION(e)
		for it in self._getitems_keywords.iterkeys():
			louie_send(it, sender=self, value=self[it])
		return ret

	return _do_updates



# Decorator to specify functions that will require specific parts of
# the GUI to be refreshed after being called. In theory, gui_updater
# is equivalent to selective_gui_updater(self._getitem_keywords).
# 
# Usage:
# 	@selective_gui_updater("foo", "bar", "baz")
# 	def my_func():
# 		pass
# 
# The "foo", "bar" and "baz" UI fields will be refreshed after my_func is called
def selective_gui_updater(*names):
	def _do_updates(self, fn, *args, **kw):
		ret = fn(self, *args, **kw)
		res = ''
		for it in names:
			try:
				res = self[it]
			except Exception, e:
#				PRINT_EXCEPTION(e)
				log.warning('Unable to update widget specified for %s with %s', it, res)
			louie_send(it, sender=self, value=res)
		return ret

	return (lambda fn: (lambda self, *args, **kw: _do_updates(self, fn, *args, **kw)))



UNIVERSE_NAME_DICT = UnicodeDict({'video_image': 'Video/Photo', 'video_image_thumbnail': 'Video/Photo', 'video': 'Video', 'image': 'Image', 'image_thumbnail': 'Image', 'audio': 'Music', 'games': 'Games', 'radio': 'Radio', 'tv': 'TV', 'tv_navigator': 'TV', 'scheduled_navigator': 'TV', 'multiverse': 'Navigator', 'net_services': 'Internet Services', 'parameters': 'Parameters', 'parameters_setup': 'Parameters', 'notebook_setup_parameters': 'Parameters', 'channelscanner': 'Scan in progress...', 'markeraudio': 'Music', 'markervideo_image': 'Video/Photo', 'markervideo': 'Video', 'markerimage': 'Photo', 'markertv': 'TV', 'markertv_navigator': 'TV', 'markermultiverse': 'Navigator'})
