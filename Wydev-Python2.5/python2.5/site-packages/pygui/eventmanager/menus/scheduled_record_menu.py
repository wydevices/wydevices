# -*- coding: utf-8 -*- 
#
# Description:
#
# EventManager Scheduled Record Connect Menu Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.debug import DEBUG, PRINT_EXCEPTION
from peewee.messages import send as louie_send
from pygui.eventmanager.menus.core import MenuEventHandler


# Event manager for Scheduled records menu
class ScheduledRecordMenuEventHandler(MenuEventHandler):

	def __init__(self, player):
		MenuEventHandler.__init__(self, player)
		return None

	def event_right(self, event):
		self.player.modify_scheduled_record()
		return True

	def event_info(self, event):
		self.player.action_info()
		return True

	def event_action_menu(self, event):
		self.player.display_action_menu()
		return True

	def event_toggle_menu(self, event):
		self.event_left(None)
		return MenuEventHandler.event_toggle_menu(self, event)



# Event manager for Scheduled records menu
class ModifyScheduledRecordMenuEventHandler(MenuEventHandler):
	
	def __init__(self, player):
		MenuEventHandler.__init__(self, player)
		return None

	def event_left(self, event):
		if self.player.active_list == 'main_list':
			return True
		elif self.player.get_item_list('main_list').selected.selected_pos == 0:
			self.player.get_item_list('main_list').selected.select(None, True)
			self.player.active_list = 'main_list'
			if self.player.selected_pos == len(self.player.get_item_list('main_list')) - 1:
				self.player.select(-1)
		else:
			_list = self.player.get_item_list('main_list').selected
			_preview_list = _list.selected.list_name
			if _list.select(-1):
				_new_list = _list.selected.list_name
				louie_send('on_%s_blur' % _preview_list, self.player)
				louie_send('on_%s_focus' % _new_list, self.player)
		return True

	def event_right(self, event):
		if self.player.active_list == 'main_list':
			list_name, self.player.active_list = self.player.selected.list_name, self.player.selected.list_name
			self.player.get_item_list(list_name).select(0, True)
		else:
			_list = self.player.get_item_list('main_list').selected
			_preview_list = _list.selected.list_name
			if _list.select(1):
				_new_list = _list.selected.list_name
				louie_send('on_%s_blur' % _preview_list, self.player)
				louie_send('on_%s_focus' % _new_list, self.player)
		return True

	def event_wheel_rwd(self, event):
		active_list = self.player.active_list
		if active_list == 'main_list':
			if self.player.get_item_list('main_list').selected_pos == 4 and self.player.is_only_this_time():
				self.player.select(2)
			else:
				self.player.select(1)
			if self.player.selected_pos == len(self.player.choices) - 1:
				self.event_right(1)
			if active_list == 'repetition_num_list' and self.player.get_item_list('repetition_list')[0].selected_pos == 0:
				try:
					_list = self.player.get_item_list('main_list').selected.selected
					if not _list.select(1):
						_list.select(0, force_pos=True)
					self.player.update(_list)
				except Exception, e:
					PRINT_EXCEPTION(e)
		return True

	def event_wheel_fwd(self, event):
		active_list = self.player.active_list
		if self.player.active_list in self._INVERTED_LISTS:
			return self.event_wheel_fwd(event)
		else:
			return self.event_wheel_rwd(event)
		return True

	_INVERTED_LISTS = set(['date_list', 'start_time_list', 'stop_time_list', 'repetition_list', 'repetition_num_list', 'service_list'])

	def event_up(self, event):
		if self.player.active_list in self._INVERTED_LISTS:
			return self.event_wheel_fwd(event)
		else:
			return self.event_wheel_rwd(event)
		return True

	def event_down(self, event):
		if self.player.active_list in self._INVERTED_LISTS:
			return self.event_wheel_rwd(event)
		else:
			return self.event_wheel_fwd(event)
		return True

	def event_select(self, event):
		self.player.get_item_list('main_list').selected.selected.execute()
		return True

	def event_stop(self, event):
		self.player.cancel()
		return True

	def event_toggle_menu(self, event):
		return True

	def event_marker(self, event):
		return True

	def event_action_menu(self, event):
		return True
