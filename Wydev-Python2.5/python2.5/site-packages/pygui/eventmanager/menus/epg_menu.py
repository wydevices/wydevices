# -*- coding: utf-8 -*- 
#
# Description:
#
# EventManager Epg Menu Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from pygui.eventmanager import EventDispatcher
from pygui.shared import pygui_globs
from pygui.item.mediaitem.core import ChannelItem
from pygui.eventmanager.menus.navigator_menu import NavigatorEventHandler


# Event handler for the TV navigator (zaplist).
# Basically a standard Navigator event handler, with a few tweaks regarding
# toggling out, item selection, and where the markerlist may only be used
# to mark channels.
class TvNavigatorEventHandler(NavigatorEventHandler):

	def event_toggle_menu(self, event):
		stack = pygui_globs['menustack']
		for menu in stack.menus_stack:
			from pygui.menu.players import TVPlayer
			if isinstance(menu, TVPlayer):
				menu.action_info()
		return NavigatorEventHandler.event_toggle_menu(self, event)

	def event_marker(self, event):
		if isinstance(self.player.selected, ChannelItem):
			NavigatorEventHandler.event_marker(self, event)
		else:
			self.player._error_spawner()
		return True

	def event_select(self, event):
		self.player.execute_selected()
		return True

	def event_info(self, *args, **kw):
		return True

	def event_record(self, event):
		self.player.action_record()
		return True

	def event_stop(self, event):
		self.player.action_stop()
		return True



# Event handler for the EPG grid.
class EpgGridEventHandler(EventDispatcher):

	def event_DEFAULT(self, event):
		return False

	def event_up(self, event):
		if not self.player.update_channels_timer.running:
			self.player.select_program(-event.arg['count'])
		return True

	event_wheel_rwd = event_up
	def event_down(self, event):
		if not self.player.update_channels_timer.running:
			self.player.select_program(event.arg['count'])
		return True

	event_wheel_fwd = event_down
	def event_left(self, event):
		self.player.select_channel(-event.arg['count'])
		return True

	def event_right(self, event):
		self.player.select_channel(event.arg['count'])
		return True

	def event_select(self, event):
		if self.player.zap_to_selected():
			pygui_globs['menustack'].back_to_player()
		return True

	def event_record(self, event):
		self.player.action_record()
		return True

	def event_stop(self, event):
		self.player.cancel_record_selected()
		return True

	def event_toggle_menu(self, event):
		self.player.display_control_window()
		return True

	def event_info(self, event):
		self.player.display_info_banner()
		return True

	def event_action_menu(self, event):
		pygui_globs['menustack'].back_one_menu()
		return True

	def event_marker(self, event):
		self.player._error_spawner()
		return True



# Event handler for the EPG control window (spawned by pressing list on the EPG grid).
class EpgControlWindowEventHandler(EventDispatcher):

	def event_DEFAULT(self, event):
		self.player._error_spawner()
		return True

	def event_up(self, event):
		self.player.select_value(-event.arg['count'])
		return True

	def event_down(self, event):
		self.player.select_value(event.arg['count'])
		return True

	def event_left(self, event):
		self.player.select_field(-event.arg['count'])
		return True

	def event_right(self, event):
		self.player.select_field(event.arg['count'])
		return True

	def event_toggle_menu(self, event):
		pygui_globs['menustack'].back_one_menu()
		return True

	def event_info(self, event):
		self.player.display_info_banner()
		return True



# Event handler for the EPG full info banner (spawned by pressing info on the EPG grid).
class EpgInfoBannerEventHandler(EventDispatcher):

	def event_DEFAULT(self, event):
		self.player._error_spawner()
		return True

	def event_up(self, event):
		self.player.select_page(-event.arg['count'])
		return True

	def event_down(self, event):
		self.player.select_page(event.arg['count'])
		return True

	def event_info(self, event):
		pygui_globs['menustack'].back_one_menu()
		return True
