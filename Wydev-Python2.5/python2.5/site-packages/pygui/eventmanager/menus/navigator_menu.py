# -*- coding: utf-8 -*- 
#
# Description:
#
# Navigator Menu EventManager Class Definition
#
#
#
# Changes:
#
# 2011-10-18
# Initial Commit
#
# 2011-10-19
# Add special case in Hand event for Youtube ActionMenu 
#
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from pygui.eventmanager.menus.core import MenuEventHandler
from peewee.debug import GET_LOGGER
from pygui.item.mediaitem.core import DirItem
from pygui.item.mediaitem.dailymotion import DailyMotionItem
from pygui.item.mediaitem.youtube import YouTubeItem
from pygui.markerlist import markerlists, Markerlist
from pygui.window import LoadingWindow
from pygui.shared import pygui_globs

log = GET_LOGGER(__name__)



# Event manager for Navigator (file browser)
class NavigatorEventHandler(MenuEventHandler):

	def __init__(self, player):
		MenuEventHandler.__init__(self, player)
		return None

	def event_right(self, event):
		self.player.browse_selected()
		return True

	def event_select(self, event):
		self.player.execute_selected()
		return True

	def event_left(self, event):
		self.player.browse_previous()
		return True

	# Display the information window (which info window appears may
	# vary based on the selected item's type and location).
	def event_info(self, event):
		self.player.action_info()
		return True

	def event_stop(self, event):
		if pygui_globs['menustack'].get_player():
			self.player._error_spawner()
		return True

	def event_toggle_menu(self, event):
		if not pygui_globs['menustack'].toggle():
			self.player._error_spawner()
		return True

	def event_action_menu(self, event):
		sel = self.player.selected
		from pygui.menu.menu import ActionMenu
		parent = None
		if sel is None and self.player._history:
			parent = self.player._history[-1]['selected']
		else:
			parent = sel.parent
		context = dict(menu=self.player, selected=sel, parent=parent)
		if isinstance(sel, YouTubeItem):
			s = ActionMenu(context, type_='playeraction', category='youtube', universe=self.player.universe)
		elif isinstance(sel, DailyMotionItem):
			s = ActionMenu(context, type_='playeraction', category='dailymotion', universe=self.player.universe)
		else:
			s = ActionMenu(context, universe=self.player.universe)
		s.show()
		if sel == None:
			s.select(-1)
			s.select(1)
		return True

	# Add the selected item to the marker list
	def event_marker(self, event):
		play = self.player
		sel = play.selected
		if sel is None:
			log.warning('Nothing to put in markerlist')
			return True
		if isinstance(sel, Markerlist) or sel.universe == 'net_services':
			play._error_spawner()
		else:
			marker = markerlists()[self.player.universe]
			if sel.is_marked():
				marker.del_item(sel)
			else:
				w = None
				if isinstance(sel, DirItem):
					w = LoadingWindow('')
					w.show()
				marker.add_item(sel)
				if w:
					w.hide()
			play._update_marker()
		return True



# Event handler for grid navigators.
class GridNavigatorEventHandler(NavigatorEventHandler):

	def event_up(self, event):
		self.player.select_vertical(-event.arg['count'])
		return True

	def event_down(self, event):
		self.player.select_vertical(event.arg['count'])
		return True

	def event_left(self, event):
		self.player.select_horizontal(-event.arg['count'])
		return True

	def event_right(self, event):
		self.player.select_horizontal(event.arg['count'])
		return True
