# -*- coding: utf-8 -*- 
#
# Description:
#
# EventDispatcher class definition
#
#
#
# Changes:
#
# 2012-11-12
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review Wydev-Python2.5 README & LICENSE files for further details.

from __future__ import absolute_import

__all__ = ['EventDispatcher', 'UnknownEventError', 'NullEventHandler']

from pygui import config
from peewee.debug import GET_LOGGER, DEBUG
from pygui.shared import pygui_globs
from pygui.eventmanager.events import events as event_map
from pygui.facilities.wylight import WyLed

log = GET_LOGGER(__name__)



class UnknownEventError(Exception):
	pass



# Event dispatcher.
# This is the base class for all event managers.
#
# Handlers should implement event_<event name> methods.
# The only parameter to an event_* method is the event itself,
# other objects should be passed to L{__init__} and stored.
# 
# If the event_* method, specific to an event type, can't be found,
# L{event_DEFAULT} is called instead.
#
# If an event_* method returns True or None, the event is consumed and
# its processing is halted.
#
# If it returns False, the event will also be processed by handlers
# below in the stack.
#
# returning None is a bad idea ! returns True instead
class EventDispatcher(object):

	led = WyLed()
	power_mgr = None
	_disable_next_input = False

	def __init__(self, player):
		self.player = player
		return None

	def __call__(self, event):
		if EventDispatcher._disable_next_input:
			EventDispatcher._disable_next_input = False
			return True
		event_short_name = str(event).lower()
		callback_name = 'event_' + event_short_name
		if not self.player.hold:
			try:
				log.debug(('[ %s received ]' % callback_name).center(60, '#'))
				callback = getattr(self, callback_name)
			except AttributeError:
				log.debug('event not catched by %s, calling default event.' % self.__class__.__name__)
				callback = self.event_DEFAULT
			EventDispatcher.led.on()
			ret = callback(event)
			EventDispatcher.led.off()
			return ret
		else:
			log.debug("Can't perform event %s : %r is held" % (callback_name, self.player))
			return True

	def event_DEFAULT(self, event):
		log.debug('Unknown Event: "%s"', str(event))
		return False

	def event_home(self, event):
		ms = pygui_globs['menustack']
		if 'universe_switcher' in config.plugins:
			from pygui.menu.menu.home import HomeMenu
			if ms.menus_stack[-1].type == 'switcher':
				if len(ms.menus_stack) > 2:
					ms.back_one_menu()
			else:
				HomeMenu().show(False)
		else:
			ms.back_to_home()
		return True



# Event handler that lets all events pass through.
class NullEventHandler(EventDispatcher):

	def event_DEFAULT(self, event):
		return False



# Event handler that blocks all events.
class CatchEventHandler(EventDispatcher):

	def event_DEFAULT(self, event):
		return True
