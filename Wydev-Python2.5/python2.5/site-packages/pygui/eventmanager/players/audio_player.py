# -*- coding: utf-8 -*- 
#
# Description:
#
# EventManager Audio Player Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.debug import PRINT_EXCEPTION, DEBUG
from peewee.messages import send as louie_send
from peewee.ranges import f_list
from pygui.config import HMI_MUSIC
from pygui.eventmanager.players import GenericPlayerEventHandler
from pygui.menu.menu import Menu


# Event manager for Music universe
class AudioEventHandler(GenericPlayerEventHandler):
	
	forward_steps = f_list(HMI_MUSIC['forward'])
	backward_steps = f_list(HMI_MUSIC['backward'])

	def event_action_menu(self, event):
		return GenericPlayerEventHandler.event_action_menu(self, event)

	def event_up(self, event):
		al = self.player.active_list
		if al == 'main_list':
			if not self.player.random_mode:
				ret = self.player.select(-event.arg['count'], list_name=al)
				if self.player.repeat_mode == 'track':
					self.player.repeat_mode = False
			else:
				ret = self.player.select_random()
		else:
			ret = Menu.select(self.player, -event.arg['count'], list_name=al)
		return True

	def event_down(self, event):
		al = self.player.active_list
		if al == 'main_list':
			if not self.player.random_mode:
				ret = self.player.select(event.arg['count'], list_name=al)
				if self.player.repeat_mode == 'track':
					self.player.repeat_mode = False
			else:
				ret = self.player.select_random()
		else:
			ret = Menu.select(self.player, event.arg['count'], list_name=al)
		return True

	def event_stop(self, event):
		play = self.player
		if play.active_list == 'edit_list':
			if play.selected == play.get_item_list('main_list').selected:
				return True
			play.choices.edited = False
			play.selected.vfs_delete()
			del play.choices[play.selected_pos]
			play.song_changed()
		else:
			return GenericPlayerEventHandler.event_stop(self, event)

	def event_select(self, event):
		if self.player.active_list == 'edit_list':
			self.player.select(self.player.selected)
		else:
			self.player.action_play()
		return True

	def event_left(self, event):
		play = self.player
		if play.active_list == 'edit_list':
			el = play.get_item_list('edit_list')
			if el.edited:
				el.edited = False
			else:
				main_list = play.get_item_list('main_list')
				old_selection = main_list.selected
				main_list.set_items(el, old_selection)
				el.set_items([])
				play.focus_previous()
				self.player.tasks['hide_help'].stop()
				louie_send('hide_help_playlist', sender=self.player)
		return True

	def event_right(self, event):
		play = self.player
		if play.active_list == 'main_list':
			main_list = play.get_item_list('main_list')
			edit_list = play.get_item_list('edit_list')
			edit_list.set_items(main_list)
			edit_list.select(play.selected)
			play.focus_next()
			self.player.show_help_playlist()
		else:
			play.get_item_list('edit_list').edited = True
		return True

	def _change_speed(self, wanted_speeds, mirror_speeds, reference_speed=1):
		sm = self.player.speed
		if abs(sm - reference_speed) < 0.01:
			self.player.speed = wanted_speeds[0]
			return True
		try:
			idx = wanted_speeds.index(sm)
			_idx = min(idx + 1, len(wanted_speeds) - 1)
			if not idx == _idx:
				self.player.speed = wanted_speeds[_idx]
		except ValueError:
			idx = mirror_speeds.index(sm)
			if idx == 0:
				self.player.speed = reference_speed
			else:
				_idx = max(idx - 1, 0)
				self.player.speed = mirror_speeds[_idx]
		except:
			PRINT_EXCEPTION()
		return True

	def event_wheel_rwd(self, event):
		play = self.player
		if play.active_list == 'edit_list':
			return Menu.select(play, -event.arg['count'])
		self.player.action_seek(HMI_MUSIC['left'])
		return True

	def event_wheel_fwd(self, event):
		play = self.player
		if play.active_list == 'edit_list':
			Menu.select(play, event.arg['count'])
			return True
		self.player.action_seek(HMI_MUSIC['right'])
		return True

	def event_toggle_menu(self, event):
		if self.player.get_item_list('edit_list'):
			return True
		return GenericPlayerEventHandler.event_toggle_menu(self, event)
