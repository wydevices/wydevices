# -*- coding: utf-8 -*- 
#
# Description:
#
# EventManager Net Player Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import pygui.config as config
from pygui.eventmanager.players import AudioEventHandler, GenericPlayerEventHandler
from peewee.ranges import f_list


# Event manager for Video universe
class VideoEventHandler(AudioEventHandler):
	
	forward_steps = f_list(config.HMI_VIDEO['forward'])
	backward_steps = f_list(config.HMI_VIDEO['backward'])
	slow_motion = f_list(config.HMI_VIDEO['slow'])
	reverse_slow_motion = f_list(config.HMI_VIDEO['reverse_slow'])
	
	def event_action_menu(self, event):
		return GenericPlayerEventHandler.event_action_menu(self, event)

	def event_left(self, event):
		self.player.action_seek(-10)
		return True

	def event_right(self, event):
		self.player.action_seek(30)
		return True

	def event_wheel_rwd(self, event):
		actual_speed = self.player.speed
		if actual_speed == 0 or actual_speed in self.reverse_slow_motion + self.slow_motion:
			self._change_speed(self.reverse_slow_motion, self.slow_motion, 0)
		else:
			self._change_speed(self.backward_steps, self.forward_steps)
		return True

	def event_wheel_fwd(self, event):
		actual_speed = self.player.speed
		if actual_speed == 0 or actual_speed in self.reverse_slow_motion + self.slow_motion:
			self._change_speed(self.slow_motion, self.reverse_slow_motion, 0)
		else:
			self._change_speed(self.forward_steps, self.backward_steps)
		return True

	def event_toggle_menu(self, event):
		return GenericPlayerEventHandler.event_toggle_menu(self, event)

	def event_info(self, event):
		self.player.action_info()
		return True

	def event_up(self, event):
		if self.player.playmode != 'track':
			AudioEventHandler.event_up(self, event)
		return True

	def event_down(self, event):
		if self.player.playmode != 'track':
			AudioEventHandler.event_down(self, event)
		return True



# Special event manager for youtube
class YoutubeEventHandler(GenericPlayerEventHandler):
	
	def event_up(self, event):
		al = self.player.active_list
		self.player.select(-event.arg['count'], list_name=al)
		return True

	def event_down(self, event):
		al = self.player.active_list
		self.player.select(event.arg['count'], list_name=al)
		return True

	def event_select(self, event):
		self.player.action_play()
		return None
