# -*- coding: utf-8 -*- 
#
# Description:
#
# Gui Side of Power Manager Class Definitions
#
#
#
# Changes:
#
# 2011-10-02
# Initial Commit
#
# 2011-12-09
# Add screensaver stop at suspend
# Add screensaver start at wakeup 
#
# 2011-12-11
# Add network sleep at suspend
# Add network wakeUp at wakeup
#
# 2012-03-11
# Add HDMI-CEC message sending to wakeup TV at wakeup
# Add HDMI-CEC message sending to standby TV at suspend
#
# 2012-04-10
# Add HDMI-CEC message sending only if config.user_config['advanced']['hdmi_cec'] is True
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import os
import platform

from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from peewee.powerutils import PowerManagerModule
from peewee.misc_utils import MetaSingleton
from peewee import notifier
from pygui.shared import pygui_globs
from peewee.notifier import events_watch, set_idle_callback
from pygui.eventmanager import EventDispatcher
from pygui.shared import pygui_globs
from pygui import config
from pygui.facilities.mixer import Mix as Mixer
from pygui.facilities.wylight import WyLed
from wynetwork.utils import WyNetwork

log = GET_LOGGER(__name__)



class PowerManager(PowerManagerModule):
	__metaclass__ = MetaSingleton
	led = WyLed()

	def __init__(self):
		PowerManagerModule.__init__(self, 'pygui')
		self.sleeping = False
		self._mute_flag = False
		events_watch(self.handle)
		return None

	def handle(self, event):
		if event.name == 'POWER':
			log.error('POWER -> self.pm.apm_state: %d' % self.pm.apm_state)
#			if pygui_globs['demomode']:
#				pygui_globs['demomode'].stop()
			if config.shutdown:
				if self.pm.apm_state:
					self.wakeup()
				else:
					self.led.ask_standby()
					self.standby()
			else:
				log.warning('Standby is disabled due to a shutdown_command definition')
				from peewee.notifier import stop
				stop()
		return None

	# Return to HOME menu, excepted on firstboot
	def _clean_stack(self):
		from pygui.menu.menu.firstboot import FirstBootMenu
		stack = pygui_globs['menustack']
		for m in stack.menus_stack:
			if m.hold:
				return False
			elif isinstance(m, FirstBootMenu):
				return False
		stack.back_to_home()
		stack.get_root().active_univ = None
		set_idle_callback(None, None)
		if config.user_config['power']['network_sleep']:
			try:
				wn = WyNetwork()
				wn.set_scanning(False)
				wn.wn_gen.sleep()
			except:
				pass
		return True

	# Reboot the system (on a PC, exit the application).
	def reboot(self):
		log.critical('Rebooting the system...')
		if platform.machine() != 'sh4':
			log.critical('Not!')
			notifier.stop()
		else:
			os.system('/sbin/reboot')
		return None

	# Shut the system in standby mode (in fact: suspend mode)
	# TODO
	# You may configure the command issued to shut down
	# with the shutdown_command variable in local_conf.py.
	def standby(self):
		log.critical('Shutting the system in standby...')
		if platform.machine() != 'sh4':
			log.critical('Not!')
			notifier.stop()
		else:
			self.pm.apm_state = 1
		return None

	# Shut the system in standby mode (real APM standby)
	# TODO
	# You may configure the command issued to shut down
	# with the shutdown_command variable in local_conf.py.
	def real_standby(self):
		log.critical('Shutting the system down...')
		if platform.machine() != 'sh4':
			log.critical('Not!')
			notifier.stop()
		else:
			self.pm.apm_state = 1
		return None

	# Shut the system down (on a PC, exit the application).
	# TODO
	# You may configure the command issued to shut down
	# with the shutdown_command variable in local_conf.py.
	def off(self):
		log.critical('Powering Off the system...')
		if platform.machine() != 'sh4':
			log.critical('Not!')
			notifier.stop()
		else:
			self.pm.apm_state = 3
		return None

	# Wake up WMS if apm state is standby
	def wakeup(self):
		log.critical('WakingUp the system...')
		# Send image_view_on to TV through CEC
		if config.user_config['advanced']['hdmi_cec']:
#			os.system("echo \"1004\" > /proc/wycec/send_message")
			os.system("echo \"1\" > /proc/wycec_light/send_power_on")
		self.pm.apm_state = 0
		set_idle_callback(pygui_globs['screensaver'].idle, pygui_globs['screensaver'].busy, config.user_config['power']['screensaver_threshold'])
		if config.user_config['power']['network_sleep']:
			try:
				wn = WyNetwork()
				wn.wn_gen.wakeUp()
				wn.set_scanning(True)
			except:
				pass
		if 'restore_last_universe' in config.plugins:
			ms = pygui_globs['menustack']
			if ms.menus_stack[-1].type in ('switcher', 'home', 'root'):
				restore_last_universe()
		return None

	def apm_ready(self):
		from pygui.eventmanager import EventDispatcher
		EventDispatcher._disable_next_input = False
		self.sleeping = False
		try:
			if self._mute_flag:
				Mixer().toggle_mute()
				self._mute_flag = False
		finally:
			self.led.ask_led_action(4)
			PowerManagerModule.apm_ready(self)
		return None

	def apm_standby(self):
		from pygui.eventmanager import EventDispatcher
		EventDispatcher._disable_next_input = False
		self.sleeping = True
		ms = pygui_globs['menustack']
		try:
			self._clean_stack()
			mixer = Mixer()
			if not mixer.get_mute():
				mixer.mute()
				self._mute_flag = True
		finally:
			self.led.ask_led_action(3)
			PowerManagerModule.apm_standby(self)
			# Send standby to TV through CEC
			if config.user_config['advanced']['hdmi_cec']:
#				os.system("echo \"1036\" > /proc/wycec/send_message")
				os.system("echo \"1\" > /proc/wycec_light/send_power_off")
		return None

	def apm_off(self):
		from pygui.eventmanager import EventDispatcher
		EventDispatcher._disable_next_input = False
		self.sleeping = True
		self._clean_stack()
		PowerManagerModule.apm_off(self)
		return None

	def apm_suspend(self):
		from pygui.eventmanager import EventDispatcher
		EventDispatcher._disable_next_input = True
		self.sleeping = True
		self._clean_stack()
		PowerManagerModule.apm_suspend(self)
		return None



# Go back to the last used universe after a standby or shutdown.
def restore_last_universe():
	last_universe = config.user_config['advanced']['last_universe']
	if last_universe:
		ms = pygui_globs['menustack']
		try:
			ms.back_to_home()
			home_menu = ms.get_home()
			home_menu.select(last_universe)
			home_menu.execute_selected()
		except Exception, e:
			log.warning('restore_last_universe failed:')
			PRINT_EXCEPTION(e)
	return None

def reboot():
	PowerManager().reboot()
	return None
