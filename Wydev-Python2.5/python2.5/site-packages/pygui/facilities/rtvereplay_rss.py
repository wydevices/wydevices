# -*- coding: utf-8 -*- 
#
# Description:
#
# RTVEReplay RRS Browser Class Definitions
#
#
#
# Changes:
#
# 2012-11-12
# Initial Commit
#
#
# Thanks to Team XBMC for TvAlacarta plugin
# http://xbmc-tvalacarta.googlecode.com
#
# Thanks to SGCG for rtve_mediateca_dl util
# http://sgcg.es/articulos/2012/09/12/version-4-0-1-de-rtve-mediateca-dl/
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review Wydev-Python2.5 README & LICENSE files for further details.


import sys
import os
import re
import time
import md5
import urllib
import urlparse
import urllib2
import datetime
import simplejson as json
from pygui.config import user_config
from BeautifulSoup import BeautifulSoup
from peewee.debug import PRINT_EXCEPTION, GET_LOGGER

log = GET_LOGGER(__name__)



class RTVEReplayBrowser(object):

	def __init__(self):
		self.timestamp = datetime.datetime.now()
		return None

	def must_be_refresh(self):
		delta = datetime.datetime.now() - self.timestamp
		limit = user_config['video']['tvreplay_refresh_rate'] * 60
		if delta.seconds > limit:
			return True
		else:
			return False

	def decode_title(self, title):
		new_title = BeautifulSoup(title.encode('utf-8'),convertEntities="html").prettify()
		if '\n' in new_title:
			new_title = new_title.split('\n')[0]
		return new_title
	
	def get_categories(self):
		itemlist = []
		itemlist.append(dict(title="Todas las cadenas", action=(lambda:self.get_subcategories(url_path="http://www.rtve.es/alacarta/tve/"            , extra="tve"        )), thumbnail="http://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/TVE.svg/150px-TVE.svg.png"                         , type='category'))				 
		itemlist.append(dict(title="La 1"             , action=(lambda:self.get_subcategories(url_path="http://www.rtve.es/alacarta/tve/la1/"        , extra="la1"        )), thumbnail="http://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Logo_TVE-1.svg/120px-Logo_TVE-1.svg.png"           , type='category'))
		itemlist.append(dict(title="La 2"             , action=(lambda:self.get_subcategories(url_path="http://www.rtve.es/alacarta/tve/la2/"        , extra="la2"        )), thumbnail="http://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Logo_TVE-2.svg/120px-Logo_TVE-2.svg.png"           , type='category'))
		itemlist.append(dict(title="Canal 24 horas"   , action=(lambda:self.get_subcategories(url_path="http://www.rtve.es/alacarta/tve/24-horas/"   , extra="24-horas"   )), thumbnail="http://upload.wikimedia.org/wikipedia/fr/thumb/9/91/24_horas_%28TVE%29.svg/180px-24_horas_%28TVE%29.svg.png", type='category'))
		itemlist.append(dict(title="Teledeporte"      , action=(lambda:self.get_subcategories(url_path="http://www.rtve.es/alacarta/tve/teledeporte/", extra="teledeporte")), thumbnail="http://upload.wikimedia.org/wikipedia/fr/thumb/2/26/Teledeporte_logo.png/220px-Teledeporte_logo.png"        , type='category'))
		return itemlist

	def get_subcategories(self, url_path, extra):
		subcategories = []
		# El segundo nivel de menÃº es un listado por categorÃ­as
		subcategories.append(dict(title="Novedades", action=(lambda:self.get_novedades(url_path, extra)), thumbnail="", type='novedades'))
		subcategories.append(dict(title="Todos los programas", action=(lambda:self.get_programas("", extra + "/todos/1")), thumbnail="", type='programas'))
		# Only Toda las cadenas have categories
		if extra is 'tve':
			# Descarga la pÃ¡gina que tiene el desplegable de categorias de programas
			url = urllib.urlopen("http://www.rtve.es/alacarta/programas/tve/todos/1/")
			data = url.read()
			url.close()
			# Extrae las categorias de programas
			patron	= '<li><a title="Seleccionar[^"]+" href="/alacarta/programas/tve/([^/]+)/1/"><span>([^<]+)</span></a></li>'
			matches = re.findall(patron, data, re.DOTALL)
			# Crea una lista con las entradas
			for match in matches:
				itemtitle = match[1]
				itemurl = match[1]
				itemthumbnail = ""
				itemextra = match[0]
				subcategories.append(dict(title=self.decode_title(itemtitle), action=(lambda:self.get_programas(itemurl, itemextra)), thumbnail=itemthumbnail, type='programas'))
		return subcategories
	
	def get_novedades(self, url_path, extra):
		# Descarga la pÃ¡gina principal
		itemlist = []
		url = urllib.urlopen(url_path)
		data = url.read()
		url.close()
		patron = '<!-- programs_series.jsp -->(.*?)<!-- end programs_series.jsp -->'
		matches = re.findall(patron,data,re.DOTALL)
		if len(matches)>0:
			data = matches[0]
		else:
			return itemlist
		# Extrae los vÃ­deos
		patron  = '<div class="basicmod modVideo">[^<]+'
		patron += '<span class="ico">vídeo</span>[^<]+'
		patron += '<span class="img">[^<]+'
		patron += '<a id="PS." name="thumbID" href="([^"]+)" title="([^"]+)"[^<]+'
		patron += '<img title="([^"]+)" alt="([^"]+)" src="([^"]+)"'
		matches = re.findall(patron, data, re.DOTALL)
		# Crea una lista con las entradas
		for match in matches:
			itemtitle = match[3]
			itemurl = "http://www.rtve.es" + match[0]
			itemthumbnail = match[4]
			itemlist.append(dict(title=self.decode_title(itemtitle), uri=self.get_video_url(itemurl), thumbnail=itemthumbnail, type='video'))
		# Extrae el enlace a la pÃ¡gina siguiente
		#<a name="paginaIR" href="?pbq=2&amp;lang=es&amp;modl=LPG"><span>Siguiente</span></a>
		patron = '<a name="paginaIR" href="([^"]+)"><span>Siguiente</span></a>'
		matches = re.findall(patron, data, re.DOTALL)
		# Crea una lista con las entradas
		for match in matches:
			itemtitle = "Página siguiente"
			itemurl = urlparse.urljoin(url_path, match).replace("&amp;", "&")
			itemthumbnail = ""
			itemextra = ""
			itemlist.append(dict(title=self.decode_title(itemtitle), action=(lambda:self.get_novedades(itemurl, itemextra)), thumbnail=itemthumbnail, type='novedades'))
		return itemlist

	def get_programas(self, url_path, extra):
		# En la paginaciÃ³n la URL vendrÃ¡ fijada, si no se construye aquÃ­ la primera pÃ¡gina
		if not url_path.startswith("http"):
			url_path = "http://www.rtve.es/alacarta/programas/" + extra + "/?pageSize=100&order=1&criteria=asc&emissionFilter=all"
		itemlist = []
		url = urllib.urlopen(url_path)
		data = url.read()
		url.close()
		itemlist.extend(self.add_programas(url_path, extra, data))
		# Extrae el enlace a la pÃ¡gina siguiente
		patron = '<a name="paginaIR" href="([^"]+)"><span>Siguiente</span></a>'
		matches = re.findall(patron, data, re.DOTALL)
		# Crea una lista con las entradas
		for match in matches:
			itemtitle = "Página siguiente"
			itemurl = urlparse.urljoin(url_path, match).replace("&amp;", "&")
			itemthumbnail = ""
			itemextra = ""
			itemlist.extend(self.add_programas(url_path, extra, data))
			itemlist.append(dict(title=self.decode_title(itemtitle), action=(lambda:self.get_programas(itemurl, itemextra)), thumbnail=itemthumbnail, type='programas'))
		return itemlist

	def add_programas(self, url_path, extra, data):
		itemlist = []
		# Extrae los programas
		patron	= '<li class="[^"]+">.*?'
		patron += '<span class="col_tit" id="([^"]+)" name="progname">[^<]+'
		patron += '<a href="([^"]+)" title="Ver programa seleccionado">([^<]+)</a>[^<]+'
		patron += '</span>[^<]+'
		patron += '<span class="col_fec">([^<]+)</span>.*?'
		patron += '<span class="col_cat">([^<]*)</span>'
		matches = re.findall(patron, data, re.DOTALL)
		# Crea una lista con las entradas
		for match in matches:
			itemtitle = match[2]
			itemurl = urlparse.urljoin(url_path,match[1])
			itemthumbnail = ""
			itemextra = match[0]
			itemlist.append(dict(title=self.decode_title(itemtitle), action=(lambda:self.get_episodios(itemurl, itemextra, itemthumbnail)), thumbnail=itemthumbnail, type='episodios'))
		return itemlist

	def get_episodios(self, url_path, extra, thumbnail):
		# En la paginaciÃ³n la URL vendrÃ¡ fijada, si no se construye aquÃ­ la primera pÃ¡gina
		if url_path=="":
			# El ID del programa estÃ¡ en item.extra (ej: 42610)
			# La URL de los vÃ­deos de un programa es
			# http://www.rtve.es/alacarta/interno/contenttable.shtml?ctx=42610&pageSize=20&pbq=1
			url_path = "http://www.rtve.es/alacarta/interno/contenttable.shtml?ctx=" + extra + "&pageSize=20&pbq=1"
		url = urllib.urlopen(url_path)
		data = url.read()
		url.close()
		itemlist = []
		# Extrae los vÃ­deos
		patron	= '<li class="[^"]+">.*?'
		patron += '<span class="col_tit"[^>]+>[^<]+'
		patron += '<a href="([^"]+)">(.*?)</a>[^<]+'
		patron += '</span>[^<]+'
		patron += '<span class="col_tip">([^<]+)</span>[^<]+'
		patron += '<span class="col_dur">([^<]+)</span>.*?'
		patron += '<span class="col_fec">([^<]+)</span>.*?'
		patron += '<span class="detalle">([^>]+)</span>'
		matches = re.findall(patron,data,re.DOTALL)
		# Crea una lista con las entradas
		for match in matches:
			itemtitle = match[1]
			itemtitle = itemtitle.replace("<em>Nuevo</em>&nbsp;","")
			itemurl = urlparse.urljoin(url_path, match[0])
			itemthumbnail = thumbnail
			itemextra = match[2]
			itemlist.append(dict(title=self.decode_title(itemtitle), uri=self.get_video_url(itemurl), thumbnail=itemthumbnail, type='video'))
		# Extrae la paginaciÃ³n
		patron = '<a name="paginaIR" href="([^"]+)"><span>Siguiente</span></a>'
		matches = re.findall(patron, data, re.DOTALL)
		# Crea una lista con las entradas
		for match in matches:
			itemtitle = "Página siguiente"
			itemurl = urlparse.urljoin(url_path, match).replace("&amp;", "&")
			#http://www.rtve.es/alacarta/interno/contenttable.shtml?pbq=2&modl=TOC&locale=es&pageSize=15&ctx=36850&advSearchOpen=false
			if not itemurl.endswith("&advSearchOpen=false"):
				itemurl = itemurl + "&advSearchOpen=false"
			itemthumbnail = ""
			itemextra = extra
			itemlist.append(dict(title=self.decode_title(itemtitle), action=(lambda:self.get_episodios(itemurl, itemextra, itemthumbnail)), thumbnail=itemthumbnail, type='episodios'))
		return itemlist
		
	def get_video_url(self, player_url):
		command = '/wymedia/usr/bin/rtve-mediateca-dl -s ' + player_url
		output = os.popen(command)
		dl_output = output.read()
		output.close()
		video_url = dl_output.split(', URI: ')[1]
		video_url = video_url[:len(video_url) - 2]
		return video_url

if ( __name__ == "__main__" ):
	RTVEReplay_Client = RTVEReplayBrowser()
	def _get_next(obj):
		if obj['type'] is 'novedades':
			print 'Novedades: ', obj['title']
			print 'Thumbnail: ', obj['thumbnail']
		elif obj['type'] is 'programas':
			print 'Programas: ', obj['title']
			print 'Thumbnail: ', obj['thumbnail']
		elif obj['type'] is 'episodios':
			print 'Episodios: ', obj['title']
			print 'Thumbnail: ', obj['thumbnail']
		elif obj['type'] is 'video':
			print 'Video    : ', obj['title']
			print 'Thumbnail: ', obj['thumbnail']
			print 'URL      : ', obj['url_path']
		if obj['type'] is not 'video':
			for subobj in obj['action']():
				_get_next(subobj)
	for category in RTVEReplay_Client.get_categories():
		print 'Catergory: ', category['title']
		for subcategory in category['action']():
			_get_next(subcategory)
