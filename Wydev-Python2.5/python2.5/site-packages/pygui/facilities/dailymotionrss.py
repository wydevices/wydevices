# -*- coding: utf-8 -*- 
#
# Description:
#
# DailyMotion RRS Decorators Class Definitions
#
#
#
# Changes:
#
# 2011-11-20
# Initial Commit
#
# 2012-10-05
# Fix summer 2012 website modification.
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


__all__ = ['DailyMotionBrowser', 'RSSWrapper']

import re
import urllib
import urllib2
import httplib
import socket
import xml.etree.cElementTree as ET
from pygui.config import user_config
from pygui.window import MessageWindow

NS_itunes = 'http://www.itunes.com/dtds/podcast-1.0.dtd'
NS_media = 'http://search.yahoo.com/mrss'
NS_dm = 'http://www.dailymotion.com/dmrss'



class ElementWrapper(object):

	__slots__ = ['_element', '_ns']

	def __init__(self, element, ns=''):
		self._element = element
		self._ns = ns
		return None

	def _get_attr(self):
		return dict(self._element.items())

	_attr = property(_get_attr)

	def _get_list(self):
		return self._element.findall('*')

	_list = property(_get_list)

	def __getitem__(self, tag):
		if isinstance(tag, tuple):
			namespace = tag[0]
			tag = '{%s}%s' % tag
		else:
			namespace = self._ns
			tag = '{%s}%s' % (namespace, tag)
		res = self._element.findall(tag)
		if res == []:
			raise KeyError(tag)
		return [ElementWrapper(t, namespace) for t in res]

	def __getattr__(self, tag):
		t = self._element.findtext(tag)
		if t is None:
			raise AttributeError(tag)
		return t

	def _get_thumbnail_uri(self):
		return self[(NS_media, 'thumbnail')][0]._attr['url']

	_thumbnail_uri = property(_get_thumbnail_uri)

	def _get_video_uri(self):
		return self[(NS_media, 'player')][0]._attr['url']

	_video_uri = property(_get_video_uri)



class RSSWrapper(ElementWrapper):

	def __init__(self, in_file, channel_name='channel', item_name='item'):
		feed = ET.parse(in_file).getroot()
		channel = feed.find(channel_name)
		ElementWrapper.__init__(self, channel)
		self._items = [ElementWrapper(i) for i in channel.findall(item_name)]
		self.__getitem__ = self._items.__getitem__
		return None

	def __iter__(self):
		return iter(self._items)



class DailyMotionBrowser(object):

	def __init__(self):
		self.urlopen = urllib2.build_opener(urllib2.HTTPCookieProcessor(), urllib2.ProxyHandler()).open
		self.site = 'http://www.dailymotion.com/rss/'
		return None

	_sections = ('', 'featured', 'buzz', 'hd', 'official', 'creative', 'visited-week', 'rated-week')
	_sections_name = ('All', 'Featured', 'Buzz', 'High Def', 'Official', 'Creative', 'Visited Week', 'Rated Week')

	def search(self, what=0, lang='', max_res=0):
		uri = self.site
		if lang:
			uri += lang + '/'
		if isinstance(what, int) and (int(what) >= 0 and int(what) <= 7):
			uri += self._sections[int(what)]
			if int(what) > 0:
				uri += '/'
		else:
			uri += 'relevance/search/' + urllib.quote(what) + '/'
		if max_res:
			uri += '1:%d'%max_res
		return RSSWrapper(self.urlopen(uri))

	def _get_flv_uri(self, player_url, choosen_format):
		video_dict = dict()
		available_formats = []
		
		# Open player url
		request = urllib2.Request(player_url)
		request.add_header('Cookie', 'family_filter=off')
		try:
			webpage = urllib2.urlopen(request).read()
		except (urllib2.URLError, httplib.HTTPException, socket.error), err:
			MessageWindow('ERROR: unable retrieve video webpage: %s' % str(err)).show()
			return '', '', ''

		# Extract videos URL from webpage
		sequence = re.compile('"sequence":"(.+?)"').findall(webpage)
		if sequence is None:
			MessageWindow('ERROR: unable to extract media URL').show()
			return '', '', ''
		newseqeunce = urllib.unquote(sequence[0]).decode('utf8').replace('\\/', '/')
		
		# Get 720 MP4 video URL
		dm_hd = re.compile('"hdURL":"(.+?)"').findall(newseqeunce)
		if len(dm_hd) > 0:
			video_dict['hd'] = dm_hd[0]
			available_formats.append('hd')

		# Get 480 MP4 video URL
		dm_hq = re.compile('"hqURL":"(.+?)"').findall(newseqeunce)
		if len(dm_hq) > 0:
			video_dict['hq'] = dm_hq[0]
			available_formats.append('hq')

		# Get 360 MP4 video URL
		dm_sd = re.compile('"sdURL":"(.+?)"').findall(newseqeunce)
		if len(dm_sd) > 0:
			video_dict['sd'] = dm_sd[0]
			available_formats.append('sd')
		
		# Select video format
		for fmt in available_formats:
			if fmt in (user_config['video']['dailymotion_formats'] if 'xx' in choosen_format else choosen_format):
				video_real_url = video_dict.get(fmt) # User choice format
				choosen_format = fmt
				break
		else:
			video_real_url = video_dict.get(available_formats[0]) # Default choice format
			choosen_format = available_formats[0]

		return video_real_url, choosen_format, available_formats


if (__name__ == '__main__'):
	import sys
	client = DailyMotionBrowser()
	if (len(sys.argv) > 1):
		print ('#' * 80)
		if sys.argv[1].isdigit():
			what = int(sys.argv[1])
			print client._sections_name[what]
		else:
			what = sys.argv[1]
			print what
		print ('#' * 80)
		rss = client.search(lang='fr', what=what, max_res=1)
		for elt in rss:
			v_uri = elt._video_uri
			if v_uri:
				print 'title: ',
				print elt.title.encode('utf-8')
				print 'player_url: ',
				print v_uri
				print 'url: ',
				print client._get_flv_uri(v_uri, 'xx')
				print 'thumbnail_uri: ',
				print elt._thumbnail_uri
	else:
		for i, section_name in enumerate(client._sections_name):
			print ('#' * 80)
			print section_name
			print ('#' * 80)
			rss = client.search(lang='fr', what=i, max_res=1)
			for elt in rss:
				v_uri = elt._video_uri
				if v_uri:
					print 'title: ',
					print elt.title.encode('utf-8')
					print 'player_url: ',
					print v_uri
					print 'url: ',
					print client._get_flv_uri(v_uri, 'xx')
					print 'thumbnail_uri: ',
					print elt._thumbnail_uri
