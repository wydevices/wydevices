# -*- coding: utf-8 -*- 
#
# Description:
#
# L10N Decorators and Class Definitons
#
#
#
# Changes:
#
# 2012-05-02
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import
from pygui.config import locale_dir, user_config
from peewee.debug import GET_LOGGER
import gettext

log = GET_LOGGER(__name__)

application = 'messages'
available_languages = dict()



# Set 'lang' as current displayed language
def set_language(lang=None):
	global available_languages
	from pygui.config import user_config
	language = (user_config['base']['language'] if not lang else lang)
	iso_code = language[:2].lower()
	t = available_languages.get(iso_code)
	if t is None:
		dir_name = iso_code + '_' + iso_code.upper()
		try:
			t = gettext.translation(application, locale_dir, languages=[dir_name])
			available_languages[iso_code] = t
		except IOError:
			log.error("language '%s' not available", language)
			return False
	t.install(unicode=True, names=['ngettext'])
	return None



def init():
	gettext.install(application, locale_dir, unicode=True, names=['ngettext'])
init()
log.info(_('Internationalisation loaded.'))



def omnicode(txt):
	if isinstance(txt, unicode):
		return txt
	elif isinstance(txt, basestring):
		return unicode(txt, 'utf8', 'replace')
	return unicode(txt)



# Dict that handle (key : i18n value).
# All the values are evaluated (ie i18n'ed) at each dict access
class UnicodeDict(dict):

	def __getitem__(self, key):
		if isinstance(key, basestring) and key.startswith('raw_'):
			return dict.__getitem__(self, (key if key in self else key[4:]))
		else:
			return _(dict.__getitem__(self, key))
		return None

	def get(self, key, default=None):
		if isinstance(key, basestring) and key.startswith('raw_'):
			return dict.get(self, (key if key in self else key[4:]), default)
		else:
			return _(dict.get(self, key, default))
		return None

	# Force to use __getitem__
	def items(self):
		return [(k, self.__getitem__(k)) for k in self.keys()]



Y_M_D, D_M_Y, M_D_Y = xrange(3)
_DATE_FORMAT_MAPPING = {Y_M_D: '%Y/%m/%d',
												D_M_Y: '%d/%m/%Y',
												M_D_Y: '%m/%d/%Y'}



# Return the user-set short date format string.
def get_date_format():
	df = user_config['base']['dateformat']
	return _DATE_FORMAT_MAPPING.get(df, '%Y/%m/%d')



# Return the user-set time format string.
def get_time_format():
	return ('%H:%M' if user_config['base']['timeformat'] else '%I:%M %p')



__all__ = ['set_language', 'available_languages', 'omnicode', 'UnicodeDict', 'get_date_format', 'get_time_format', 'Y_M_D', 'D_M_Y', 'M_D_Y']
