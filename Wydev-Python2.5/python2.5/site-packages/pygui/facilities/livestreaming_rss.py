# -*- coding: utf-8 -*- 
#
# Description:
#
# Live Streaming RSS Browser Class Definitions
#
#
#
# Changes:
#
# 2012-05-13
# Initial Commit
#
# Thanks to http://community-links.googlecode.com for links.
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


import os
import re
import urllib
import urllib2
import string
import pickle
from lxml import etree
from BeautifulSoup import BeautifulStoneSoup
from pygui.window import MessageWindow

CACHE_FILE = "/etc/params/cache/live_catalog"
LIVE_XML_CATALOG = "http://community-links.googlecode.com/svn/trunk/theStreamDB.xml"



# Catalog class allow to keep data in memory.
# Browser can check catalog validity with "is_old" function.
class Catalog:

	def __init__(self, catalog):
		self.catalog = catalog
		self.revision = self.get_revision()
		return None

	def is_old(self):
		if self.revision != self.get_revision():
			return True
		else:
			return False

	def get_revision(self):
		url = 'http://community-links.googlecode.com/svn/trunk/'
		req = urllib2.Request(url)
		response = urllib2.urlopen(req)
		link=response.read()
		response.close()
		revision = re.compile('<html><head><title>(.+?)/trunk</title></head>').findall(link)[0]
		return revision



# Live Streaming Replay RSS Browser.
# Parse XML file from http://community-links.googlecode.com/ and extract informations.
class LiveStreamingRSSBrowser(object):

	catalog = None

	def live_catalog(self):
		if os.path.isfile(CACHE_FILE):
			f = open(CACHE_FILE, 'r')
			try:
				self.catalog = pickle.load(f)
			except:
				self.catalog = None
			f.close()
		else:
			self.catalog = None
		if self.catalog is None or self.catalog.is_old():
			url = urllib.urlopen( LIVE_XML_CATALOG )
			catalog_xml = url.read()
			url.close()
			try:
				channels = etree.XML(catalog_xml)
			except etree.XMLSyntaxError:
				msg_win = MessageWindow(text=_('XML file is malformed !!!\nPlease wait while BeautifulSoup fix it'), title=_('XML Error'), button=False)
				msg_win.show()
				catalog_xml = str(BeautifulStoneSoup(catalog_xml))
				try:
					msg_win.hide()
				except:
					pass
			self.catalog = Catalog( catalog_xml )
			f = open(CACHE_FILE, 'w')
			pickle.dump(self.catalog, f)
			f.close()
		return self.catalog.catalog

	def get_channels(self):
		catalog_xml = self.live_catalog()
		channels = etree.XML(catalog_xml).findall('channel')
		return [dict(title=chan.find('name').text.encode('utf-8'),
								 thumbnail=chan.find('thumbnail').text,
								 position=channels.index(chan)) for chan in channels]

	def get_channel_items(self, position):
		catalog_xml = self.live_catalog()
		channels = etree.XML(catalog_xml).findall('channel')
		channel_items = channels[position].find('items').findall('item')
		return [dict(title=chan_it.find('title').text.encode('utf-8'),
						 		 uri=chan_it.find('link').text,
						 		 thumbnail=chan_it.find('thumbnail').text) for chan_it in channel_items]

	def get_subchannels(self, position):
		catalog_xml = self.live_catalog()
		channels = etree.XML(catalog_xml).findall('channel')
		subchannels = channels[position].find('subchannels').findall('subchannel')
		return [dict(title=subchan.find('name').text.encode('utf-8'),
						 		 thumbnail=subchan.find('thumbnail').text,
								 position=subchannels.index(subchan)) for subchan in subchannels]

	def get_subchannel_items(self, position):
		catalog_xml = self.live_catalog()
		channels = etree.XML(catalog_xml).findall('channel')
		subchannels = channels[position[0]].find('subchannels').findall('subchannel')
		channel_subitems = subchannels[position[1]].find('subitems').findall('subitem')
		return [dict(title=chan_subit.find('title').text.encode('utf-8'),
						 		 uri=chan_subit.find('link').text,
						 		 thumbnail=chan_subit.find('thumbnail').text) for chan_subit in channel_subitems]

if ( __name__ == "__main__" ):
	import sys
	LiveStreaming_Data = LiveStreamingRSSBrowser()
	if (len(sys.argv) > 1):
		channel = LiveStreaming_Data.get_channels()[int(sys.argv[1])]
		print 'Channel'
		print 'Name     :', channel['title']
		print 'Thumbnail:', channel['thumbnail']
		try:
			for channel_item in LiveStreaming_Data.get_channel_items(channel['position']):
				print 'Channel Item'
				print 'Name     :', channel_item['title']
				print 'URI      :', channel_item['uri']
				print 'Thumbnail:', channel_item['thumbnail']
		except:
			pass
		try:
			for subchannel in LiveStreaming_Data.get_subchannels(channel['position']):
				print 'SubChannel'
				print 'Name     :', subchannel['title']
				print 'Thumbnail:', subchannel['thumbnail']
				for subchannel_item in LiveStreaming_Data.get_subchannel_items([channel['position'], subchannel['position']]):
					print 'SubChannel Item'
					print 'Name     :', subchannel_item['title']
					print 'URI      :', subchannel_item['uri']
					print 'Thumbnail:', subchannel_item['thumbnail']
		except:
			pass
	else:
		for channel in LiveStreaming_Data.get_channels():
			if channel['title'] == 'Information':
				print 'Information channel'
				continue
			print 'Channel'
			print 'Name     :', channel['title']
			print 'Thumbnail:', channel['thumbnail']
			try:
				for channel_item in LiveStreaming_Data.get_channel_items(channel['position']):
					print 'Channel Item'
					print 'Name     :', channel_item['title']
					print 'URI      :', channel_item['uri']
					print 'Thumbnail:', channel_item['thumbnail']
			except:
				pass
			try:
				for subchannel in LiveStreaming_Data.get_subchannels(channel['position']):
					print 'SubChannel'
					print 'Name     :', subchannel['title']
					print 'Thumbnail:', subchannel['thumbnail']
					for subchannel_item in LiveStreaming_Data.get_subchannel_items(channel['position'], subchannel['position']):
						print 'SubChannel Item'
						print 'Name     :', subchannel_item['title']
						print 'URI      :', subchannel_item['uri']
						print 'Thumbnail:', subchannel_item['thumbnail']
			except:
				pass
		
