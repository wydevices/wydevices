# -*- coding: utf-8 -*- 
#
# Description:
#
# Audio Mixer Class Definition
#
#
#
# Changes:
#
# 2011-10-31
# Initial Commit
#
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.misc_utils import MetaSingleton
from pygui.window import SoundLevelWindow
from pygui.window import MuteWindow
from peewee.notifier import Task, events_watch
from peewee.debug import GET_LOGGER
from pygui.config import HMI_BASE, user_config
from pygui.config import architecture

log = GET_LOGGER(__name__)

volume_progress_dict = [{'vol': val*0.9,  'progress': val*2 } for val in xrange(0, 51)]



# only used on x86
class FakeMixer(object):

	def __init__(self, *args, **kw):
		self._vol = 50
		self._mute = 0
		return None

	def getvolume(self):
		return (self._vol, self._vol)

	def setvolume(self, val):
		self._vol = val
		return None

	def getmute(self):
		return (self._mute, self._mute)

	def setmute(self, val):
		self._mute = val
		return None



try:
	from alsaaudio import Mixer, ALSAAudioError
except:
	log.error('ALSA not found ! using FakeMixer instead')
	Mixer = FakeMixer
	ALSAAudioError = Exception



class Mix(object):

	__metaclass__ = MetaSingleton

	def __init__(self, control='Primary', id=0, card='hw:4'):
		self._mixers = dict()
		self._limiters = dict()
		self._def_control = control
		self._def_id = id
		self._def_card = card
		if architecture == 'pc':
			self._mixers['Fake'] = FakeMixer()
			self._def_control = 'Fake'
		else:
			self.add_control(control)
		events_watch(self.handle)
		self.window = SoundLevelWindow(_('Sound level'))
		self.mute_window = MuteWindow(_('Mute'))
		self._hide_task = Task(self.window.hide)
		self._hide_mute_task = Task(self.mute_window.hide)
		self._save_task = Task(user_config.save)
		self.soft_mute_flag = 0
		self.soft_mute_prev_vol = 0
		self._fill_limiters()
		self._gain = False
		self._vol_id = user_config['sound']['volume']
		self.set_volume(self._vol_id)
		self.set_mute(user_config['sound']['mute'])
		self.set_hdmi_mute(user_config['connections']['hdmi_sound'])
		self._notification()
		return None

	def handle(self, event):
		if event.name in ('VOLUME_DOWN', 'VOLUME_UP', 'MUTE'):
			getattr(self, event.name.lower())()
		return None

	# Mandatory to control sound level.
	def _switch_gain_override(self):
		try:
			gain = Mixer('Gain Override')
			gain.setmute(0)
		except ALSAAudioError:
			gain = Mixer('Gain Override', self._def_id, self._def_card)
			gain.setmute(0)
		return None

	# Should be activated when volume reach 8192 on Primary.
	def _fill_limiters(self):
		for limiter in ('Analog Limiter', 'HDMI Limiter', 'SPDIF Limiter'):
			try:
				self._limiters[limiter] = Mixer(limiter)
			except ALSAAudioError:
				self._limiters[limiter] = Mixer(limiter, self._def_id, self._def_card)
		return None

	def _notification(self):
		self.window.mute = self.get_mute()
		self.window.progress = volume_progress_dict[self._vol_id]['progress']
		if not self._hide_task.running:
			self.window.show()
		self._hide_task.start(HMI_BASE['volumewindow_duration'])
		if self.get_mute():
			self.mute_window.show()
		else:
			self._hide_mute_task.start(0)
		return None

	def add_control(self, control):
		try:
			self._mixers[control] = Mixer(control)
		except ALSAAudioError:
			self._mixers[control] = Mixer(control, self._def_id, self._def_card)
		return None

	def switch_limiters(self, val):
		log.debug('switch limiters to: %s', val)
		for name, mix in self._limiters.iteritems():
			mix.setmute(val)
		return None

	def get_volume(self, control=None):
		if not control:
			ctrl = self._def_control
		else:
			ctrl = control
		try:
			volume = self._mixers[ctrl].getvolume()[0]
			if self.soft_mute_flag:
				volume = self.soft_mute_prev_vol
		except ALSAAudioError:
			volume = 0
		return volume

	def set_volume(self, vol_id, dummy=False, control=None):
		vol_id = min(vol_id, len(volume_progress_dict) - 1)
		vol_id = max(vol_id, 0)
		volume = volume_progress_dict[vol_id]['vol']
		log.debug('vol_id:%s volume=%s', vol_id, volume)
		if volume >= 12.5:
			self._gain = True
			log.debug('gain ON')
			self.switch_limiters(0)
		else:
			self._gain = False
			log.debug('gain OFF')
			self.switch_limiters(1)
		if control:
			self._mixers[control].setvolume(int(volume))
		else:
			for name, mix in self._mixers.iteritems():
				mix.setvolume(int(volume))
		if not dummy:
			self._vol_id = vol_id
			user_config['sound']['volume'] = self._vol_id
			self._save_task.start(1)
		return None

	def get_mute(self, control=None):
		if not control:
			ctrl = self._def_control
		else:
			ctrl = control
		try:
			mute = self._mixers[ctrl].getmute()[0]
		except ALSAAudioError:
			mute = self.soft_mute_flag
		return mute

	def _soft_mute(self, mute):
		if mute and not self.soft_mute_flag:
			self.soft_mute_prev_vol = self._vol_id
			self.set_volume(0, dummy=True)
			self.soft_mute_flag = 1
		elif not mute and self.soft_mute_flag:
			self.set_volume(self.soft_mute_prev_vol)
			self.soft_mute_flag = 0
		return None

	def set_mute(self, mute, control=None):
		def secure_mute(mix, mute):
			try:
				mix.setmute(mute)
			except ALSAAudioError:
				self._soft_mute(mute)
			return None

		if control:
			secure_mute(self._mixers[control], mute)
		else:
			for name, mix in self._mixers.iteritems():
				secure_mute(mix, mute)
		user_config['sound']['mute'] = mute
		self._save_task.start(1)
		return None

	def set_hdmi_mute(self, mute):
		try:
			mix = Mixer('HDMI')
			mix.setmute(mute)
			log.debug('Set HDMI sound control to %s', mute)
			return True
		except ALSAAudioError, e:
			log.error('Impossible to set HDMI sound mute to %s <%s>', mute, e)
			return False

	def mute(self, control=None):
		current = self.get_mute(control)
		if current:
			new_mute = 0
		else:
			new_mute = 1
		log.debug('Volume Mute -> %s', new_mute)
		self.set_mute(new_mute, control)
		self._notification()
		return None

	toggle_mute = mute

	def volume_up(self, val=3, control=None):
		new_vol_id = self._vol_id + 1
		log.debug('Volume UP -> %s', new_vol_id)
		self.set_mute(0, control)
		self.set_volume(new_vol_id, control)
		self._notification()
		return None

	def volume_down(self, val=3, control=None):
		new_vol_id = self._vol_id - 1
		log.debug('Volume DOWN -> %s', new_vol_id)
		self.set_mute(0, control)
		self.set_volume(new_vol_id, control)
		self._notification()
		return None
