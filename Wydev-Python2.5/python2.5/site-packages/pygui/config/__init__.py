# -*- coding: utf-8 -*- 
#
# Description:
#
# WyGui Configuration Class & Vars Definitions
#
#
#
# Changes:
#
# 2011-10-02
# Initial Commit
#
# 2011-10-18
# Add youtube_languages and youtube_formats to HMI_VIDEO.
# Add screensaver_text and screensaver_text_type to user_config[power].
#
# 2011-11-18
# Move "theme_engine" and "use_serialized_theme" to user_config.
# This to allow to set them from "Parameters Menu"
#
# 2011-11-19
# Add dailymotion_languages and dailymotion_formats to HMI_VIDEO.
#
# 2011-12-22
# Add "network_sleep" to user_config[power].
# Allow to switch off network with power button.
#
# 2012-04-10
# Add "hdmi_cec" to user_config[advanced].
# Allow to switch on/off HDMI-CEC communication.
#
# 2012-04-20
# Add "subtitles_size" to user_config[video].
# Allow to set subtitles size in video with hand menu.
#
# 2012-04-29
# Add "tvreplay_hd" to user_config[video].
# Allow to select HD video on TVReplay.
#
# 2012-05-08
# Add "youtube_refresh_rate" to user_config[video].
# Allow to set refresh rate of youtube content.
# Add "dailymotion_refresh_rate" to user_config[video].
# Allow to set refresh rate of dailymotion content.
# Add "tvreplay_refresh_rate" to user_config[video].
# Allow to set refresh rate of tvreplay content.
#
# 2012-11-15
# Add "preview_folder" to user_config[advanced].
# Allow to switch on/off folder preview.
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import os
import sys
from peewee.debug import GET_LOGGER
from peewee.version import wyplay_version
import simplejson as json


log = GET_LOGGER(__name__)
version = wyplay_version()

if version == 'N/A':
	DEBUG = 1
else:
	DEBUG = 0

TMP_DIR = os.getenv('TEMP', '/tmp')
no_PLAYERS = False
no_DBUS = False
fast_pushmenu = True
navigator_cache = False
socket_timeout = 20
themes_dir = '/wymedia/usr/share/pygui/skins/'
locale_dir = '/wymedia/usr/share/pygui/locale/'
fps = 60
key_repeat = 3
key_q_size = 5
block_navigator = True
horizontal_selector = False
add_tv_info_banner_idle_events = False
home_order = ['*tv', 'audio', 'video_image', 'hdmi_tv1', 'hdmi_tv2', 'image', 'video', 'net_services', 'multiverse', 'parameters', 'test_menu']
display_width, display_height = (1280, 720)
default_language = None
admin_age = 100
url_list = [('Google', 'http://www.google.com'), ('WyPlay', 'http://www.wyplay.com'), ('Le Monde', 'http:www.lemonde.fr'), ('Sofinnova', 'http://www.sofinnova.fr')]
resume_video = True
resume_dvd = True
cvbs_resolution = {'pal': (720, 576, 1, 50), 'ntsc': (720, 480, 1, 59)}
random_events_sample = ('LEFT', 'RIGHT', 'UP', 'DOWN', 'HOME', 'MARKER')
random_events_duo = (('LEFT', 'RIGHT'), ('UP', 'DOWN'), ('MARKER', 'MARKER'))
output_driver = 'havana'
architecture = 'stb7100'
code_coverage = False

if False:
	code_profiler = not code_coverage
else:
	code_profiler = False

shutdown = True


# This class provides a collections of available plugins
# that can be loaded to modify the wybox's behavior.
# Plugins's naming convention is '(universe|module).value
class PluginSet(set):

	__module__=__name__

	def get(self, prefix=None):
		if prefix is None:
			return list(self)
		ret = set()
		for plug in self:
			if plug.startswith(prefix):
				root, sub = plug.split('.', 1)
				ret.add(sub)
		return ret

plugins = PluginSet(('tv',
										 'acquisition',
										 'dvd',
										 'wymedia',
										 'wyvas',
										 'persistence',
										 'youtube',
										 'dailymotion',
										 'popup_blocker',
										 'wifi',
										 'input.lirc',
										 'home.tv',
										 'home.acquisition',
										 'home.audio',
										 'home.video_image',
										 'home.parameters',
										 'hand_actions.navigator',
										 'hand_actions.marker_navigator',
										 'hand_actions.player',
										 'hand_actions.dvd_player',
										 'hand_actions.tv_player',
										 'hand_actions.video_image_thumbnail',
										 'hand_actions.webbrowser',
										 'hand_actions.youtube',
										 'hand_actions.dailymotion',
										 'gui_engine.mediamenu',
										 'gui_engine.menu',
										 'gui_engine.setupparameters',
										 'gui_engine.tv',
										 'gui_engine.web',
										 'gui_engine.window',
										 'listing.fixed',
										 'listing.hybrid',
										 'listing.default',
										 'parameters.1.tv',
										 'parameters.2.videophoto',
										 'parameters.3.generalsetup',
										 'parameters.4.connections',
										 'parameters.5.network',
										 'parameters.6.advanced',
										 'parameters.7.version'))

user_config_dir = '/etc/'
rw_dir = '/etc/params/'

HMI_MUSIC = {'lazy_selection': 1.0,
						 'forward': [2, 4, 6, 10],
						 'backward': [-2, -4, -6, -10],
						 'codecs': ['wav', 'mp3', 'ogg'],
						 'rates': [128, 192, 256, 320],
						 'left': -5,
						 'right': 5}
						 	
HMI_VIDEO = {'lazy_selection': 0.5,
						 'languages': ['fr', 'es', 'it', 'en', 'de', 'pt', 'nl'],
						 'youtube_languages': ['fr', 'es', 'it', 'en', 'de', 'pt', 'nl'],
						 'youtube_formats' : [38, 37, 22, 18, 13, 17],
						 'dailymotion_languages': ['', 'fr', 'es', 'it', 'en', 'de', 'pt', 'nl'],
						 'dailymotion_formats' : ['hd', 'hq', 'sd'],
						 'aspect_ratio': [0, 1],
						 'channels': [1, 2, 3, 6, 7],
						 'channel': 2,
						 'idle_threshold': 8,
						 'forward': [2, 3, 6, 12, 25, 50, 100, 300],
						 'backward': [-2, -3, -6, -12, -25, -50, -100, -300],
						 'slow': [0.20000000000000001, 0.5, 0.80000000000000004],
						 'reverse_slow': [0.0],
						 'seek_percent': 0.10000000000000001,
						 'seek_period': 72}
						 	
HMI_PHOTO = {'lazy_selection': 0.5,
						 'transitions': ['no_transition', 'fade_to_black', 'fade', 'top_slide'],
						 'slideshow': [15.0, 10.0, 5.0, 3.0],
						 'jump': 5,
						 'thumbnail_row_length': 5}
						 	
HMI_BASE = {'preview_delay': 0.5,
						'helpbanner_duration': 5.0,
						'navigator_listing_delay': 0.20000000000000001,
						'search_navigator_delay': 1.3,
						'volumewindow_duration': 2.0,
						'error_signal_delay': 1.0,
						'keyboard_truncate_prefix': '...',
						'osd_languages': ['fr', 'es', 'it', 'en', 'de', 'pt', 'nl'],
						'country': ['fr', 'de', 'zh', 'es', 'pt', 'en', 'nl'],
						'rcu_block_button0': 3.0,
						'rcu_device_poll_interval': 0.014999999999999999,
						'rcu_default_margin': 10,
						'rcu_move_threshold': 15,
						'rcu_gesture_threshold': 15.0,
						'rcu_longclic_threshold': 7,
						'rcu_buttons_repeat_delay': 0.14999999999999999,
						'rcu_buttons_repeat_timeout': 0.14000000000000001,
						'rcu_move_repeat_delay': 0.14999999999999999,
						'rcu_move_repeat_timeout': 0.14000000000000001}
							
HMI_TV = {'banner_period': 5,
					'record_banner_period': 5,
					'record_duration_step': 1800,
					'records_duration': [180],
					'max_record_duration': 360,
					'epg_margins': [0, 5, 10],
					'timeshift_length': [30, 60, 120, 180],
					'record_time': 7200,
					'zap_time': 1.0,
					'invert_y_axis': 0}
						
HMI_VIDEO['forward'] = [2, 8, 25, 100, 300]
HMI_VIDEO['backward'] = [-2, -8, -25, -100, -300]

log.debug('HMI dicts created')

restore_previous_config = True

default_conf = {'config_version': 18,
								'connections': {'resolution': '1280:720:0:50',
																'active_device': 'hdmi',
																'composite_output': 'pal',
																'component_output': 'rgb',
																'hdmi_sound': False,
																'auto_frame_rate': False,
																'spdif_surround': False,
																'scart1_io_mode': 'out',
																'scart1_in_mode': 'composite',
																'scart1_out_mode': 'rgb',
																'scart2_io_mode': 'in',
																'scart2_in_mode': 'rgb',
																'scart2_out_mode': 's-video'},
								'video':			 {'language': HMI_VIDEO['languages'][0],
																'youtube_languages' : HMI_VIDEO['youtube_languages'][0],
																'youtube_formats' : HMI_VIDEO['youtube_formats'][0],
																'youtube_refresh_rate' : 5,
																'dailymotion_languages' : HMI_VIDEO['dailymotion_languages'][0],
																'dailymotion_formats' : HMI_VIDEO['dailymotion_formats'][0],
																'dailymotion_refresh_rate' : 5,
																'aspect_ratio': HMI_VIDEO['aspect_ratio'][0],
																'display_format': 'letter_box',
																'channel': HMI_VIDEO['channels'][0],
																'dvdmenulanguage': HMI_VIDEO['languages'][0],
																'dvdmovielanguage': HMI_VIDEO['languages'][0],
																'dvdsubtitlelanguage': HMI_VIDEO['languages'][0],
																'dvdbrowse': False,
																'dvdautolaunch': False,
																'dvdprotectionlevel': 0,
																'dvdchannel': HMI_VIDEO['channels'][0],
																'subtitlesfiles': False,
																'subtitles_size' : 35,
																'tvreplay_hd' : True,
																'tvreplay_refresh_rate' : 60},
								'music':			 {'ripcodec': HMI_MUSIC['codecs'][0],
																'riprate': HMI_MUSIC['rates'][1],
																'autorip': False},
								'photo':			 {'filename': True,
																'zoom': False,
																'transition': HMI_PHOTO['transitions'][0],
																'period': HMI_PHOTO['slideshow'][0]},
																'tv': {'record_duration': HMI_TV['records_duration'][0],
																'max_record_duration': HMI_TV['max_record_duration'],
																'epg_margin': HMI_TV['epg_margins'][1],
																'timeshift_length': HMI_TV['timeshift_length'][-1],
																'lnb_high_voltage': False,
																'last_scan_time': 0,
																'scan_with_scrambled': True,
																'last_channel_index': None,
																'last_favorite_name': u'all_channels_list'},
								'base': 			 {'help_banner': 1,
																'theme_engine': 'polo_1337',
																'use_serialized_theme': True,
																'country': HMI_BASE['country'][0],
																'language': default_language or 'en',
																'timeupdatemode': 3,
																'timeformat': 1,
																'dateformat': 0,
																'timezone': 'Europe/Paris',
																'firstboot': True},
								'security': 	 {'secretcode': None,
																'parent_mode': True,
																'parental_control': False,
																'show_hidden': True,
																'question': None,
																'answer': None,
																'maturity_rating': 0},
								'power':			 {'network_sleep' : False,
																'screensaver_type': 'image',
																'screensaver_text_type': 'time',
																'screensaver_text': 'I Save Your Screen',
																'screensaver_threshold': 600},
								'sound':			 {'volume': 10,
																'mute': 0},
								'network':		 {'type': 'wired',
																'iface': 'eth0',
																'upnp': True,
																'wifi_name': None,
																'wifi_security': None,
																'wifi_key': None},
								'advanced': 	 {'hdmi_cec': True,
																'preview_folder': True,
																'start_on_demo_mode': False,
																'last_universe': None,
																'demo_mode': False},
								'net':				 {'login': None,
																'password': None}}
									
restricted_env = {'__builtins__': None,
									'plugins': plugins,
									'True': True,
									'False': False,
									'HMI_BASE': HMI_BASE,
									'HMI_VIDEO': HMI_VIDEO,
									'HMI_MUSIC': HMI_MUSIC,
									'HMI_PHOTO': HMI_PHOTO,
									'HMI_TV': HMI_TV}

try:
	user_configuration = os.path.join(user_config_dir, 'local_conf.py')
	_loc = {}
	execfile(user_configuration, restricted_env, _loc)
	locals().update(_loc)
	log.debug('user configuration file : %s' % user_configuration)
except IOError:
	log.info('No local configuration found.')

persistent_config_path = '/etc/params/wy_config'

import platform
if platform.machine() != 'sh4':
	output_driver = 'dummy'
	architecture = 'pc'
	plugins.discard('persistence')


class _SubDict(dict):

	__module__=__name__

	def __init__(self, values, key, parent):
		dict.__init__(self, values)
		self.key = key
		self.parent = parent
		return None

	def __setitem__(self, key, value):
		if key == 'resolution' and self.key == 'connections' and isinstance(value, (tuple, list)):
			value = ':'.join(map(str,value))
		dict.__setitem__(self, key, value)
		if self.parent.notify_subs:
			self.parent.notify_change(self.key, key, value)
		return None

	def __getitem__(self, key):
		if key == 'resolution' and self.key == 'connections':
			return tuple(map(int, dict.__getitem__(self, key).split(':')))
		return dict.__getitem__(self, key)		



# User configuration storage class. Used to store preferences that
# should be restored after relaunching pygui.
# 
# This class behaves like a dict, except that whenever one of its mappings
# is modified, it writes itself to disk.
# 
# You should not use mutable values -- if you do, there's no guarantee that
# changes made to them will be in fact written to disk. If you want to
# ensure that changes are written to disk, use the save() method.
# 
# 
# /!\ Important note to developers: /!\ There is now a config_version key
# at the UserConfig's root. Whenever you change the structure of UserConfig,
# (i.e. make changes that could cause the application to crash if UserConfig
# got overwritten with an older version), please increase config_version by one.
# 
# This will cause pygui to erase the now-obsolete version of the file and revert
# to default settings upon launch (the new settings will, of course, be saved).
# 
# Hopefully this will save us a lot of grief from users who update pygui
# without reading their e-mails. Won't prevent a few problems from happening,
# though (the whole UserConfig thing is, after all, a quick & dirty hack).
    
class UserConfig(object):

	__module__=__name__

	def __init__(self, conf):
		conf = (conf if conf is not None else [])
		self.diff_dict = dict(config_version=conf.get('config_version', -1))
		self.subs_dict = dict()
		self.notify_subs = False
		for key, val in conf.iteritems():
			self.subs_dict[key] = (_SubDict(val, key, self) if isinstance(val, dict) else val)
		self.notify_subs = True
		return None
		
	def __getitem__(self, key):
		return self.subs_dict[key]
		
	def get(self, key, default):
		return self.subs_dict.get(key, default)
		
	# When a sub dict has been modified, this object is notified in order to update the diff dict
	def notify_change(self, id, key, value):
		if default_conf[id][key] != value:
			try:
				self.diff_dict[id][key] = value
			except KeyError:
				self.diff_dict[id] = {key: value}
		else:
			try:
				del self.diff_dict[id][key]
			except KeyError:
				pass
			else:
				if not self.diff_dict[id]:
					del self.diff_dict[id]
		self.notify_subs = False
		self.subs_dict[id][key] = value
		self.notify_subs = True
		return None

	def update(self, E, **F):
		self.notify_subs = False
		for key, val in E.iteritems():
			if isinstance( self.subs_dict[key], dict):
				self.subs_dict[key].update(val)		
		for key, val in F.iteritems():
			if isinstance( self.subs_dict[key], dict):
				self.subs_dict[key].update(val)		
		self.notify_subs = True
		self.diff_dict.update(E, **F)
		self.save()
		return None
		
	def save(self):
		if 'persistence' in plugins and self.diff_dict:
			stream = open(persistent_config_path, 'wb')
			json.dump(self.diff_dict, stream)
			stream.flush()
			os.fsync(stream.fileno())
			stream.close()
		return None
		

user_config = UserConfig(default_conf)

if 'persistence' in plugins:
	try:
		rw_config = json.load(open(persistent_config_path))
		if user_config['config_version'] == rw_config.get('config_version', -1):
			user_config.update(rw_config)
			log.info('System configuration from a previous session found and loaded.')
		else:
			log.warn('Previous system configuration found with an incompatible schema. Discarding it.')
			os.unlink(persistent_config_path)
	except Exception:
		log.warn('Unable to load persistent system configuration. Using default values.')
else:
	log.warn('Configuration persistence disabled. Using default values.')

# Little hack to set theme engine on first boot
if 'polo_1337' in user_config['base']['theme_engine']:
	try:
		fd = os.popen('strings /dev/mtd2 | grep MN | cut -d= -f2')
		model = fd.read()
		fd.close()
		if 'Grab\'n\'GO  Media Titan' in model:
			user_config['base']['theme_engine'] = 'mediatitan'
		elif 'Grab\'n\'GO Wireless Media Titan' in model:
			user_config['base']['theme_engine'] = 'mediatitan'
		elif 'MediaTec TNT' in model:
			user_config['base']['theme_engine'] = 'mediatec'
		elif 'Wyplayer' in model:
			user_config['base']['theme_engine'] = 'wybox'
		elif 'ZoltarTV' in model:
			user_config['base']['theme_engine'] = 'zoltartv'
		else:
			user_config['base']['theme_engine'] = 'wybox'
	except:
		user_config['base']['theme_engine'] = 'wybox'
	user_config.save()
