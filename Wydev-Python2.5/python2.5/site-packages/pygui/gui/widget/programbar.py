# -*- coding: utf-8 -*- 
#
# Description:
#
# Program Bar Widget Definition
#
#
#
# Changes:
#
# 2014-03-25
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from wyvas import Container
from peewee.debug import GET_LOGGER, DEBUG
from peewee.formatters import int_to_percent

log = GET_LOGGER(__name__)


# A Program bar display a progress bar
# Showing the part of program which has been already buffered (before direct time).
# The left side of program bar represent the begin of the program, and the right side the end of the program.
# And one other small progress bar showing the part of timeshifted part of this program
# If this bar is undisplayed, player won't be able to reread this part of timeshift.
# An indicator, is moved over the live time position.
class Programbar(Container):

	def __init__(self):
		Container.__init__(self)
		self._bar_name = None
		self._indicator_name = None
		self._timeshift_bar_name = None
		self._live = 0
		self._direct = 100
		self._timeshift_begin = 0
		self._timeshift_end = 0
		self._program_begin = 0
		self._program_end = 0
		self._duration = 0
		return None

	def compute_pos(self, val):
		if self._duration == 0:
			return 0
		res = min(100, max(0, (val - self._program_begin) * 100.0 / self._duration))
		return res

	def compute_bar_width(self):
		return self.compute_pos(self._direct)

	def compute_live_pos(self):
		return self.compute_pos(self._live)

	def compute_timeshift_begin(self):
		return self.compute_pos(self._timeshift_begin)

	def compute_timeshift_end(self):
		return self.compute_pos(self._timeshift_end)

	def _set_bar(self):
		for bar in self.get_list_obj_by_name(self._bar_name):
			new_size = self.compute_bar_width()
			bar.resize(width=int_to_percent(new_size))
		return None

	def _set_indicator(self):
		for indicator in self.get_list_obj_by_name(self._indicator_name):
			live_pos = self.compute_live_pos()
			indicator.move(hcenter=int_to_percent(live_pos))
		return None

	def _set_timeshift(self):
		for timeshift_bar in self.get_list_obj_by_name(self._timeshift_bar_name):
			new_pos = self.compute_timeshift_begin()
			new_size = self.compute_timeshift_end() - new_pos
			timeshift_bar.move(left=int_to_percent(new_pos))
			timeshift_bar.resize(width=int_to_percent(new_size))
		return None

	def update(self, signal, sender, value):
		self.set(**value)
		return None

	initialize = update

	# All values must ben given in seconds.
	# - live is the emission time watching on screen
	# - direct is current time
	# - timeshift_begin is the time where timeshift begin
	# - timeshift_end is the time where timeshift stop (actually is the same than direct time)
	# - program _begin is the time where program start
	# - program_end is time where program ends
	def set(self, live=None, direct=None, timeshift_begin=None, program_begin=None, timeshift_end=None, program_end=None):
		try:
			timeshift_has_changed = False
			program_has_changed = False
			if program_begin is not None:
				self._program_begin = program_begin   
			if program_end is not None:
				self._program_end = program_end
			self._duration = self._program_end - self._program_begin
			if timeshift_begin is not None:
				self._timeshift_begin = timeshift_begin
			else:
				self._timeshift_begin = 0
			if timeshift_end is not None:
				self._timeshift_end = timeshift_end
			else:
				self._timeshift_end = 0
			if direct is not None:
				self._direct = direct
			if live is not None:
				self._live = live
			self._set_bar()
			self._set_timeshift()
			self._set_indicator()
		except:
			DEBUG()
		return None

	def set_bar(self, bar=None):
		self._bar_name = bar
		return None

	def set_indicator(self, indicator=None):
		self._indicator_name = indicator
		return None

	def set_live(self, live=None):
		self._live = live
		return None

	def set_direct(self, direct=None):
		self._direct = direct
		return None

	def set_timeshift(self, timeshift=None):
		self._timeshift_bar_name = timeshift
		return None



class ProgramTimeShiftBar(Programbar):
	pass

class ProgramRecordTimeShiftBar(ProgramTimeShiftBar):

	def __init__(self):
		ProgramTimeShiftBar.__init__(self)
		self._record_bar_name = ''
		self._record_begin = 0
		self._record_end = 0
		return None

	def set_record(self, record=None):
		self._record_bar_name = record
		return None

	def set(self, live=None, direct=None, timeshift_begin=None, program_begin=None, timeshift_end=None, program_end=None, record_begin=None, record_end=None):
		ProgramTimeShiftBar.set(self, live=live, direct=direct, timeshift_begin=timeshift_begin, program_begin=program_begin, timeshift_end=timeshift_end, program_end=program_end)
		if record_begin is not None:
			self._record_begin = record_begin
		else:
			self._record_begin = 0
		if record_end is not None:
			self._record_end = record_end
		else:
			self._record_end = 0
		self._set_record()
		return None

	def compute_record_begin(self):
		return self.compute_pos(self._record_begin)

	def compute_record_end(self):
		return self.compute_pos(self._record_end)

	def _set_record(self):
		for record_bar in self.get_list_obj_by_name(self._record_bar_name):
			new_pos = self.compute_record_begin()
			new_size = self.compute_record_end() - new_pos
			width = min(105 - new_pos, new_size)
			record_bar.move(left=int_to_percent(round(new_pos)))
			record_bar.resize(width=int_to_percent(round(width)))
		return None
