# -*- coding: utf-8 -*- 
#
# Description:
#
# Clock widget Definition
#
#
#
# Changes:
#
# 2014-03-25
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from time import time, strftime, localtime
from pygui.gui.widget.textblock import TextBlock
from pygui.facilities.l10n import get_date_format, get_time_format
from peewee.notifier import global_timer


# A simple clock widget.
# It registers to a global timer and set time every time the tick goes off.
# 
# The clock's format can be customized through the format_string attribute,
# which is used as an argument to the time.strftime() function (see its
# docs at http://docs.python.org/lib/module-time.html).
class Clock(TextBlock):

	shared_name = 'clock'
	global_format = '%time'
	time_format = get_time_format()
	date_format = get_date_format()

	def __init__(self, *args, **kwargs):
		TextBlock.__init__(self, *args, **kwargs)
		global_timer.register_callback('clock', self._update)
		return None

	def update(self, signal, sender, *args, **kwargs):
		if kwargs:
			self.time_format = kwargs.get('time_format', self.time_format)
			self.global_format = kwargs.get('global_format', self.global_format)
			self.date_format = kwargs.get('date_format', self.date_format)
			if sender == Clock.shared_name:
				Clock.time_format = kwargs.get('time_format', Clock.time_format)
				Clock.global_format = kwargs.get('global_format', Clock.global_format)
				Clock.date_format = kwargs.get('date_format', Clock.date_format)
		return None

	initialize = update

	# Change the Clock's time format string.
	def set_time_format(self, time_format):
		self.time_format = time_format
		return None

	# Change the Clock's date format string.
	def set_date_format(self, date_format):
		self.date_format = date_format
		return None

	# Change the Clock's global format string, ie if time and/or date is displayed
	def set_global_format(self, global_format):
		self.global_format = global_format
		return None

	def _update(self, timestamp):
		format = self.global_format.replace('%time', self.time_format).replace('%date', self.date_format)
		self.set_text(strftime(format, localtime(timestamp)))
		return None

	def clear(self):
		global_timer.unregister_callback('clock', self._update)
		TextBlock.clear(self)
		return None
