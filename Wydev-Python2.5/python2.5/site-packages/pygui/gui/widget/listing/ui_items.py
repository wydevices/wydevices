# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definition of User Interface Items
#
#
#
# Changes:
#
# 2014-03-24
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from os.path import exists, join, isfile
from peewee.misc_utils import late_property
from peewee.debug import GET_LOGGER
from wyvas import Image, Container
import pygui.config as config

log = GET_LOGGER(__name__)


class UIItem(object):

	__slots__ = ['_selected', '_marked', '_position', '_edited', 'widget', 'style', '_not_selected_widget', '_selected_widget', '_selected_kwargs', '_not_selected_kwargs']

	def __init__(self, style):
		self.style = style
		self._selected_kwargs = dict(vcenter='50%', hcenter='50%')
		self._not_selected_kwargs = dict(vcenter='50%', hcenter='50%')
		self._not_selected_widget, self._selected_widget = self._create()
		self.widget = Container()
		self.widget.add_child(self._not_selected_widget, name='item', visible=False, **self._not_selected_kwargs)
		self.widget.add_child(self._selected_widget, name='selected_item', visible=False, **self._selected_kwargs)
		self._create_marker()
		self._selected = False
		self._marked = False
		self._position = None
		self._edited = False
		return None

	# Reset the UI item to reflect an (other) item
	def reset(self, item, selected, position=None):
		if item is None:
			log.warn('Item is None -- calling destroy() instead.')
			return self.destroy()
		self._set_selected(selected, animate=False)
		self.set_marked(item.is_marked(), animate=False)
		self._position = position
		self._set_edited(False, animate=False)
		return None

	active_widget = property((lambda self: self._selected_widget if self._selected and self._selected_widget else self._not_selected_widget), doc='Widget currently visible (selected or not)')

	def fade_in(self):
		aw = self.active_widget
		aw._end_callback = None
		duration = self.style['duration']
		aw.animate('color', a=255, duration=duration)
		if self._marked:
			marker = self.widget.get_obj_by_name('marker')
			marker._end_callback = None
			marker.animate('color', a=255, duration=duration)
			marker.show()
		return None

	def fade_out(self):
		aw = self.active_widget
		aw._end_callback = None
		duration = self.style['duration']
		aw.animate('color', a=0, duration=duration, end_callback=aw.hide)
		marker = self.widget.get_obj_by_name('marker')
		marker.animate('color', a=0, duration=duration, end_callback=marker.hide)
		return None

	def destroy(self):
		self.set_marked(False, animate=False)
		self.widget.hide()
		self._selected = False
		self._position = None
		return None

	# Function adding some widgets to self.widgets (if necessary), called only once
	def _create_marker(self):
		path = self.style['marker_image']
		if path is not None and exists(path):
			marker = Image(path)
		else:
			marker = Image(path, config.themes_dir + '/wybox/icons/mimetypes/')
		marker_offset = self.style['marker_offset']
		self.widget.add_child(marker, name='marker', aspect=0, visible=False, width='0%', height=self.style['marker_size'][1], top=marker_offset[1], left=marker_offset[0])
		return None

	def mark(self, animate):
		marker = self.widget.get_obj_by_name('marker')
		marker._end_callback = None
		duration = self.style['duration'] if animate else 0
		marker.show()
		marker.animate('size', width=self.style['marker_size'][0], duration=duration)
		marker.animate('color', a=255, duration=duration)
		return None

	def unmark(self, animate):
		marker = self.widget.get_obj_by_name('marker')
		marker._end_callback = None
		duration = self.style['duration'] if animate else 0
		marker.animate('size', width='1%', duration=duration)
		marker.animate('color', a=0, duration=duration, end_callback=marker.hide)
		return None

	def get_marked(self):
		return self._marked

	def set_marked(self, val, animate=True):
		if self._marked != val:
			self._marked = bool(val)
			if val:
				self.mark(animate)
			else:
				self.unmark(animate)
		return None

	marked = property(get_marked, set_marked, doc='Set the marker status on this item')
	del get_marked

	def _set_selected(self, selected, animate=True):
		self._selected = selected
		marker = self.widget.get_obj_by_name('marker')
		if selected:
			to_show = self._selected_widget
			to_hide = self._not_selected_widget
			marker.load(self.style['selected_marker_image'])
		else:
			to_show = self._not_selected_widget
			to_hide = self._selected_widget
			marker.load(self.style['marker_image'])
		to_hide.hide()
		to_show.show()
		return None

	def _get_selected(self):
		return self._selected

	selected = late_property(_get_selected, _set_selected, doc='Set the selected status on this item')

	def set_position(self, position):
		self._position = position
		return None

	# Internal method, useful for items with image.
	def _get_images_paths(self, item):
		root = join(self.style['repository'], '%s' % item.display_type)
		extension = self.style['extension']
		def check_concat(suf):
			_name = root + suf
			for ext in extension:
				name = _name + ext
				if isfile(name):
					return name
			log.debug("%s doesn't exist", name)
			return None
		return [check_concat(suf) for suf in ('.', '_selected.')]

	def _set_edited(self, edited, animate=True):
		if self._edited == edited:
			return None
		self._edited = edited
		if edited:
			move = '%d%%' % int(50 + self.style['edit_offset'])
		else:
			move = '50%'
		duration = self.style['duration'] if animate else 0
		self._selected_widget.animate('move', duration=duration, hcenter=move)
		self._not_selected_widget.animate('move', duration=duration, hcenter=move)
		return None

	def _get_edited(self):
		return self._edited

	edited = late_property(_get_edited, _set_edited)
