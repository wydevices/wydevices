# -*- coding: utf-8 -*- 
#
# Description:
#
# Gui Widget Listing Style Fixed Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import, with_statement

__all__ = ['FixedListing']

from pygui.gui.widget.listing.core import GenericListing
from peewee.notifier import sched, Task
from peewee.debug import GET_LOGGER
from wyvas import render_lock

log = GET_LOGGER(__name__)


# List where selected element it at a fixed position
class FixedListing(GenericListing):

	def create_content(self):
		if self._initialized:
			return None
		self._initialized = True
		self._last_timestamp = 0
		sel_task = Task(self._fix_selected)
		sel_task.delay = self.duration * 2
		sel_task._considered_idle = True
		self._schedule_selected = sel_task.start
		start = self.menu_list.selected_pos - self._selected
		GenericListing._create_content(self, start, self.style_name[:-6])
		return None

	def do_reset(self, position=None, focus=None):
		ml = self.menu_list
		il = self.item_list
		pl = self.positions_list
		start = ml.selected_pos - self._selected
		end = start + len(pl)
		len_ml = len(ml)
		selected = ml.selected
		menu_list = [None] * max(0, -start) + ml[max(0, start):end] + [None] * max(0, end - len_ml)
		if self._cyclic and len_ml > 2:
			if start < 0:
				menu_list[0:-start] = ml[len_ml + start:]
			if end > len_ml:
				diff = end - len_ml
				menu_list[-diff:] = ml[0:diff]
		if position is not None and position >= 0:
			menu_item = ml[position]
			ui_item = il[position - il.start]
			if menu_item is None:
				ui_item.destroy()
			else:
				ui_item.reset(menu_item, menu_item is selected, position=position + 1)
		else:
			for i, pos in enumerate(map(None, pl, il, menu_list)):
				ui_item.widget.animate_stop()
				pos.put(ui_item)
				if menu_item is None:
					ui_item.destroy()
				else:
					ui_item.reset(menu_item, menu_item is selected, position=start + i + 1)
			il.selected = ml.selected_pos
			il.start = start
			il.end = end
			self._hidden_item.destroy()
		self._refresh_more_items()
		if self._bar is not None:
			if len_ml and il.selected >= 0:
				self._bar.show()
			else:
				self._bar.hide()
		if self._edited:
			self._edited = False
			self.do_edit(True)
		return None

	# Update the listing widget's selection or move its focus point.
	# 
	# @param position: The selected item's index, or -1 to deselect.
	# @param focus: The index to shift the focus point to, or
	#     None to keep it at the selected item.
	# 
	# Note that every time position is supplied and not focus, the
	# focus point is automatically reset to the selected item.
	def do_update(self, position, focus=None):
		il = self.item_list
		ml = self.menu_list
		if focus is None:
			if ml.selected is None or il.selected == position:
				return True
			focus = position
		previous_focus = il.start + self._selected
		move = focus - previous_focus
		ts = sched.ts
		duration = max(0.001, min(self.duration, ts - self._last_timestamp - 0.12))
		self._last_timestamp = ts
		if il[self._selected].selected:
			il[self._selected].selected = False
		self._schedule_selected()
		scroll_move = move
		if self._cyclic:
			len_ml = len(ml)
			if len_ml > 2 and abs(move) + 1 == len_ml:
				if move > 0:
					scroll_move = -1
				else:
					scroll_move = 1
		GenericListing._scroll(self, scroll_move, duration, None)
		il.start += move
		il.end += move
		il.selected = position
		self._refresh_more_items()
		if self._bar is not None:
			if len(ml) and il.selected >= 0:
				self._bar.show()
			else:
				self._bar.hide()
		return None

	def _fix_selected(self):
		if self.item_list.selected != -1:
			self.item_list[self._selected].selected = True
		return None

	def do_remove(self, position):
		il = self.item_list
		ml = self.menu_list
		sel_index = il.selected
		if sel_index < position:
			scroll_up = True
		else:
			scroll_up = ml.selected_pos == sel_index
		GenericListing._remove_item(self, position, scroll_up)
		il.selected = ml.selected_pos
		il.start = ml.selected_pos - self._selected
		il.end = il.start + len(il)
		GenericListing._refresh_more_items(self)
		il[self._selected].selected = True
		return None

	def do_swap(self, i1, i2):
		if not GenericListing._swap_items(self, i1, i2):
			return self.do_reset()
		il = self.item_list
		ml = self.menu_list
		if i1 == il.selected:
			GenericListing._scroll(self, i2 - i1, self.duration, ml.selected)
		elif i2 == il.selected:
			GenericListing._scroll(self, i1 - i2, self.duration, ml.selected)
		il.selected = ml.selected_pos
		il.start = ml.selected_pos - self._selected
		il.end = il.start + len(il)
		return None
