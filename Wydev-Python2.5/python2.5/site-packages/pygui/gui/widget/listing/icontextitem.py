# -*- coding: utf-8 -*- 
#
# Description:
#
# Gui Widget Listing Icon Text Item Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import
from pygui.gui.widget.listing.ui_items import UIItem
try:
	from wyvas import __version__ as wyvas_version
	if 'cython' not in wyvas_version:
		raise ImportError
	from wyvas import Image, TextBlock, Container
except ImportError:
	from pygui.gui.widget import Image, TextBlock, Container
from peewee.debug import GET_LOGGER
log = GET_LOGGER(__name__)


class IconTextItem(UIItem):

	__slots__ = ['_selected', '_marked', '_position', '_edited', 'widget', 'style', '_item_name', 'text_sel', 'text_not_sel', 'icon_sel', 'icon_not_sel', '_not_selected_widget', '_selected_widget']

	def __init__(self, *args, **kw):
		UIItem.__init__(self, *args, **kw)
		return None

	def reset(self, item, selected, position=None):
		UIItem.reset(self, item, selected, position)
		if item is not None:
			not_sel, sel = self._get_images_paths(item)
			self.icon_sel.load(sel)
			self.icon_not_sel.load(not_sel)
			self._item_name = item.name
			self._update_text(position)
		else:
			self._item_name = None
			self.widget.set_color(a=0)
		self.text_sel.set_scroll((self.style['autoscroll'] if selected else False))
		return None

	def set_position(self, position):
		if position != self._position:
			self._position = position
			if self._item_name is not None:
				self._update_text(position)
		return None

	def _update_text(self, position):
		name = self._item_name
		if position is not None and self.style['enumerated']:
			name = '%d. %s' % (position, name)
		try:
			self.text_not_sel.set_text(name)
			self.text_sel.set_text(name)
		except:
			name = name.decode('utf_8').encode('ascii', 'replace')
			self.text_not_sel.set_text(name)
			self.text_sel.set_text(name)
		return None

	def _create(self):
		self._item_name = None
		style = self.style
		img_sel = Image()
		img_not_sel = Image()
		preserve_icon_size = style['preserve_icon_size']
		img_sel.set_keep_real_size(preserve_icon_size)
		img_not_sel.set_keep_real_size(preserve_icon_size)
		maxlen = style['maxlen']
		text_not_sel = TextBlock(max_width=maxlen)
		text_not_sel.set_color(color=style['text_color'])
		text_sel = TextBlock(max_width=maxlen, autoscroll=style['autoscroll'])
		text_sel.set_color(color=style['selected_text_color'])
		text_sel.set_style(style=style['selected_font_style'])
		text_not_sel.set_style(style=style['font_style'])
		self.text_not_sel = text_not_sel
		self.text_sel = text_sel
		self.icon_not_sel = img_not_sel
		self.icon_sel = img_sel
		c = Container()
		c_sel = Container()
		tw, th = style['text_size']
		iw, ih = style['icon_size']
		left, top = style['text_offset']
		c.add_child(text_not_sel, width=tw, height=th, top=top, left=left)
		c.add_child(img_not_sel, width=iw, height=ih, right='100%', valign='50%')
		tw, th = style['selected_text_size']
		iw, ih = style['selected_icon_size']
		left, top = style['selected_text_offset']
		c_sel.add_child(text_sel, width=tw, height=th, top=top, left=left)
		c_sel.add_child(img_sel, width=iw, height=ih, right='100%', valign='50%')
		return (c, c_sel)

	def _set_selected(self, selected, *args, **kw):
		UIItem._set_selected(self, selected, *args, **kw)
		self.text_sel.set_scroll((self.style['autoscroll'] if selected else False))
		return None

	def destroy(self):
		self.text_sel.set_text('')
		self.text_not_sel.set_text('')
		self.text_sel.set_scroll(False)
		self.icon_sel.load(None)
		self.icon_not_sel.load(None)
		return UIItem.destroy(self)
