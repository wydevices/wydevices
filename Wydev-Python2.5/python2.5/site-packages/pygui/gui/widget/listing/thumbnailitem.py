# -*- coding: utf-8 -*- 
#
# Description:
#
# Gui Widget Listing Thumbnail Item Class Definition
#
#
#
# Changes:
#
# 2014-04-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from os import path
from pygui.gui.widget.listing.ui_items import UIItem
from wyvas import Image, TextBlock, Container
from peewee.debug import GET_LOGGER
from peewee.formatters import int_to_percent, percent_to_int, xml_tag

log = GET_LOGGER(__name__)


class ThumbnailItem(UIItem):

	__slots__ = ['_selected', '_marked', '_position', '_edited', 'widget', 'style', 'selected_style_string', 'not_selected_style_string', 'text_sel', 'text_not_sel', 'thumbnail_sel', 'thumbnail_not_sel', 'text_offset', 'selected_text_offset', '_not_selected_widget', '_selected_widget', 'background_sel', 'background_not_sel']

	def __init__(self, *args, **kw):
		UIItem.__init__(self, *args, **kw)
		self.selected_style_string = xml_tag(self.style['selected_font_style'].replace('%', '%%'), '%s')
		self.not_selected_style_string = xml_tag(self.style['font_style'].replace('%', '%%'), '%s')
		return None

	def _get_images_paths(self, item):
		repository = self.style['repository']
		root = path.join(repository, '%s' % item.type)
		suff = ('.', '_selected.')
		def check_concat(suf):
			_name = root + suf
			for ext in self.style['extension']:
				name = _name + ext
				if path.isfile(name):
					return name
			log.debug("%s don't exist" % name)
			return None
		return map(check_concat, suff)

	def reset(self, item, selected, position):
		UIItem.reset(self, item, selected)
		if item:
			back_not_sel, back_sel = self._get_images_paths(item)
			item_thumbnail = None
			if item.type in ('audio', 'image', 'video', 'video_image'):
				try:
					item_thumbnail = item['thumbnail']
				except:
					pass
			self.thumbnail_sel.update(signal=None, sender=None, value=item_thumbnail)
			self.thumbnail_not_sel.update(signal=None, sender=None, value=item_thumbnail)
			self.background_sel.update(signal=None, sender=None, value=back_sel)
			self.background_not_sel.update(signal=None, sender=None, value=back_not_sel)
			name = item.name
			try:
				self.text_not_sel.set_text(self.not_selected_style_string % name)
				self.text_sel.set_text(self.selected_style_string % name)
			except:
				name = name.encode('ascii', 'replace')
				self.text_not_sel.set_text(self.not_selected_style_string % name)
				self.text_sel.set_text(self.selected_style_string % name)
		else:
			self.widget.set_color(a=0)
		return None

	def _create(self):
		style = self.style
		icon_size = style['icon_size']
		icon_size_sel = style['selected_icon_size']
		item_size = style['item_size']
		item_size_sel = style['selected_item_size']
		text_offset = style['text_offset']
		text_offset_sel = style['selected_text_offset']
		thumbnail_sel = Image()
		thumbnail_not_sel = Image()
		background_sel = Image()
		background_not_sel = Image()
		preserve_icon_size = style.get('preserve_icon_size', 0)
		preserve_icon_aspect = style.get('preserve_icon_aspect', 0)
		for img in (thumbnail_sel, thumbnail_not_sel, background_not_sel, background_sel):
			img.set_keep_real_size(preserve_icon_size)
			img.set_aspect(preserve_aspect=preserve_icon_aspect)
		thumbnail_not_sel.resize(width=item_size[0], height=item_size[1])
		background_not_sel.resize(width=icon_size[0], height=icon_size[1])
		thumbnail_sel.resize(width=item_size_sel[0], height=item_size_sel[1])
		background_sel.resize(width=icon_size_sel[0], height=icon_size_sel[1])
		text_not_sel = TextBlock()
		text_not_sel.set_color(color=style['text_color'])
		text_sel = TextBlock()
		text_sel.set_color(color=style['selected_text_color'])
		self.text_not_sel = text_not_sel
		self.text_sel = text_sel
		self.thumbnail_not_sel = thumbnail_not_sel
		self.thumbnail_sel = thumbnail_sel
		self.background_not_sel = background_not_sel
		self.background_sel = background_sel
		c = Container()
		c_sel = Container()
		tw, th = style['text_size']
		iw, ih = style['icon_size']
		itw, ith = style['item_size']
		c.add_child(text_not_sel, name='text_not_sel', width=tw, height=th, vcenter=int_to_percent(50 + percent_to_int(text_offset[1])), hcenter=int_to_percent(50 + percent_to_int(text_offset[0])), layer=3)
		c.add_child(background_not_sel, name='background_not_sel', hcenter='50%', vcenter='50%', layer=1)
		c.add_child(thumbnail_not_sel, name='thumbnail_not_sel', hcenter='50%', vcenter='50%', layer=2)
		tw, th = style['selected_text_size']
		iw, ih = style['selected_icon_size']
		itw, ith = style['selected_item_size']
		c_sel.add_child(text_sel, name='text_sel', width=tw, height=th, vcenter=int_to_percent(50 + percent_to_int(text_offset_sel[1])), hcenter=int_to_percent(50 + percent_to_int(text_offset_sel[0])), layer=3)
		c_sel.add_child(background_sel, name='background_sel', hcenter='50%', vcenter='50%', layer=1)
		c_sel.add_child(thumbnail_sel, name='thumbnail_sel', hcenter='50%', vcenter='50%', layer=2)
		return (c, c_sel)

	def _create_marker(self):
		style = self.style
		marker = Image(style['marker_image'], style['repository'])
		iw, ih = style['selected_icon_size']
		self.widget.add_child(marker, name='marker', aspect=0, width='1%', height=add_to_percent(5, ih), hcenter='50%', vcenter='50%')
		return None

	def mark(self, animate):
		marker = self.widget.get_obj_by_name('marker')
		marker._end_callback = None
		duration = (self.style['duration'] if animate else 0)
		iw, ih = self.style['selected_icon_size']
		marker.show()
		marker.animate('size', width=iw, duration=duration)
		marker.animate('color', a=255, duration=duration)
		return None

	def unmark(self, animate):
		marker = self.widget.get_obj_by_name('marker')
		marker._end_callback = None
		duration = (self.style['duration'] if animate else 0)
		marker.animate('size', width='1%', duration=duration)
		marker.animate('color', a=0, duration=duration, end_callback=marker.hide)
		return None



def add_to_percent(x, p):
	return int_to_percent(percent_to_int(p) + x)
