# -*- coding: utf-8 -*- 
#
# Description:
#
# Widget Library Class Definition
#
#
#
# Changes:
#
# 2011-10-21
# Initial Commit
#
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import os
import pygui.config as config
from peewee.debug import GET_LOGGER

if config.user_config['base']['use_serialized_theme']:
	from peewee.xml_facilities import SerializableElement
else:
	import xml.etree.cElementTree as ET

log = GET_LOGGER(__name__)



# This function parse the xml and check if objects are not in the global object library.
# "node" is a <page id ="">
def merge_node(node, bibliotheque, objects=None, animations=None):
	xml_variables = dict(skins=config.themes_dir, theme=config.user_config['base']['theme_engine'], version=config.version)
	containers_dict = dict()
	name = node.get('id')

	def _merge_node(dest, src):
		_cp = dict(src.attrib)
		_cp.update(dest.attrib)
		dest.attrib = _cp
		for c in src.getchildren():
			dest.append(c)
		return None
	
	for subnode in node:
		for node_it in subnode.getiterator():
			try:
				if node_it.tag == 'animation':
					if node_it.get('tplid') and animations is not None:
						ref_node = [n for n in animations.findall('animation') if n.get('id') == node_it.get('tplid')][0]
						_merge_node(node_it, ref_node)
						del node_it.attrib['tplid']
					elif node_it.get('baseid'):
						ref_node = [n for n in bibliotheque.findall('/templates/animations/animation') if n.get('id') == node_it.get('baseid')][0]
						_merge_node(node_it, ref_node)
						del node_it.attrib['baseid']
				else:
					if node_it.get('tplid') and objects is not None:
						ref_node = [n for n in objects.findall('*') if n.get('id') == node_it.get('tplid')][0]
						_merge_node(node_it, ref_node)
						del node_it.attrib['tplid']						
					elif node_it.get('baseid'):
						ref_node = [n for n in bibliotheque.findall('/templates/objects/*') if n.get('id') == node_it.get('baseid')][0]
						_merge_node(node_it, ref_node)
						del node_it.attrib['baseid']
			except Exception, e:
				log.error('%s:%s does not exist', node_it.tag, node_it.attrib)
		for node_it in subnode.getiterator():
			if 'file' in node_it.attrib:
				node_it.attrib['file'] = node_it.attrib['file'] % xml_variables
			if 'repository' in node_it.attrib:
				node_it.attrib['repository'] = node_it.attrib['repository'] % xml_variables
			if 'marker_image' in node_it.attrib:
				node_it.attrib['marker_image'] = node_it.attrib['marker_image'] % xml_variables
			if 'selected_marker_image' in node_it.attrib:
				node_it.attrib['selected_marker_image'] = node_it.attrib['selected_marker_image'] % xml_variables
		object_name = subnode.attrib.get('name', 'unamed')
		containers_dict[object_name] = subnode
	return containers_dict



# The widget library is a singleton class which maintain all displayable IHM.
# IHM are loaded from a xml file.
class WidgetLibrary(object):

	widgets_dict = dict()
	object_creator = None

	def load_xml(self, directory):
		file_list = [[root, xmlfile] for root, dirs, files in os.walk(directory) for xmlfile in files if xmlfile.endswith('xml')]
		try:
			index = file_list.index([directory, 'ObjectBiblio.xml'])
			bibliotheque = ET.parse(os.path.join(directory, 'ObjectBiblio.xml'))
			del file_list[index]
		except ValueError:
			bibliotheque = None
		for root, _file in file_list:
			try:
				log.debug(' + add_widget(%s):', _file)
				self.add_widgets(os.path.join(root, _file), bibliotheque)
			except Exception, e:
				raise SystemExit("Invalid XML '%s' : %s" % (_file, e))
		log.info('widgets loaded from XML')
		return None

	def load_pickle(self, datapack):
		log.debug('Load XML from serialized object %s', datapack)
		try:
			import cPickle
			_file = open(datapack, 'rb')
			self.widgets_dict.update(cPickle.load(_file))
			_file.close()
		except IOError:
			log.error('%s does not exist, check your wybox_theme packages' % datapack)
		return None

	# This function parse the xml file and extract contained widgets.
	# One or more widgets can be described in one single xml file.
	def add_widgets(self, _file, bibliotheque):
		root = ET.parse(_file)
		templates_object_node = root.find('/templates/objects/')
		templates_animation_node = root.find('/templates/animations/')
		widget_node_list = root.findall('/pages/page')
		wd = self.widgets_dict
		for node in widget_node_list:
			widget = merge_node(node, bibliotheque, templates_object_node, templates_animation_node)
			wd[node.get('id')] = widget
			log.debug('---> file %s new widget %s added', _file, node.get('id'))
		return None

	def get_container(self, pagename, key='main', menu=None):
		if WidgetLibrary.object_creator is None:
			from pygui.gui.widget.core.objectfactory import ObjectCreator
			WidgetLibrary.object_creator = ObjectCreator()
		return WidgetLibrary.object_creator.create(WidgetLibrary.widgets_dict[pagename][key], menu)
