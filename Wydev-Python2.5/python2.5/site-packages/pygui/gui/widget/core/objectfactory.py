# -*- coding: utf-8 -*- 
#
# Description:
#
# GUI Widget Object Factory Class Definiton
#
#
#
# Changes:
#
# 2012-04-14
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from pygui.gui.widget.core import factory
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION, DEBUG
from peewee.formatters import boolean, boolean_to_int, int_tuple, int_tuple_list, string_tuple
from peewee.messages import connect as louie_connect
from wyvas import Container, Image, Object, Text

log = GET_LOGGER(__name__)

try:
	from wyvas import Browser
except ImportError:
	log.debug('Cannot import Browser from wyvas')
	Browser = None

try:
	from wyvas import Animage
except ImportError:
	log.debug('Cannot import Animage from wyvas')
	Animage = None

try:
	from wyvas import __version__ as wyvas_version
	if 'cython' not in wyvas_version:
		raise ImportError
	from wyvas import DepthBar, Clock, Programbar, ProgramRecordTimeShiftBar
	from wyvas import ProgramTimeShiftBar, Progressbar, TextBlock, Timebar, Viewer
	from wyvas import DefaultListing, FixedListing, HybridListing, Grid
	log.debug('wyvas widgets imported')
except ImportError:
	log.debug('Cannot import widgets from wyvas')
	from pygui.gui.widget.clock import Clock
	from pygui.gui.widget.depthbar import DepthBar
	from pygui.gui.widget.listing.grid import Grid
	from pygui.gui.widget.listing.style_fixed import FixedListing
	from pygui.gui.widget.listing.style_default import DefaultListing
	from pygui.gui.widget.listing.style_hybrid import HybridListing
	from pygui.gui.widget.programbar import Programbar, ProgramRecordTimeShiftBar
	from pygui.gui.widget.programbar import ProgramTimeShiftBar
	from pygui.gui.widget.progressbar import Progressbar
	from pygui.gui.widget.textblock import TextBlock
	from pygui.gui.widget.timebar import Timebar
	from pygui.gui.widget.viewer import Viewer
	log.debug('pygui widgets imported')

from pygui.gui.widget.core.macros import py_macro



def color(string):
	rgba = [int(i) for i in string.split()]
	if len(rgba) == 3:
		rgba.append(255)
	return tuple(rgba)



# Attributes_dict refers to methods defined in the object's class
# (image, listing, text, rectangle, etc...).
# Second parameters refers to a specific cast method when needed.
# (see int_tuple, boolean, int_tuple_list, etc...)
class CreateObject(object):

	def __init__(self, att=None):
		self.attributes_dict = dict(width=['resize', None], height=['resize', None], left=['move', None], right=['move', None], top=['move', None], bottom=['move', None], hcenter=['move', None], vcenter=['move', None], name=['set_name', None], opacity=['set_opacity', int], color=['set_color', color], layer=['set_layer', int], visible=['set_visible', boolean], preserve_aspect=['set_aspect', boolean], keep_real_size=['set_keep_real_size', boolean_to_int])
		return None

	def _get_object(self):
		return Object()

	# Object attributes are passed in the kwargs dict. Each dictionnary item
	# is a specific attribute for the object construction.
	def apply_attributes(self, object, **kwargs):
		for att in [atr for atr in kwargs if atr in self.attributes_dict]:
			try:
				cast_func = self.attributes_dict[att][1]
				if not cast_func:
					cast_func = lambda x : x
				i = kwargs[att]
				if i.startswith('py:'):
					i = str(py_macro(i))
				getattr(object, self.attributes_dict[att][0])(**{att: cast_func(i)})	
			except AttributeError, e:
				PRINT_EXCEPTION(e, True)
		return None

	def add_child(self, node, parent):
		obj = self._get_object()
		if parent:
			parent.add_child(obj)
		return obj

	def specify(self, node, object):
		self.apply_attributes(object, **node.attrib)
		return None



class CreateContainer(CreateObject):

	def __init__(self, att=None):
		CreateObject.__init__(self, att)
		return None

	def _get_object(self):
		return Container()



class CreateText(CreateObject):

	def __init__(self, att=None):
		CreateObject.__init__(self, att)
		ad = self.attributes_dict
		ad['text'] = ['set_text', None]
		ad['font'] = ['set_font', None]
		ad['size'] = ['set_font', int]
		return None

	def _get_object(self):
		return Text()



class CreateTextBlock(CreateObject):

	def __init__(self, att=None):
		CreateObject.__init__(self, att)
		ad = self.attributes_dict
		self.autoscroll = 'autoscroll' in att
		self.i18n = 'i18n' in att
		try:
			self.maxlen = int(att.get('maxlen'))
		except (TypeError, ValueError):
			self.maxlen = None
		ad['text'] = ['set_text', None]
		ad['style'] = ['set_style', None]
		ad['pause'] = ['set_length', float]
		return None

	def _get_object(self):
		return TextBlock(autoscroll=self.autoscroll, max_width=self.maxlen, i18n=self.i18n)



class CreateClock(CreateObject):

	def __init__(self, att=None):
		CreateObject.__init__(self, att)
		self.attributes_dict['style'] = ['set_style', None]
		self.attributes_dict['time_format'] = ['set_time_format', None]
		self.attributes_dict['global_format'] = ['set_global_format', None]
		self.attributes_dict['date_format'] = ['set_date_format', None]
		return None

	def _get_object(self):
		return Clock()



class CreateImage(CreateObject):

	def __init__(self, att=None):
		CreateObject.__init__(self, att)
		self.attributes_dict['repository'] = ['set_repository', None]
		self.attributes_dict['file'] = ['load', None]
		self.file = att.get('file', None)
		self.repository = att.get('repository', None)
		return None

	def _get_object(self):
		return Image(image_or_file=self.file, repository=self.repository)



class CreateViewer(CreateImage):

	def _get_object(self):
		return Viewer(image_or_file=self.file, repository=self.repository)



class CreateProgressBar(CreateObject):

	def __init__(self, att=None):
		CreateObject.__init__(self, att)
		ad = self.attributes_dict
		ad['pos'] = ['set', int]
		ad['max'] = ['set', int]
		ad['indicator'] = ['set_indicator', None]
		ad['bar'] = ['set_bar', None]
		return None

	def _get_object(self):
		return Progressbar()



class CreateProgramBar(CreateObject):

	def __init__(self, att=None):
		CreateObject.__init__(self, att)
		ad = self.attributes_dict
		ad['indicator'] = ['set_indicator', None]
		ad['live'] = ['set_live', None]
		ad['direct'] = ['set_direct', None]
		ad['timeshift'] = ['set_timeshift', None]
		ad['bar'] = ['set_bar', None]
		return None

	def _get_object(self):
		return Programbar()



class CreateProgramTimeShiftBar(CreateProgramBar):

	def __init__(self, att=None):
		CreateProgramBar.__init__(self, att)
		return None

	def _get_object(self):
		return ProgramTimeShiftBar()



class CreateProgramRecordTimeShiftBar(CreateProgramTimeShiftBar):

	def __init__(self, att=None):
		CreateProgramTimeShiftBar.__init__(self, att)
		self.attributes_dict['record'] = ['set_record', None]
		return None

	def _get_object(self):
		return ProgramRecordTimeShiftBar()



class CreateTimeBar(CreateObject):

	def __init__(self, att=None):
		CreateObject.__init__(self, att)
		ad = self.attributes_dict
		ad['bar'] = ['set_bar', None]
		ad['reference'] = ['set_reference', int]
		ad['period'] = ['set_period', int]
		ad['duration'] = ['set_duration', int]
		ad['begin'] = ['set_begin', int]
		return None

	def _get_object(self):
		return Timebar()



class CreateDepthBar(CreateObject):

	def __init__(self, att=None):
		CreateObject.__init__(self, att)
		ad = self.attributes_dict
		ad['depth'] = ['set_depth', int]
		ad['max_depth'] = ['set_max_depth', int]
		ad['repository'] = ['set_repository', None]
		ad['folder_icon'] = ['set_folder_icon', None]
		ad['plus_icon'] = ['set_plus_icon', None]
		return None

	def _get_object(self):
		return DepthBar()



class CreateList(CreateObject):

	def __init__(self, att=None):
		CreateObject.__init__(self, att)
		self._style = att['style_name']
		ad = self.attributes_dict
		ad['positions'] = ['set_positions', int_tuple_list]
		ad['pre_position'] = ['set_extra_positions', int_tuple]
		ad['post_position'] = ['set_extra_positions', int_tuple]
		ad['centered'] = ['set_centered', boolean]
		ad['duration'] = ['set_duration', float]
		ad['selected_item'] = ['set_selected_item', int]
		ad['bar'] = ['set_bar', None]
		ad['repository'] = ['set_repository', None]
		ad['reversed_update'] = ['set_reversed_update', boolean]
		ad['anim_type'] = ['set_anim_type', None]
		ad['cyclic'] = ['set_cyclic', boolean]
		ad['extension'] = ['update_style', string_tuple]
		ad['maxlen'] = ['update_style', int]
		ad['edit_offset'] = ['update_style', int]
		ad['enumerated'] = ['update_style', boolean]
		ad['page_jump'] = ['update_style', None]
		ad['pos_policy'] = ['update_style', None]
		ad['fade_pre_post'] = ['update_style', boolean]
		ad['preserve_icon_aspect'] = ['update_style', boolean_to_int]
		ad['preserve_icon_size'] = ['update_style', boolean_to_int]
		ad['selected_marker_image'] = ['update_style', None]
		ad['marker_image'] = ['update_style', None]
		ad['font_style'] = ['update_style', None]
		ad['selected_font_style'] = ['update_style', None]
		ad['unsensitive_font_style'] = ['update_style', None]
		ad['text_size'] = ['update_style', string_tuple]
		ad['selected_text_size'] = ['update_style', string_tuple]
		ad['unsensitive_text_size'] = ['update_style', string_tuple]
		ad['text_color'] = ['update_style', color]
		ad['selected_text_color'] = ['update_style', color]
		ad['unsensitive_text_color'] = ['update_style', color]
		ad['icon_size'] = ['update_style', string_tuple]
		ad['selected_icon_size'] = ['update_style', string_tuple]
		ad['unsensitive_icon_size'] = ['update_style', string_tuple]
		ad['marker_offset'] = ['update_style', string_tuple]
		ad['marker_size'] = ['update_style', string_tuple]
		ad['text_offset'] = ['update_style', string_tuple]
		ad['selected_text_offset'] = ['update_style', string_tuple]
		ad['autoscroll'] = ['update_style', boolean]
		ad['selected_item_size'] = ['update_style', string_tuple]
		ad['item_size'] = ['update_style', string_tuple]
		ad['opacity'] = ['update_style', int]
		ad['progress_bar_background'] = ['update_style', None]
		ad['progress_bar_foreground'] = ['update_style', None]
		ad['progress_bar_offset'] = ['update_style', string_tuple]
		ad['progress_bar_size'] = ['update_style', string_tuple]
		ad['rec_icon'] = ['update_style', None]
		ad['rec_icon_offset'] = ['update_style', string_tuple]
		ad['time_offset'] = ['update_style', string_tuple]
		ad['time_font_style'] = ['update_style', None]
		ad['time_color'] = ['update_style', color]
		ad['title_font_style'] = ['update_style', None]
		ad['title_color'] = ['update_style', color]
		ad['selected_time_font_style'] = ['update_style', None]
		ad['selected_time_color'] = ['update_style', color]
		ad['selected_title_font_style'] = ['update_style', None]
		ad['selected_title_color'] = ['update_style', color]
		ad['selected_blurb_time_font_style'] = ['update_style', None]
		ad['selected_blurb_time_color'] = ['update_style', color]
		ad['selected_blurb_title_font_style'] = ['update_style', None]
		ad['selected_blurb_title_color'] = ['update_style', color]
		ad['selected_blurb_offset'] = ['update_style', string_tuple]
		ad['selected_blurb_text_offset'] = ['update_style', string_tuple]
		ad['selected_blurb_zoom'] = ['update_style', None]
		ad['selection_cursor_image'] = ['update_style', None]
		return None

	def _get_object(self):
		if self._style.endswith('_fixed'):
			l = FixedListing()
		elif self._style.endswith('_hybrid'):
			l = HybridListing()
		else:
			l = DefaultListing()
		l.style_name = self._style
		return l



class CreateGrid(CreateList):

	def __init__(self, att=None):
		CreateList.__init__(self, att)
		ad = self.attributes_dict
		ad['pre_positions'] = ['set_extra_positions', int_tuple_list]
		ad['post_positions'] = ['set_extra_positions', int_tuple_list]
		return None

	def _get_object(self):
		out = Grid()
		out.style_name = self._style
		return out



class CreateWebBrowser(CreateImage):

	def __init__(self, att=None):
		CreateImage.__init__(self, att)
		self.attributes_dict['url'] = ['send_data', None]
		return None

	def _get_object(self):
		return Browser()



class CreateCursor(CreateObject):

	def _get_object(self):
		from pygui.gui.widget.cursor import Cursor
		return Cursor()



class CreateAnimage(CreateImage):

	def __init__(self, att=None):
		CreateImage.__init__(self, att)
		self.atomic_size = int_tuple(att['real_size'])
		self.attributes_dict['file'] = ['send_data', None]
		self.attributes_dict['sleep'] = ['send_data', None]
		return None

	def _get_object(self):
		return Animage(size=self.atomic_size)



from pygui.gui.widget.core.animationfactory import AnimationCreator
class ObjectCreator(object):

	animation_creator = AnimationCreator()

	def __init__(self):
		self.objectFactory = factory.Factory()
		reg = self.objectFactory.register
		reg('container', CreateContainer, att=None)
		reg('text', CreateText, att=None)
		reg('textblock', CreateTextBlock, att=['autoscroll', 'maxlen', 'i18n'])
		reg('clock', CreateClock, att=None)
		reg('image', CreateImage, att=None)
		reg('viewer', CreateViewer, att=None)
		reg('progressbar', CreateProgressBar, att=None)
		reg('list', CreateList, att=['style_name'])
		reg('grid', CreateGrid, att=['style_name'])
		reg('timebar', CreateTimeBar, att=None)
		reg('programbar', CreateProgramBar, att=None)
		reg('depthbar', CreateDepthBar, att=None)
		reg('programtimeshiftbar', CreateProgramTimeShiftBar, att=None)
		reg('programrecordtimeshiftbar', CreateProgramRecordTimeShiftBar, att=None)
		reg('webbrowser', CreateWebBrowser, att=None)
		reg('cursor', CreateCursor, att=None)
		reg('animage', CreateAnimage, att=['real_size'])
		return None

	# Creates (and returns) the graphical object corresponding to xml "node"
	# if parent is specified, the object is attached to the parent.
	# Object's animations are linked to the model
	def create(self, node, menu, parent=None, animations=None):
		if not hasattr(self.objectFactory, node.tag):
			log.error('object %s does not appear in readable objects list', node.tag)
			return None
		creator = getattr(self.objectFactory, node.tag)(att=node.attrib)
		obj = creator.add_child(node, parent)
		if animations is None:
			animations = []
		for subnode in node:
			if subnode.tag == 'animation':
				try:
					animation = ObjectCreator.animation_creator.create(subnode, obj)
					louie_connect(receiver=animation.play, signal=animation.event, sender=menu)
					animations.append(animation)
				except:
					PRINT_EXCEPTION()
					log.debug('animation %s : %s has no correspondance' % (subnode.tag, subnode.attrib))
			else:
				self.create(subnode, menu, obj, animations)
		creator.specify(node, obj)
		if parent is None:
			obj._animations = animations
		return obj