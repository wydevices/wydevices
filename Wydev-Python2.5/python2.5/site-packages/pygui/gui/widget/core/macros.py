# -*- coding: utf-8 -*- 
#
# Description:
#
# GUI Widget Core Macros Definitons
#
#
#
# Changes:
#
# 2012-05-02
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import
from __future__ import division
import random



# py_macro("py:foo(bar, baz)") -> str
#
# Evaluate and return the result of an XML macro.
#
# /!\ Relies on eval() calls, but those are done with the builtins
# disabled and no locals, so it should be reasonably secure.
def py_macro(m):
	return eval('%s' % m[3:], MACRO_GLOBS, {})



# _linear(start, stop, num_values) -> generator
#
# Yield a linear sequence of num_values values,
# ranging from start to stop, inclusive.
def _linear(start, stop, num_values):
	if num_values <= 1:
		raise ValueError('linear() must return at least 2 values')
	step = (stop - start) / (num_values - 1)
	return (start * i + step for i in xrange(num_values))



# LinearInts(start, stop, num_values)
# Linear sequence of num_values integers,
# ranging from start to stop inclusive.
# Its string representation is space-separated.
# >>> str(LinearInts(0, 100, 3))
# "0 50 100"
class LinearInts(list):

	def __init__(self, start, stop, num_values):
		list.__init__(self, (('%i' % value) for value in _linear(start, stop, num_values)))
		return None

	def __str__(self):
		return ' '.join(self)



# LinearFloats(start, stop, num_values)
# Linear sequence of num_values floats (2 decimal places),
# ranging from start to stop inclusive.
# Its string representation is space-separated.
# >>> str(LinearFloats(0, 100, 3))
# "0.00 50.00 100.00"
class LinearFloats(list):

	def __init__(self, start, stop, num_values):
		list.__init__(self, (('%.2f' % value) for value in _linear(start, stop, num_values)))
		return None

	def __str__(self):
		return ' '.join(self)



# LinearPercentages(start, stop, num_values)
# Linear sequence of num_values percentages,
# ranging from start% to stop% inclusive.
# Its string representation is space-separated.
# >>> str(LinearPercentages(0, 100, 3))
# "0% 50% 100%"
class LinearPercentages(list):

	def __init__(self, start, stop, num_values):
		list.__init__(self, (('%i%%' % value) for value in _linear(start, stop, num_values)))
		return None

	def __str__(self):
		return ' '.join(self)



# A sequence of n-tuples of strings. Supports standard list
# operations, as well as addition.
# Its string representation uses space-separated groups of
# comma-separated values.
# >>> str(TupleSequence([("1", "2", "3"), ("4", "5", "6")]))
# "1,2,3 4,5,6"
class TupleSequence(list):

	def __add__(self, other):
		if isinstance(other, TupleSequence):
			return TupleSequence(list.__add__(self, other))
		return NotImplemented

	def __str__(self):
		return ' '.join((','.join(i) for i in self))



# ListCoordinates(x_data, y_data[, z_data])
# A sequence of 2D or 3D (usually x, y[, z]) coordinates,
# used to represent a list.
# It has the following use cases:
#   - Single X, single Y (not really useful, but knock yourself out):
#     >>> ListCoordinates("1", "1")
#     [("1", "1")]
#   - Single X, multiple Y:
#     >>> ListCoordinates("1", LinearInts(1, 3, 3))
#     [("1", "1"), ("1", "2"), ("1", "3")]
#   - Single Y, multiple X:
#     >>> ListCoordinates(LinearInts(1, 3, 3), 1)
#     [("1", "1"), ("2", "1"), ("3", "1")]
#   - Multiple X, multiple Y: This last mode requires both sequences
#     to have the same length. The result is a sequence of that same
#     length -- *not* a grid of len(x) * len(y)!
#     >>> ListCoordinates(LinearInts(1, 3, 3), LinearInts(0, 2, 3))
#     [("1", "0"), ("2", "1"), ("3", "2")]
# The string representation returns space-separated pairs, e.g.
# >>> str(ListCoordinates(LinearInts(1, 3, 3), LinearInts(0, 2, 3)))
# "1,0 2,1 3,2"
# Likewise, the single and multiple Z cases are properly handled.
# >>> str(ListCoordinates(LinearPercentages(0, 100, 3), LinearPercentages(100, 200, 3), "0"))
# "0%,100%,0 50%,150%,0 100%,200%,0"
# >>> str(ListCoordinates(LinearPercentages(0, 100, 3),
# ... LinearPercentages(100, 200, 3), LinearIntegers(-2, 0, 3)))
# "0%,100%,-2 50%,150%,-1 100%,200%,0"
class ListCoordinates(TupleSequence):

	def __init__(self, x, y, z=None):
		if isinstance(x, basestring):
			if isinstance(y, basestring):
				x_data = [x]
				y_data = [y]
			else:
				x_data = [x] * len(y)
				y_data = y
		else:
			if isinstance(y, basestring):
				x_data = x
				y_data = [y] * len(x)
			else:
				x_data = x
				y_data = y
		if len(x_data) != len(y_data):
			raise ValueError('X/Y argument mismatch -- both must have the same length')
		if z is None:
			data = zip(x_data, y_data)
		else:
			if isinstance(z, basestring):
				z_data = [z] * len(x_data)
			else:
				z_data = z
			if len(z_data) != len(x_data):
				raise ValueError('Z argument mismatch -- must have the same length as X and Y')
			data = zip(x_data, y_data, z_data)
		TupleSequence.__init__(self, data)
		return None



# GridCoordinates(x_data, y_data)
# A sequence of 2D (usually x, y) coordinates, used to represent a grid.
# Unlike L{ListCoordinates}, it requires both its arguments to be
# lists of length >= 1, and creates len(x_list) * len(y_list)
# coordinates out of them.
# Example:
# >>> GridCoordinates(LinearPercentages(0, 100, 3),
# ... LinearPercentages(10, 20, 2))
# [("0%", "10%"), ("50%", "10%"), ("100%", "10%"),
# ("0%", "20%"), ("50%", "20%"), ("100%", "20%")]
# The string representation returns space-separated pairs.
class GridCoordinates(TupleSequence):

	def __init__(self, x_list, y_list):
		if len(x_list) < 1:
			raise ValueError('At least 1 X position is required')
		if len(y_list) < 1:
			raise ValueError('At least 1 Y position is required')
		TupleSequence.__init__(self, ((x, y) for x in x_list for y in y_list))
		return None



MACRO_GLOBS = {'__builtins__': None,
							 'randint': random.randint,
							 'LinearInts': LinearInts,
							 'LinearFloats': LinearFloats,
							 'LinearPercentages': LinearPercentages,
							 'ListCoordinates': ListCoordinates,
							 'GridCoordinates': GridCoordinates}
