# -*- coding: utf-8 -*- 
#
# Description:
#
# Timebar Widget Definition
#
#
#
# Changes:
#
# 2014-03-25
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

import wyvas
from math import ceil
from peewee.debug import DEBUG, GET_LOGGER
from peewee.formatters import seconds_to_hhmm, seconds_to_hhmmss, int_to_percent

log = GET_LOGGER(__name__)
LOG_VAL = False
LOG_INFO = False
LOG_FUNC = False


def nolog(*args):
	return log_none(*args)

def log_none(*args):
	return None

if not LOG_FUNC:
	log_func = nolog
else:
	def log_func(*args):
		return log.info(*args)

if not LOG_VAL:
	log_val = nolog
else:
	def log_val(*args):
		return log.info(*args)

if not LOG_INFO:
	log_info = nolog
else:
	def log_info(*args):
		return log.info(*args)


class Timebar(wyvas.Container):

	def __init__(self):
		wyvas.Container.__init__(self)
		self._time_bar_name = None
		self._time_reference = 0
		self._time_period = 3600
		self._Timebar__duration = 0
		self._Timebar__begin = 0
		self._Timebar__width = int_to_percent(0)
		self._Timebar__left = int_to_percent(0)
		return None

	def set_reference(self, reference=0):
		self._time_reference = reference
		return None

	def set_bar(self, bar=''):
		self._time_bar_name = bar
		return None

	def set_period(self, period=3600):
		self._time_period = period
		return None

	def _get_duration(self):
		return self._Timebar__duration

	def set_duration(self, duration=0):
		self._Timebar__duration = duration
		self._Timebar__width = int_to_percent(int(self._Timebar__duration * 100.0 / self._time_period + 0.5))
		log_val('=============> time_bar class : set_duration (width) = %s' % self._Timebar__width)
		return None

	_duration = property(_get_duration, set_duration)

	def _get_begin(self):
		return self._Timebar__begin

	def set_begin(self, time):
		self._Timebar__begin = time
		intleft = int((self._Timebar__begin - self._time_reference) * 100.0 / self._time_period + 50 + 0.5)
		intwidth = int(self._Timebar__duration * 100.0 / self._time_period + 0.5)
		if intleft + intwidth < 50:
			self._Timebar__width = int_to_percent(int(50 - intleft))
		self._Timebar__left = int_to_percent(int((self._Timebar__begin - self._time_reference) * 100.0 / self._time_period + 50 + 0.5))
		log_val('=============> time_bar class : set_begin (left) = %s' % self._Timebar__left)
		return None

	_begin = property(_get_begin, set_begin)

	def set(self, **kwargs):
		if 'reference' in kwargs:
			self._time_reference = kwargs['reference']
			log_val('=============> time_bar class : reference = %s' % seconds_to_hhmm(self._time_reference))
		if 'period' in kwargs:
			self._time_period = kwargs['period']
			log_val('=============> time_bar class : _time_period = %s' % seconds_to_hhmmss(self._time_period))
		if 'duration' in kwargs:
			self._duration = kwargs['duration']
			log_val('=============> time_bar class : _duration = %s' % seconds_to_hhmmss(self._duration))
		if 'begin' in kwargs:
			self._begin = kwargs['begin']
			log_val('=============> time_bar class : _begin = %s' % seconds_to_hhmm(self._begin))
		self._redraw()
		return None

	def _redraw(self):
		bar_list = self.get_list_obj_by_name(self._time_bar_name)
		for bar in bar_list:
			bar.resize(width=self._Timebar__width)
			bar.move(left=self._Timebar__left)
		return None
