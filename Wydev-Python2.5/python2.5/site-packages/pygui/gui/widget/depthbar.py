# -*- coding: utf-8 -*- 
#
# Description:
#
# Depth Bar widget Definition
#
#
#
# Changes:
#
# 2014-03-25
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import
from wyvas import Container, Image


# Bar that reflects the current depth of a filesystem browser.
class DepthBar(Container):

	def __init__(self, max_depth=10):
		Container.__init__(self)
		self.repository = None
		self.folder_icon = None
		self.plus_icon = None
		self._max_depth = max_depth
		self._depth = 0
		return None

	# The update method is how louie works its magic.
	def update(self, signal, sender, value):
		self.set_depth(value)
		return None

	initialize = update

	# Set the current depth -- that is, the number of folders above the
	# current one in the filesystem hierarchy
	def set_depth(self, depth):
		self._depth = depth
		self._redraw()
		return None

	# Set the maximum depth that will be displayed as such. If the depth
	# is greater than max_depth, only max_depth folder icons will be displayed,
	# and a + marker (see the plus_icon property) will appear on the left side.
	def set_max_depth(self, max_depth):
		self._max_depth = max_depth
		self._redraw()
		return None

	# Set the repository (folder where the images for folder_icon and plus_icon are stored)
	def set_repository(self, repository):
		self.repository = repository
		return None

	# Set the folder icon (displayed depth times under normal circumstances.
	def set_folder_icon(self, folder_icon):
		self.folder_icon = folder_icon
		return None

	# Set the plus icon (displayed to the left if depth > max_depth).
	def set_plus_icon(self, plus_icon):
		self.plus_icon = plus_icon
		return None

	def _redraw(self):
		relative_width = round(1.0 / (self._max_depth + 1) * 100.0)
		width = '%i%%' % relative_width
		self.wipe()
		if self._depth > self._max_depth:
			plus_icon = Image(image_or_file=self.plus_icon, repository=self.repository)
			self.add_child(plus_icon, width=width, left='0%')
		for i in xrange(min(self._depth, self._max_depth)):
			icon = Image(image_or_file=self.folder_icon, repository=self.repository)
			left = '%i%%' % relative_width * (i + 1)
			self.add_child(icon, width=width, left=left)
		return None
