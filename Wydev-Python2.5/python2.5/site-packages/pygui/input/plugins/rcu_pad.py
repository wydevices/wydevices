# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definition
#
#
#
# Changes:
#
# 2012-01-10
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from peewee.notifier import Task, descriptor_watch
from peewee.gettime import time
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from pygui.facilities.rcu_pad import RcuPad
import pygui.config as config
import pygui.eventmanager.events as event
from time import sleep
import threading

log = GET_LOGGER(__name__)


# Input plugin for sRCU on /dev/ir0
# Warn: It does not use the standard linux input event interface, but it works !
class PluginInterface(Thread):

	def __init__(self, *args):
		log.debug('init')
		threading.Thread.__init__(self)
		try:
			self.rcu = RcuPad(dev='/dev/ir0')
			log.info('rcu = %s', self.rcu)
			self._last_event = None
			self._last_ts = 0
			self._last_pos = None
			self._poll_interval = 0.02
			log.info('RcuPad created')
		except Exception, e:
			log.error('Cannot open RcuPad')
			PRINT_EXCEPTION(e)
			del self.rcu
		else:
			self.setDaemon(True)
			self.setName('RcuPadPlugin')
			Task(self.start).start(1.0)
		return None

	# Unused for now because we are not blocked while reading /dev/ir0 s
	def descriptor_watch_callback(self):
		log.info('get_infos !!')
		if self.rcu.get_struct():
			print self.rcu
		return None

	def post(self):
		rcu = self.rcu
		buttons = rcu.buttons
		if buttons[0]['press']:
			if rcu.dx == 127 or rcu.dy == 127:
				if buttons[1]['press']:
					event.BUTTON1.post(dict(timeout=None))
				elif buttons[2]['press']:
					event.BUTTON2.post(dict(timeout=None))
				elif buttons[3]['press']:
					event.BUTTON3.post(dict(timeout=None))
				elif buttons[4]['press']:
					event.BUTTON4.post(dict(timeout=None))
			else:
				but = buttons[0]
				event.BUTTON0.post(dict(x=rcu.dx, y=rcu.dy, start_x=but['start_x'], start_y=but['start_y']))
		else:
			event.MOUSE.post(dict(x=rcu.dx, y=rcu.dy, timeout=None, clicked=None))
		return None

	def run(self):
		log.debug('start')
		while True:
			try:
				if self.rcu.get_struct():
					self.post()
			except Exception, e:
				log.error('Error while calling RcuPad.get_struct(): %s', e)
			finally:
				sleep(self._poll_interval)
		return None
