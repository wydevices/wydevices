# -*- coding: utf-8 -*- 
#
# Description:
#
# Randomizer Input Plugin Class Definition
#
#
#
# Changes:
#
# 2014-04-03
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from pygui.eventmanager import event_map
from pygui.config import random_events_sample, random_events_duo
from peewee.debug import log
from random import choice, random, randint
from time import sleep
from threading import Thread
from Queue import Full


class EventGenerator(object):

	def __init__(self, events_list):
		self.events_list = events_list
		return None


class NormalEventGenerator(EventGenerator):

	def __iter__(self):
		event_to_play = choice(self.events_list)
		when_to_play = random() * 2
		log.info('Event %r -- Next event will occured in %.3f', event_to_play, when_to_play)
		yield event_to_play
		sleep(when_to_play)


class BurstEventGenerator(EventGenerator):

	_timer = 0.10000000000000001

	def __iter__(self):
		burst_len = randint(2, 30)
		event_to_play = choice(self.events_list)
		log.info('Burst events --- %r will occured %d times', event_to_play, burst_len)
		for i in xrange(burst_len):
			log.info('Event %r num. %d in current burst', event_to_play, i)
			yield event_to_play
			sleep(self._timer)


class FlipFlapEventGenerator(EventGenerator):

	_timer = 0.10000000000000001

	def __init__(self, events_list):
		EventGenerator.__init__(self, events_list=None)
		self.events_list = random_events_duo
		return None

	def __iter__(self):
		burst_len = randint(2, 30)
		duo_event_to_play = choice(self.events_list)
		commute_dict = {duo_event_to_play[0]: duo_event_to_play[1], duo_event_to_play[1]: duo_event_to_play[0]}
		event_to_play = duo_event_to_play[0]
		for i in xrange(burst_len):
			log.info('Event %r num. %d in flip-flap', event_to_play, i)
			yield event_to_play
			event_to_play = commute_dict[event_to_play]
			sleep(self._timer)


class EventRandomizer(Thread):

	_event_generators = (NormalEventGenerator, BurstEventGenerator, FlipFlapEventGenerator)

	def __init__(self, handler, all_events=False):
		Thread.__init__(self)
		self.handler = handler
		if all_events:
			self._events = event_map.keys()
			self._events.remove('POWER')
		else:
			self._events = random_events_sample
		return None

	def run(self):
		while True:
			generator = choice(self._event_generators)(self._events)
			for event in generator:
				self.handler(event)
		return None


# Plugin for generate random events
class PluginInterface(object):

	def __init__(self, post_key):
		self.post_key = post_key
		self.generator = EventRandomizer(self.handle)
		self.generator.setDaemon(True)
		self.generator.start()
		return None

	def handle(self, event, timeout=None):
		try:
			self.post_key(key=event, timeout=timeout)
		except Full:
			log.error('***Randomizer*** Event queue full ==> event %r not passed', event)
		return None
