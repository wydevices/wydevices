# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definition of Mouse input plugin
#
#
#
# Changes:
#
# 2014-03-24
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.notifier import Task
from peewee.gettime import time
from peewee.debug import GET_LOGGER
from Queue import Full
from pygui.input import DIRECTFB_MAP
from pygui.facilities.mouse import Mouse
from time import sleep
import threading

log = GET_LOGGER(__name__)
threshold = 2


# Plugin for mouse control.
class PluginInterface(Thread):
	
	def __init__(self, *args):
		threading.Thread.__init__(self)
		try:
			self.mouse = Mouse()
			self._last_event = None
			self._last_ts = 0
			log.info('Mouse created')
		except:
			log.error('Cannot open mouse')
			del self.mouse
		else:
			self.kbmap_get = DIRECTFB_MAP.get
			self.setDaemon(True)
			self.setName('MousePlugin')
			Task(self.start).start(1.0)
		return None

	def run(self):
		log.debug('start')
		while True:
			try:
				if self.mouse.get():
					log.debug(self.mouse)
					vec = self.mouse.lastvector
					abs_vec = (abs(vec[0]), abs(vec[1]))
					event = None
					if abs_vec[0] > threshold or abs_vec[1] > threshold:
						if abs_vec[0] > abs_vec[1]:
							if vec[0] > 0:
								event = self.kbmap_get('CURSOR_RIGHT')
							else:
								event = self.kbmap_get('CURSOR_LEFT')
						else:
							if vec[1] > 0:
								event = self.kbmap_get('CURSOR_UP')
							else:
								event = self.kbmap_get('CURSOR_DOWN')
					elif self.mouse.bl:
						event = self.kbmap_get('ENTER')
					elif self.mouse.br:
						event = self.kbmap_get('SMALL_A')
					elif self.mouse.bm:
						event = self.kbmap_get('SMALL_H')
					if event:
						if self._last_event is None or event != self._last_event or time() > self._last_ts:
							ts = time() + 0.20000000000000001
							event.post(dict(count=1, timeout=ts))
							self._last_event = event
							self._last_ts = ts
						else:
							log.debug('DROP %s', event)
				except Exception, e:
					log.error('Error while calling Mouse.get(): %s', e)
