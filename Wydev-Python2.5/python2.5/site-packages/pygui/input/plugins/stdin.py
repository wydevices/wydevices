# -*- coding: utf-8 -*- 
#
# Description:
#
# Stdin Input Plugin Definition
#
#
#
# Changes:
#
# 2014-03-25
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

import atexit
import peewee.notifier as notifier
import sys
import termios
from Queue import Full
from pygui.input import KEYBOARD_MAP
import pdb

orig_pdb_set_trace = pdb.set_trace


# Plugin for stdin control
class PluginInterface(object):

	def __init__(self, *args):
		self._PluginInterface__pdb_mode = False
		self.kbmap_get = KEYBOARD_MAP.get
		notifier.descriptor_watch(sys.stdin.fileno(), self.handle)
		atexit.register(self.cleanup)
		stdin_read = sys.stdin.read
		self.read = (lambda : stdin_read(1))
		self.init_term()
		def pdb_set_trace(*args, **kw):
			self._PluginInterface__pdb_mode = True
			self.cleanup()
			orig_pdb_set_trace(*args, **kw)
			self.init_term()
			self._PluginInterface__pdb_mode = False
			return None

		pdb.set_trace = pdb_set_trace
		return None

	known_prefixes = ('\x1b', '\x1bO', '\x1b[', '\x1b[1', '\x1b[2', '\x1b[3', '\x1b[4', '\x1b[5', '\x1b[ 6')
	known_keycodes = {'\x1b[A': 'up', '\x1b[B': 'down', '\x1b[C': 'right', '\x1b[D': 'left', '\x1b[1~': 'home', '\x1b[4~': 'end', '\x1b[5~': 'page_up', '\x1b[6~': 'page_down', '\x1bOP': 'F1', '\x1bOQ': 'F2', '\x1bOR': 'F3', '\x1bOS': 'F4', '\x1b[15~': 'F5', '\x1b[17~': 'F6', '\x1b[18~': 'F7', '\x1b[19~': 'F8', '\x1b[20~': 'F9', '\x1b[21~': 'F10', '\x1b[23~': 'F11', '\x1b[24~': 'F12', '\x1b[2~': 'ins', '\x1b[3~': 'del', '\x1bOF': 'end', '\x1bOH': 'home', '\x1b\x1b': 'esc', '\n': 'enter', ' ': 'space', '\x7f': 'backspace'}
	
	def init_term(self):
		if not hasattr(self, '_tc_orig_settings'):
			self._tc_orig_settings = termios.tcgetattr(sys.stdin.fileno())
		tc = termios.tcgetattr(sys.stdin.fileno())
		tc[3] = tc[3] & ~termios.ICANON
		tc[6][termios.VMIN] = 1
		tc[6][termios.VTIME] = 0
		termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, tc)
		return None

	def cleanup(self):
		termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, self._tc_orig_settings)
		return None

	def getch(self):
		buf = self.read()
		while buf[:3] in self.known_prefixes:
			buf += self.read()
			if buf[-1] == '~':
				break
		code = self.known_keycodes.get(buf)
		if code is None:
			return buf
		return code

	def handle(self):
		if self._PluginInterface__pdb_mode == True:
			return True
		try:
			keycode = self.getch()
		except Exception, e:
			print 'Invalid keycode',
			print str(e)
			keycode = None
		mapped = self.kbmap_get(keycode.upper())
		if keycode is not None and mapped is not None and not self._PluginInterface__pdb_mode:
			try:
				mapped.post({'count': 1, 'timeout': None})
			except Full:
				pass
			except KeyError:
				print 'Unmapped key: %s.' % keycode
		return True
