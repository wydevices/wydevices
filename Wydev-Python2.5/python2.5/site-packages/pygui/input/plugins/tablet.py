# -*- coding: utf-8 -*- 
#
# Description:
#
# Tablet Input Plugin Definition
#
#
#
# Changes:
#
# 2014-03-25
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from peewee.notifier import Task
from peewee.gettime import time
from peewee.debug import GET_LOGGER
from Queue import Full
from pygui.input import DIRECTFB_MAP
from pygui.facilities.mouse import Mouse
from time import sleep
import threading

log = GET_LOGGER(__name__)
move_threshold = 20
move_on_start = True


# Plugin for tablet control.
class PluginInterface(Thread):

	def __init__(self, *args):
		threading.Thread.__init__(self)
		try:
			self.mouse = Mouse(dev='/dev/input/mice')
			self._last_event = None
			self._last_ts = 0
			self._last_pos = None
			log.info('Mouse created')
		except:
			log.error('Cannot open mouse')
			del self.mouse
		else:
			self.kbmap_get = DIRECTFB_MAP.get
			self.setDaemon(True)
			self.setName('MousePlugin')
			Task(self.start).start(1.0)
		return None

	def _get_move_event(self, vec):
		event = None
		count = 1
		abs_vec = (abs(vec[0]), abs(vec[1]))
		if abs_vec[0] > move_threshold or abs_vec[1] > move_threshold:
			if abs_vec[0] > abs_vec[1]:
				if vec[0] > 0:
					event = self.kbmap_get('CURSOR_RIGHT')
				else:
					event = self.kbmap_get('CURSOR_LEFT')
				count = abs_vec[0] / move_threshold
			else:
				if vec[1] > 0:
					event = self.kbmap_get('CURSOR_DOWN')
				else:
					event = self.kbmap_get('CURSOR_UP')
				count = abs_vec[1] / move_threshold
		log.debug('%s %s %s', vec, event, count)
		return (event, count)

	def _get_event(self):
		event = None
		count = 1
		but = self.mouse.buttons['left']
		if not move_on_start and but['stop']:
			vec = [but['stop'][0] - but['start'][0], but['stop'][1] - but['start'][1]]
			event, count = self._get_move_event(vec)
		elif move_on_start and but['start']:
			if not but['stop']:
				if not self._last_pos:
					self._last_pos = [but['start'][0], but['start'][1]]
				vec = [self.mouse.dx - self._last_pos[0], self.mouse.dy - self._last_pos[1]]
				event, count = self._get_move_event(vec)
				if event:
					self._last_pos = [self.mouse.dx, self.mouse.dy]
			else:
				self._last_pos = None
		if not event and self.mouse.buttons['middle']['press']:
			event = self.kbmap_get('ENTER')
		return (event, count)

	def run(self):
		log.debug('start')
		while True:
			try:
				if self.mouse.get():
					event, count = self._get_event()
					if event:
						if self._last_event is None or event != self._last_event or time() > self._last_ts:
							ts = time() + 0.20000000000000001
							event.post(dict(count=count, timeout=ts))
							self._last_ts = ts
						else:
							log.debug('DROP %s', event)
			except Exception, e:
				log.error('Error while calling Mouse.get(): %s', e)
		return None
