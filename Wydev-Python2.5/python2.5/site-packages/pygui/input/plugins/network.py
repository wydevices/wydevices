# -*- coding: utf-8 -*- 
#
# Description:
#
# Network Input Plugin Definition
#
#
#
# Changes:
#
# 2014-03-25
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

import socket
from threading import Thread
from peewee.debug import GET_LOGGER
from peewee.notifier import Task

log = GET_LOGGER(__name__)


# Network remote control input plugin.
# 
# When this plugin is active, you may control pygui by telnetting to
# your board on port 31337, and sending line-separated keycodes,
# e.g. home, wheel_fwd, up, down...
# 
# Blank lines and whitespace in general are ignored, and sending EOF
# (^D) or "disconnect" terminates the connection.
# 
# The wybox sends limited feedback in the form of "OK" or "NOK", followed
# by 2 CRLF sequences, after each command. So far, NOK only means you
# tried to send an unrecognized command.
# 
# Only one remote user may be connected at a time, because really,
# this is a debugging feature for a media center, not an industrial-strength server.
class PluginInterface(Thread):

	HOST = ''
	PORT = 31337

	def __init__(self, post_key):
		Thread.__init__(self)
		self.post_key = post_key
		self.running = False
		self.setDaemon(True)
		self.setName('Network Remote')
		Task(self.start).start(0.10000000000000001)
		return None

	def run(self):
		self.running = True
		sock = socket.socket()
		sock.bind((self.HOST, self.PORT))
		sock.listen(1)
		sock.settimeout(None)
		while self.running:
			conn, addr = sock.accept()
			log.info('Network remote connected from %s', addr)
			while True:
				try:
					data = conn.recv(1024).strip().upper()
				except socket.error, e:
					log.error('Connection error %s to %s', e, addr)
					break
				if not data:
					continue
				if data in ('DISCONNECT', '\x04'):
					break
				try:
					self.post_key(data)
					conn.send('OK' + '\r\n\r\n')
					log.debug('%s sent command %r', addr, data)
					continue
				except KeyError:
					conn.send('NOK' + '\r\n\r\n')
					log.error('%s sent unknown command %r', addr, data)
			conn.close()
			log.info('%s disconnected', addr)
		sock.close()
		return None
