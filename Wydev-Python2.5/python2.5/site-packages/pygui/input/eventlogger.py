# -*- coding: utf-8 -*- 
#
# Description:
#
# Input Plugin Event Logger Definition
#
#
#
# Changes:
#
# 2014-04-03
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from Queue import Full
from threading import Thread
from time import sleep
from pygui.config import TMP_DIR
from peewee.debug import log
from peewee.notifier import sched
from pygui.window import MessageWindow
import os

LOGFILE = TMP_DIR + '/hmi_events.%s'


class EventLogger(object):
	
	def __init__(self):
		self.rotate()
		self.fd = file(LOGFILE % 'record-%d' % int(sched.ts), 'w')
		self._last_ts = sched.ts
		return None

	def rotate(self):
		from glob import glob
		from os import unlink
		flist = glob(LOGFILE % 'record-*')
		flist.sort()
		for fname in flist[:-10]:
			try:
				unlink(fname)
				flist.remove(fname)
			except (IOError, OSError):
				log.error("*WARN* can't remove %s", fname)
		log.debug('Available records:')
		for fname in flist:
			log.debug(' * %s', fname)
		return None

	def add(self, event, args={}):
		ts = sched.ts - self._last_ts
		self._last_ts = sched.ts
		self.fd.write('%f:%s\n' % (ts, event))
		self.fd.flush()
		return None


class EventPlayer(Thread):

	def __init__(self, handler, logfile=None, loop=False):
		Thread.__init__(self)
		self.handler = handler
		self._flag_name = '/tmp/oom.flag'
		if logfile:
			def self._check_oom(*args, **kw):
				return None
			self.fd = file(logfile, 'r')
			self.loop_mode = bool(loop)
		else:
			self._oom_fd = file(LOGFILE % 'oom', 'w')
			self.fd = None
		self.setDaemon(True)
		try:
			os.unlink(self._flag_name)
		except OSError:
			pass
		return None

	def init(self):
		if self.fd is None:
			try:
				self.fd = file(LOGFILE % 'replayloop', 'r')
				self.loop_mode = True
			except IOError:
				self.fd = file(LOGFILE % 'replay', 'r')
				self.loop_mode = False
		else:
			self.fd.seek(0)
		return None

	def _check_oom(self):
		if os.path.exists(self._flag_name):
			from pygui.shared import pygui_globs
			ms = pygui_globs['menustack']
			self._oom_fd.write('Memory problem at %s\n%s\nEOP\n' % (sched.ts, ms))
			self._oom_fd.flush()
			os.unlink(self._flag_name)
		return None

	def stop(self):
		self._running = False
		return None

	def run(self):
		self._running = True
		try:
			self.init()
		except Exception, e:
			log.error("Can't replay: %s", str(e))
			return None
		while self._running:
			raw_line = self.fd.readline()
			if not raw_line:
				if self.loop_mode:
					self.init()
				else:
					break
			line = raw_line.strip()
			if not line or line.startswith('#'):
				continue
			ts, event = line.split(':', 1)
			ts = float(ts)
			event = event.strip()
			sleep(ts)
			self._check_oom()
			try:
				self.handler(event)
			except Full:
				log.error('Event %s dropped because of a slowdown (queue is full)', event)
			except Exception, e:
				log.error('Error injecting keystroke %s: %s', event, str(e))
		return None
