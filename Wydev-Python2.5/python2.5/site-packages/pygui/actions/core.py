# -*- coding: utf-8 -*- 
#
# Description:
#
# ActionsGroup (Hand) Class Definition
# Import all availables hand-actions in each context (universe, items, ...)
#
#
# Changes:
#
# 2011-10-16
# Initial Commit
#
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import os
from pygui.item.core import ActionItem, Item
from pygui.item.containers import GenericContainer
import pygui.config as config
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION

log = GET_LOGGER(__name__)



# A Container representing an actions module.
# Each actions module should be a subdirectory.
# ActionsGroup are used by hand menu to access the actions
class ActionsGroup(GenericContainer):

	def __init__(self, module):
		self.name = module.name
		self.position = module.position
		self.category = module.category.strip().lower()
		self._module = module
		self.default = getattr(module, 'default', False)
		self.unique = getattr(module, 'unique', False)
		GenericContainer.__init__(self, self.name, type_='action')
		return None

	def is_available(self, context):
		return self._module.is_available(context)

	def browse(self, context=None, preview=False):
		try:
			return self._module.get_action_info_list(context)
		except Exception, e:
			log.error('get_action_info_list failed !')
			PRINT_EXCEPTION(e)
			return []

	def __cmp__(self, other):
		return cmp(self.position, other.position)



category_dict = dict()

for action in config.plugins.get('hand_actions'):
	exec 'from pygui.actions import hand_%s as act_module' % action
	ag = ActionsGroup(act_module)
	if not category_dict.has_key(ag.category):
		category_dict[ag.category] = []
	category_dict[ag.category].append(ag)

for group_list in category_dict.values():
	group_list.sort()



# Return the list of available ActionsGroup.
# See hand menu for an example of use.
# - context: dict(): discribe the context:
#  context = dict(menu=self.player, selected=self.selected, parent=self.parent)
# - category: string(): describe the category:
#  category = "navigator"
def get_actiongroups_by_category(context, category):
	chosen_group_list = category_dict[category]
	for group in chosen_group_list:
		if group.is_available(context):
			group.sensitive = True
			group.display_type = group._module.image
		else:
			group.sensitive = False
			group.display_type = 'blank'
	return chosen_group_list



__all__ = ['get_actiongroups_by_category']
