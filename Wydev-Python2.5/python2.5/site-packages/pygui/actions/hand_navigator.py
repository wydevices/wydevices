# -*- coding: utf-8 -*- 
#
# Description:
#
# Navigator ActionsGroup (Hand) Class Definition
#
#
#
# Changes:
#
# 2011-10-16
# Initial Commit
#
# 2011-10-19
# Add "Copy to My Videos" and "Move to My Videos" entries to Records hand menu
# In menu implementation of Rec2vid script
#
# 2012-01-07
# Add "Remove entry from youtube list" entries to youtube user search hand menu.
# Add "Remove entry from youtube list" entries to youtube video search hand menu.
# Add "Remove entry from shoutcast list" entries to shoutcast radio search hand menu.
#
# 2012-01-25
# Add "Remove entry from picasa list" entries to picasa private user hand menu.
# Add "Remove entry from picasa list" entries to picasa public user hand menu.
#
#
# 2012-04-29
# Add "Edit" entries to Records hand menu.
# Allow cut part of video
# Launch video playback, then select parts with mark button.
# When finished use hand menu to start video editing.
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from pygui.actions.jobs.common import push_search_menu, push_thumbnail_menu, switch_to_children_mode, switch_to_parent_mode, display_hidden_items
from pygui.actions.jobs.fs import execute_delete, execute_rename, execute_reorder, execute_eject, execute_mkdir
from pygui.actions.jobs.marker import execute_burn_marker_list, execute_show_marker, execute_copy_marked_items
from pygui.actions.jobs.marker import execute_show_marker
from pygui.actions.jobs.records import execute_cancel_record, execute_rename_record, execute_copy_to_myvideos
from pygui.actions.jobs.recedit import RecEditLaunchItem
from pygui.actions.jobs.tv import display_epg
from pygui.actions.jobs.net import change_login_pwd_net, refresh_net_content
from pygui.actions.jobs.youtube import execute_del_youtube_user, execute_del_youtube_search
from pygui.actions.jobs.shoutcast import execute_del_shoutcast_search
from pygui.actions.jobs.picasa import execute_del_picasa_private_user, execute_del_picasa_public_user
from pygui.config import plugins, user_config
from pygui.shared import pygui_globs
from pygui.markerlist import actions, markerlists
from pygui.item.core import ActionItem
from pygui.item.mediaitem import Playlist
from pygui.item.mediaitem.core import RootItem, TVRootItem, VideoItem
from pygui.item.mediaitem.audiovideo import TVRecordItem
from pygui.item.mediaitem.youtube import YouTubeItem, YouTubeContainer, YouTubeSubContainer, YoutubePlaylistContainer, YoutubeStandardFeedContainer, YoutubeSearchContainer
from pygui.item.mediaitem.shoutcast import ShoutCastRadio, ShoutCastSubSearchFolder, ShoutCastSearchFolder, ShoutCastSubGenreFolder, ShoutCastGenreFolder, ShoutCastTop500Folder, ShoutCastFolder
from pygui.item.mediaitem.picasa import PicasaAlbumContainer, PicasaPrivateUserContainer, PicasaPrivateAreaContainer, PicasaPublicUserContainer, PicasaPublicAreaContainer, PicasaContainer
from peewee.formatters import ellipsize

name = 'Selected'
image = 'hand_selected'
category = 'navigator'
position = 4
default = True
unique = True


def is_available(context):
	return True


def get_action_info_list(context):
	stack = pygui_globs['menustack']
	menu_type = context['menu'].type
	fl = markerlists().get(context['menu'].universe)
	if fl is not None:
		fl.menu = context['menu']
	parental_control = user_config['security']['parental_control']
	parent_mode = user_config['security']['parent_mode']
	menu_video_photo = menu_type in ('image', 'video', 'video_image', 'multiverse')
	menu_music = menu_type in ('audio', 'multiverse')
	menu_tv = menu_type in ('tv_navigator',)
	menu_net = menu_type in ('net_services',)
	captions_dict = {}
	parent_actions, selected_actions = False, False
	if (context['parent'] and
			context['parent'] is not RootItem() and
			not isinstance(context['parent'], PicasaContainer) and
			not isinstance(context['selected'], PicasaPublicAreaContainer) and
			not isinstance(context['selected'], PicasaPublicUserContainer) and
			not isinstance(context['selected'], PicasaPrivateAreaContainer) and
			not isinstance(context['selected'], PicasaPrivateUserContainer) and
			not isinstance(context['selected'], PicasaAlbumContainer) and
			not isinstance(context['parent'], YouTubeContainer) and
			not isinstance(context['selected'], YouTubeSubContainer) and
			not isinstance(context['selected'], YoutubePlaylistContainer) and
			not isinstance(context['selected'], YoutubeStandardFeedContainer) and
			not isinstance(context['selected'], YoutubeSearchContainer) and
			not isinstance(context['parent'], ShoutCastFolder) and
			not isinstance(context['selected'], ShoutCastRadio) and
			not isinstance(context['selected'], ShoutCastSubSearchFolder) and
			not isinstance(context['selected'], ShoutCastSearchFolder) and
			not isinstance(context['selected'], ShoutCastSubGenreFolder) and
			not isinstance(context['selected'], ShoutCastGenreFolder) and
			not isinstance(context['selected'], ShoutCastTop500Folder)):
		captions_dict['parent_caption'] = ellipsize(context['parent'].name, 10)
		parent_actions = True
	if (context['selected'] and
			context['parent'] is not RootItem() and
			not isinstance(context['selected'], ActionItem) and
			not isinstance(context['selected'], PicasaPublicAreaContainer) and
			not isinstance(context['selected'], PicasaPrivateAreaContainer) and
			not isinstance(context['selected'], PicasaAlbumContainer) and
			not (not isinstance(context['parent'], YoutubeSearchContainer) and isinstance(context['selected'], YouTubeSubContainer)) and
			not isinstance(context['selected'], YoutubeStandardFeedContainer) and
			not isinstance(context['selected'], ShoutCastRadio) and
			not isinstance(context['selected'], ShoutCastSearchFolder) and
			not isinstance(context['selected'], ShoutCastSubGenreFolder) and
			not isinstance(context['selected'], ShoutCastGenreFolder) and
			not isinstance(context['selected'], ShoutCastTop500Folder)):
		captions_dict['selected_caption'] = ellipsize(context['selected'].name, 15)
		selected_actions = True
	act = []
	if fl:
		if not menu_tv and parent_actions and context['parent']['backend'] not in ('upnp', 'wyrecord') and (parent_mode or parental_control):
			act.append(ActionItem(_('Duplicate marked items to "%(parent_caption)s"') % captions_dict, type_='action', action=execute_copy_marked_items, args=[context['parent'], fl]))
		for plugin_name in ['marker_play']:
			plugin_action = actions[plugin_name]
			if parent_mode:
				context['parent_mode'] = parent_mode
			else:
				context['parent_mode'] = not parental_control
			if plugin_action.is_compatible(context):
				act.append(ActionItem(_(plugin_action.caption), type_='action', action=plugin_action.execute, args=[context]))
		if parent_actions and context['parent']['backend'] not in ('upnp', 'wyrecord') and (parent_mode or parental_control):
			for plugin_name in ['marker_create_playlist', 'marker_create_favorite']:
				plugin_action = actions[plugin_name]
				if plugin_action.is_compatible(context):
					act.append(ActionItem(_(plugin_action.caption), type_='action', action=plugin_action.execute, args=[context]))
		for plugin_name in ['marker_empty', 'marker_delete']:
			plugin_action = actions[plugin_name]
			if parent_mode:
				context['parent_mode'] = parent_mode
			else:
				context['parent_mode'] = not parental_control
			if plugin_action.is_compatible(context):
				act.append(ActionItem(_(plugin_action.caption), type_='action', action=plugin_action.execute, args=[context]))
		if menu_music or menu_video_photo:
			act.append(ActionItem(_('Display marker list'), type_='action', action=execute_show_marker, args=[context, fl]))
	if parent_actions and (menu_music or menu_video_photo):
		if (parent_mode or not parental_control) and context['parent']['backend'] not in ('upnp', 'wyrecord'):
			act.append(ActionItem(_('Create a new folder in "%(parent_caption)s"') % captions_dict, type_='action', action=execute_mkdir, args=[context]))
		if menu_video_photo and any((it for it in context['menu'].get_item_list('main_list') if 'image' in it.type)):
			act.append(ActionItem(_('Display "%(parent_caption)s" thumbnails') % captions_dict, type_='action', action=push_thumbnail_menu, args=[context, stack]))
	if selected_actions:
		if parent_mode or not parental_control:
			if isinstance(context['selected'], YoutubePlaylistContainer):
				act.append(ActionItem(_('Remove entry from youtube list'), type_='action', action=execute_del_youtube_user, args=[context]))
			elif isinstance(context['parent'], YoutubeSearchContainer):
				act.append(ActionItem(_('Remove entry from youtube list'), type_='action', action=execute_del_youtube_search, args=[context]))
			elif isinstance(context['selected'], ShoutCastSubSearchFolder):
				act.append(ActionItem(_('Remove entry from shoutcast list'), type_='action', action=execute_del_shoutcast_search, args=[context]))
			elif isinstance(context['selected'], PicasaPrivateUserContainer):
				act.append(ActionItem(_('Remove entry from picasa list'), type_='action', action=execute_del_picasa_private_user, args=[context]))
			elif isinstance(context['selected'], PicasaPublicUserContainer):
				act.append(ActionItem(_('Remove entry from picasa list'), type_='action', action=execute_del_picasa_public_user, args=[context]))
			elif isinstance(context['selected'], Playlist) and context['selected']['mimeType'] != 'audio/mpegurl':
				if fl:
					act.append(ActionItem(_('Add marked items to "%(selected_caption)s"') % captions_dict, type_='action', action=execute_copy_marked_items, args=[context['selected'], fl]))
				if menu_tv and context['selected'] and 'tv' in plugins:
					act.append(ActionItem(_('Edit "%(selected_caption)s"') % captions_dict, type_='action', action=execute_reorder, args=[context]))
					act.append(ActionItem(_('Rename "%(selected_caption)s"') % captions_dict, type_='action', action=execute_rename, args=[context]))
					act.append(ActionItem(_('Delete "%(selected_caption)s"') % captions_dict, type_='action', action=execute_delete, args=[context, fl]))
			elif menu_type in ('scheduled_navigator'):
				act.append(ActionItem(_('Rename "%(selected_caption)s"') % captions_dict, type_='action', action=execute_rename_record, args=[context]))
				act.append(ActionItem(_('Delete "%(selected_caption)s"') % captions_dict, type_='action', action=execute_cancel_record, args=[context]))
			elif menu_music or menu_video_photo and context['selected']['backend'] != 'upnp':
				act.append(ActionItem(_('Rename "%(selected_caption)s"') % captions_dict, type_='action', action=execute_rename, args=[context]))
				act.append(ActionItem(_('Delete "%(selected_caption)s"') % captions_dict, type_='action', action=execute_delete, args=[context, fl]))
				if isinstance(context['selected'], TVRecordItem):
					act.insert(0, ActionItem((_('Move \"%s\" to \"%s\"') % (captions_dict['selected_caption'], _('My Videos'))), type_='action', action=execute_copy_to_myvideos, args=[context, True]))
					act.insert(0, ActionItem((_('Copy \"%s\" to \"%s\"') % (captions_dict['selected_caption'], _('My Videos'))), type_='action', action=execute_copy_to_myvideos, args=[context, False]))
					act.insert(0, RecEditLaunchItem(name=_('Edit \"%s\"') % captions_dict['selected_caption'], type_='action', args=[context]))
			elif menu_tv and 'tv' in plugins:
				if isinstance(context['selected'].parent, Playlist):
					act.append(ActionItem(_('Delete "%(selected_caption)s"') % captions_dict, type_='action', action=execute_delete, args=[context, fl]))
				elif isinstance(context['selected'], VideoItem):
					act.append(ActionItem(_('Rename "%(selected_caption)s"') % captions_dict, type_='action', action=execute_rename, args=[context]))
					act.append(ActionItem(_('Delete "%(selected_caption)s"') % captions_dict, type_='action', action=execute_delete, args=[context, fl]))
		if 'transcode' in plugins and context['selected'].type in ('video'):
			psp_path = pygui_globs['psp_path']
			if psp_path:
				from pygui.actions.jobs.transcode import transcode
				context['psp_path'] = psp_path
				act.append(ActionItem(_('Transcode to PSP\xe2\x84\xa2'), type_='action', action=transcode, args=[context]))
	if menu_music or menu_video_photo:
		act.append(ActionItem(_('Search'), type_='action', action=push_search_menu, args=[context, stack]))
		if parental_control:
			if parent_mode:
				name = _('Set to child mode')
				action = switch_to_children_mode
				if user_config['security']['show_hidden']:
					val, name_hide = False, _('Mask hidden items')
				else:
					val, name_hide = True, _('Show hidden items')
				act.append(ActionItem(name_hide, type_='action', action=display_hidden_items, args=[val, context, stack]))
			else:
				name = _('Set to parent mode')
				action = switch_to_parent_mode
			act.append(ActionItem(name, type_='action', action=action, args=[context, stack]))
	if menu_tv and 'tv' in plugins:
		act.append(ActionItem(_('Display program guide'), type_='action', action=display_epg, args=[context['menu'], stack]))
	if menu_net:
		act.append(ActionItem(_('Change login and password for net services'), type_='action', action=change_login_pwd_net, args=[context['menu'], stack]))
		act.append(ActionItem(_('Update Web Services content'), type_='action', action=refresh_net_content, args=[context]))
	return act
