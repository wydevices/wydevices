# -*- coding: utf-8 -*- 
#
# Description:
#
# DVD Action Items Definitons
#
#
#
# Changes:
#
# 2012-04-12
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from pygui.shared import pygui_globs
from pygui.facilities.codemapping import country_dict
from pygui.item.containers import ActionContainer



class DvDSubtitlesActionItem(ActionContainer):

	def __init__(self, item, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		sub_id = self._dvd.get_sub_stream()
		sub_ok = self._dvd.is_sub_enabled()
		self.radio = True
		self.actions_dict[-1] = {'handler': self.subtitles, 'caption': _('OFF'), 'checked': not sub_ok, 'args': (-1, False), 'kwargs': dict(), 'pos': 0}
		for s in xrange(self._dvd.get_available_stream()['nb_sub']):
			tt = self._dvd.get_sub_info(s)
			key = tt['language']
			if key not in ('\xff\xff', ''):
				try:
					lang = country_dict[key]['language']
				except KeyError:
					lang = key
				caption = '%i-%s' % (s, lang)
				self.actions_dict[s] = dict(handler=self.subtitles, caption=caption, checked=(sub_ok if s == sub_id else False), args=(s, True), kwargs=dict(), pos=s + 1)
		if len(self.actions_dict) == 1:
			self.actions_dict = dict()
		return None

	def subtitles(self, sub, display):
		self._update_checked(sub)
		self._dvd.set_sub_stream(sub_stream=max(0, sub), display=display)
		self.menu._set_options_list(keep_selection=True)
		return None



class DvDAudioStreamsActionItem(ActionContainer):

	def __init__(self, item, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		audio_id = self._dvd.get_audio_stream()
		self.radio = True
		for s in xrange(self._dvd.get_available_stream()['nb_audio']):
			tt = self._dvd.get_audio_info(s)
			key = tt['language']
			if key not in ('\xff\xff', ''):
				try:
					lang = country_dict[key]['language']
				except KeyError:
					lang = key
				caption = '%s %s %d' % (lang, tt['coding'], tt['channels'])
				self.actions_dict[s] = dict(handler=self.audiostreams, caption=caption, checked=s == audio_id, args=(s,), kwargs=dict(), pos=s)
		return None

	def audiostreams(self, stream):
		self._update_checked(stream)
		self._dvd.set_audio_stream(stream)
		self.menu._set_options_list(keep_selection=True)
		return None



class DvDChaptersActionItem(ActionContainer):

	def __init__(self, item, player, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		_ptt = self._dvd.get_ptt_location()['num']
		_title = self._dvd.get_title_location()['num']
		self.radio = True
		for ptt in xrange(1, self._dvd.get_number_of_ptt(_title) + 1):
			caption = _('Chapter %d') % ptt
			self.actions_dict[ptt] = dict(handler=self.chapters, caption=caption, checked=ptt == _ptt, args=(ptt, _title, player), kwargs=dict(), pos=ptt)
		return None

	def chapters(self, ptt, title, player):
		self._update_checked(ptt)
		if player._in_pause:
			player.speed = 1
		self._dvd.play_ptt(title=title, ptt=ptt)
		self.menu._set_options_list(keep_selection=True)
		return None



class DvDCameraAnglesActionItem(ActionContainer):

	def __init__(self, item, menu, name, **kw):
		self.item = item
		self._dvd = menu.wydvd
		self.actions_dict = dict()
		ActionContainer.__init__(self, name=name, type_='action', menu=menu, **kw)
		_title = self._dvd.get_title_location()['num']
		_angle = self._dvd.get_current_angle()
		self.radio = True
		for angle in xrange(1, self._dvd.get_number_of_angle(title=_title) + 1):
			caption = _('Angle %d') % angle
			self.actions_dict[angle] = dict(handler=self.camera, caption=caption, checked=angle == _angle, args=(angle,), kwargs=dict(), pos=angle)
		return None

	def camera(self, angle):
		self._update_checked(angle)
		self._dvd.set_angle(angle)
		self.menu._set_options_list(keep_selection=True)
		return None



def go_to_menu(context):
	_dvd = context['menu'].wydvd
	_player = context['selected'].player
	pygui_globs['menustack'].back_to_menu(_player)
	if _dvd.domain not in ('VIDEO_MANAGER_MENU', 'VTS_MENU', 'AMGM_DOM'):
		if _player._in_pause:
			_player.speed = 1
		_dvd.select_menu(menu='title')
	else:
		try:
			_dvd.resume()
		except Exception, e:
			pass
	return None

def snap_picture():
	log.debug('clic clac')
	return None

def get_video_setup(context):
	stack = pygui_globs['menustack']
	stack.back_to_home()
	return None

def display_video_setup_menu():
	log.debug('go to setup menu')
	return None
