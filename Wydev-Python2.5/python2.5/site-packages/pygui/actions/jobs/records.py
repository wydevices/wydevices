# -*- coding: utf-8 -*- 
#
# Description:
#
# Records Jobs Definitions
#
#
#
# Changes:
#
# 2011-10-16
# Initial Commit
#
# 2011-10-19
#
# Add execute_copy_to_myvideos Job
# In menu implementation of Rec2vid script
#
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

import os
import re
import glob
import shutil
import unicodedata 

from peewee.formatters import ellipsize
from peewee.notifier import HookThread
from pygui.config import plugins
from pygui.window import MessageWindow
from pygui.window import ConfirmWindow, KeyboardWindow, BigMessageWindow, NoHomeProgressWindow
from pygui.actions.jobs.fs import GraphicalProgress

if 'tv' in plugins:
	from wyrecord import WyRecord
	from wyrecord.exceptions import SchedulerRecordingRunningError



# Cancel a scheduled record.
def execute_cancel_record(context):
	def __do_cancel(context):
		record = context['selected']
		scheduler = WyRecord().scheduler
		try:
			rule_id = record.periodic_rule.id
			scheduler.RemovePeriodicRecording(rule_id, 'delete_records', False)
		except AttributeError:
			try:
				scheduler.DeleteRecording(record, record.id)
			except SchedulerRecordingRunningError:
				error_title = _('Impossible to cancel recording')
				message = _('This recording has already started.')
				MessageWindow(message, error_title, button=None).show(timeout=5)
				return None
		context['selected'].show_menu()
		return None

	ConfirmWindow(_('Are you sure ?'), confirm_action=__do_cancel, confirm_args=(context,)).show()
	return None



# Rename a scheduled record.
def execute_rename_record(context):
	def __do_rename(kbd):
		if kbd.text:
			record_id = context['selected'].record.id
			scheduler = WyRecord().scheduler
			scheduler.UpdateRecordingName(record_id, kbd.text)
			context['selected'].show_menu()
			kbd.hide()
		return None

	text = context['selected'].name
	kbd = KeyboardWindow(_('Rename'), text=text, confirm_action=__do_rename)
	kbd.show()
	return None



# Copy a record to My Video
# Inform the user of progress with a progressbar
class Rec2VidThread(HookThread):
	def __init__(self, new_name, context, delete):
		HookThread.__init__(self)
		self.context = context
		self.new_name = new_name
		self.delete = delete
		self.chunk_list = glob.glob(os.path.join(('/wymedia/timeshift/records/%s' % self.context['selected'].wymedia_resource['oid']), '*.ts'))
		self.total_chunks = len(self.chunk_list) 
		self.elapsed_chunk = 0
		self.actual_chunk_name = ''
		self.dest_file = None
		self.canceled = False

	def _async_func_process(self):
		if not os.path.exists('/wymedia/My Videos/TS'):
			os.mkdir('/wymedia/My Videos/TS')
#		print ('opening file %s' % ('/wymedia/My Videos/TS/%s.ts' % self.new_name))
		self.dest_file = open(('/wymedia/My Videos/TS/%s.ts' % self.new_name), 'wb') 
		for chunk in self.chunk_list:
			self.actual_chunk_name = os.path.basename(chunk)
#			print ('copying %s' % chunk)
			shutil.copyfileobj(open(chunk, 'rb'), self.dest_file)
			self.elapsed_chunk += 1
			if self.canceled == True:
				break
		self.dest_file.close()
		if self.canceled == True:
			os.remove(('/wymedia/My Videos/TS/%s.ts' % self.new_name))
		elif self.delete == True:
			self.context['selected'].vfs_delete()
		os.system('/wymedia/usr/bin/sqlite3 /etc/params/wymedia/.wyplay_db.-1.db \"UPDATE object SET state=\'tocheck\' WHERE (class=\'object.container\' OR  class=\'object.container.storageSystem\') AND state=\'ok\'\"')
		self.completed.set()
#		print ('closing file %s' % ('/wymedia/My Videos/TS/%s.ts' % self.new_name))

	def func_process(self):
#		print 'func_process'
		self.started.set()
		self._async_func_process()

	def get_infos(self):
#		print 'get_infos'
		self.started.wait()
		if self.elapsed_chunk == self.total_chunks:
			self.completed.set()
			return None
#		print 'get_infos done'
		return dict(percent=self.elapsed_chunk * 100.0 / self.total_chunks, description=(_('Copying %s') % self.actual_chunk_name), total=('%d / %d' % (self.elapsed_chunk, self.total_chunks)), elapsed='', remaining='')

	def on_cancel(self):
		self.canceled = True
		HookThread.on_cancel()


def clean_text(text): 
    text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore') 
    text = unicode(re.sub('[^\w\s-]', '', text).strip()) 
    return re.sub('[-\s]+', '_', text) 



# Copy or move records to My Videos
def execute_copy_to_myvideos(context, delete=False):
	text = None

	def _do_copy(kbd):
		new_name = kbd._text
		if new_name:
			if os.path.exists(('/wymedia/My Videos/TS/%s.ts' % new_name)):
				BigMessageWindow(text=(_('File %s already exist.\nAborting...') % new_name), title=_('Error')).show(timeout=5)
				kbd.hide()
				return None
			try:
				GraphicalProgress(job=Rec2VidThread(new_name, context, delete), title=(_('Copying \"%s\" to \"%s\"...') % (ellipsize(context['selected'].name, 10), _('My Videos'))) , context=context['parent'], win=NoHomeProgressWindow()).start(delay=1)
			except:
				BigMessageWindow(text=_('Error while copying files'), title=_('Error')).show(timeout=5)
		kbd.hide()

	text = clean_text(context['selected'].name)
	kbd = KeyboardWindow(_('Enter the new video name'), text=text, confirm_action=_do_copy)
	context['selected'].show_menu()
	kbd.show()
	return None
