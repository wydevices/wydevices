# -*- coding: utf-8 -*- 
#
# Description:
#
# GUI Windows Class Definitons
#
#
#
# Changes:
#
# 2012-04-01
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from pygui.eventmanager import NullEventHandler, CatchEventHandler
from pygui.eventmanager.windows import *
from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from peewee.notifier import Task
from peewee.messages import send
from pygui.shared import pygui_globs

log = GET_LOGGER(__name__)



class Signal(object):
	
	def __init__(self):
		self._connections = dict()
		return None		

	def connect(self, fn, *args):
		self._connections[fn] = args
		return None		

	def emit(self):
		for conn, args in self._connections.iteritems():
			try:
				conn(*args)
			except Exception:
				log.error('Error while emitting signal %s(%s)', conn, args)
				PRINT_EXCEPTION()
		return None		



# A button used in some windows.
class Button(Signal):

	def __init__(self, name, selected=True):
		self.name = name
		self.selected = selected
		self.type = ''
		Signal.__init__(self)
		return None		



def gui_updater(fn):
	def _do_updates(self, *args, **kw):
		ret = fn(self, *args, **kw)
		handler = pygui_globs['menustack']
		handler.update_window(self)
		return ret

	return _do_updates



# A basic empty window, not very usefull on its own.
class Window(object):

	type = None
	hold = False

	def __init__(self, eventhandler=None):
		self._visible = False
		if eventhandler is None:
			eventhandler = NullEventHandler(self)
		self.eventhandler = eventhandler
		return None

	# Show the window on the screen.
	@gui_updater
	def show(self):
		if self._visible:
			return False
		self._visible = True
		handler = pygui_globs['menustack']
		handler.add_window(self)		
		return True

	# Hide the window.
	def hide(self):
		if not self._visible:
			return False
		self._visible = False
		handler = pygui_globs['menustack']
		handler.remove_window(self)
		return True

	def update(self):
		return None		



# A simple single-text message to help the user wait
class LoadingWindow(Window):

	type = 'loading'

	def __init__(self, text=''):
		Window.__init__(self)
		self.text = text
		self.eventhandler = CatchEventHandler(self)
		return None



# A simple single-text message to help the user wait
class KeystrokeWindow(Window):

	type = 'keystroke'
	persistent = True

	def __init__(self, text=''):
		Window.__init__(self)
		self.text = text
		self.eventhandler = NullEventHandler(self)
		return None

	@gui_updater
	def set_key(self, key):
		if key:
			send('show_%s_key'%key, sender=self)
		else:
			send('hide_key', sender=self)
		self.text = key
		return None



# A simple window without eventhandler showing a text.
class TextWindow(Window):

	type = 'text'

	def __init__(self, text, title=None):
		Window.__init__(self)
		self.text = text
		if title is not None:
			self.title = title
		else:
			self.title = _('Information:')
		self.eventhandler = CatchEventHandler(self)
		return None



# A simple window showing a text. The window will hide on input events.
class MessageWindow(Window):

	type = 'message'

	def __init__(self, text, title='', button=False):
		Window.__init__(self)
		self.text = text
		self.title = title
		if button is not False:
			self.button = button
		else:
			self.button = Button(_('OK'))
		self._timeout_timer = None
		self.eventhandler = MessageEventHandler(self)
		return None

	def show(self, timeout=None, timeout_callback=None):
		self.timeout_callback = timeout_callback
		ret = Window.show(self)
		if timeout:
			def _MessageWindow__callback_runner():
				self.hide()
				if self.timeout_callback:
					self.timeout_callback()
				return None

			self._timeout_timer = Task(_MessageWindow__callback_runner)
			self._timeout_timer.start(timeout)
		return ret

	def hide(self):
		if self._timeout_timer:
			self._timeout_timer.stop()
		return Window.hide(self)



# A simple window that's supposed to show a lot more text
# than the regular MessageWindow.
class BigMessageWindow(MessageWindow):

	type = 'bigmessage'


