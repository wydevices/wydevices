# -*- coding: utf-8 -*- 
#
# Description:
#
# GUI IP Window Class Definiton
#
#
#
# Changes:
#
# 2012-04-01
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import
from pygui.window.confirmwindow import ConfirmWindow
from pygui.window.core import gui_updater, Button
from pygui.eventmanager.windows import MultiIntegerButtonsEventHandler



# IP address editor.
class IpWindow(ConfirmWindow):

	type = 'ip'

	def __init__(self, ip, title=_('IP address'), buttons=None, confirm_action=None, confirm_args=()):
		self.title = title
		self.modifiable_buttons = [IntegerButton(int(digit), False, 0, 255, True) for digit in ip.split('.', 3)]
		if not buttons:
			buttons = [Button(_('OK'), True), Button(_('Cancel'), False)]
			buttons[1].connect(self.hide)
		ConfirmWindow.__init__(self, text=ip, buttons=buttons, confirm_action=confirm_action, confirm_args=confirm_args)
		for but in buttons:
			but.type = 'action'
		self.buttons = self.modifiable_buttons + self.buttons
		self.eventhandler = MultiIntegerButtonsEventHandler(4, self)
		self.selected = self.modifiable_buttons[0]
		return None

	@gui_updater
	def update(self):
		self.text = '%i.%i.%i.%i' % tuple((but.val for but in self.modifiable_buttons))
		return None



class IntegerButton(Button):

	def __init__(self, val, selected=True, min=-1000000, max=100000, cyclic=False):
		self.val = val
		self._max = max
		self._min = min
		self.cyclic = cyclic
		Button.__init__(self, '%d' % self.val, selected)
		return None

	def upper(self):
		if self.val < self._max:
			self.val += 1
		elif self.cyclic:
			self.val = self._min
		self.name = '%d' % self.val
		return None

	def lower(self):
		if self.val > self._min:
			self.val -= 1
		elif self.cyclic:
			self.val = self._max
		self.name = '%d' % self.val
		return None

	def set_max(self, val):
		self._max = val
		if self.val > self._max:
			self.val = self._max
			self.name = '%d' % self.val
		return None

	max = property((lambda self: self._max), set_max)

	def set_min(self, val):
		self._min = val
		if self.val < self._min:
			self.val = self._min
			self.name = '%d' % self.val
		return None

	min = property((lambda self: self._min), set_min)
