# -*- coding: utf-8 -*- 
#
# Description:
#
# Confirm Window Class Definition
#
#
#
# Changes:
#
# 2012-04-01
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

__all__ = ['ConfirmWindow']

from pygui.window.core import Window, Button, gui_updater
from pygui.eventmanager.windows import ButtonListEventHandler, DismissableButtonListEventHandler



# A simple window showing a text and two buttons for the user to choose
# from. In most cases this window is used to ask the user if an 
# should really be performed.
class ConfirmWindow(Window):

	type = 'confirm'

	def __init__(self, text='', buttons=None, confirm_action=None, confirm_args=()):
		Window.__init__(self)
		self._text = text
		if buttons is None:
			buttons = [Button(_('Yes'), True), Button(_('No'), False)]
		self.buttons = buttons
		self._reset_selection()
		self.eventhandler = ButtonListEventHandler(self)
		if confirm_action:
			buttons[0].connect(confirm_action, *(confirm_args if confirm_args else tuple()))
		return None

	def _get_text(self):
		return self._text

	@gui_updater
	def _set_text(self, val):
		self._text = val
		return None

	text = property(_get_text, _set_text)
	del _get_text
	del _set_text

	def _reset_selection(self):
		try:
			initial_selection = [but for but in self.buttons if but.selected][0]
		except IndexError:
			try:
				initial_selection = self.buttons[0]
			except IndexError:
				initial_selection = None
		self._ConfirmWindow__selected = initial_selection
		return None

	def _get_selected(self):
		return self._ConfirmWindow__selected

	def _set_selected(self, val):
		try:
			old_sel_idx = self.buttons.index(self._ConfirmWindow__selected)
		except ValueError:
			old_sel_idx = None
		if None not in (self._ConfirmWindow__selected, old_sel_idx):
			self.buttons[old_sel_idx].selected = False
		try:
			new_sel_idx = self.buttons.index(val)
		except ValueError:
			pass
		else:
			self.buttons[new_sel_idx].selected = True
		self._ConfirmWindow__selected = val
		return None

	selected = property(_get_selected, _set_selected)
	del _get_selected
	del _set_selected



class BigConfirmWindow(ConfirmWindow):

	type = 'bigconfirm'

	def __init__(self, text='', buttons=None, confirm_action=None, confirm_args=()):
		ConfirmWindow.__init__(self, text, buttons, confirm_action, confirm_args)
		self.eventhandler = DismissableButtonListEventHandler(self)
		return None
