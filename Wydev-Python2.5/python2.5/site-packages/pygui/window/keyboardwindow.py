# -*- coding: utf-8 -*- 
#
# Description:
#
# GUI Keyboard Window Class Definition
#
#
#
# Changes:
#
# 2012-04-01
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

__all__ = ['KeyboardWindow', 'NumericKeyboardWindow', 'SearchKeyboardWindow', 'HexaKeyboardWindow', 'SilentKeyboardWindow']

from pygui.window.confirmwindow import ConfirmWindow
from pygui.window.core import Button
from pygui.eventmanager.windows import KeyboardEventHandler, SearchKeyboardEventHandler, SilentKeyboardEventHandler
from peewee.debug import GET_LOGGER
from functools import partial

log = GET_LOGGER(__name__)
latin_map = [[u'A', u'B', u'C', u'D', u'E', u'F', u'G', u'H', u'I', u'J', u'K', u'L', u'M', u'N', u'O', u'P', u'Q', u'R', u'S', u'T', u'U', u'V', u'W', u'X', u'Y', u'Z', u'[', u'\\', u']', u'^', u'_', u'0', u'1', u'2', u'3', u'4', u'5', u'6', u'7', u'8', u'9', u':', u';', u'<', u'=', u'>', u'?', u' '], [u'a', u'b', u'c', u'd', u'e', u'f', u'g', u'h', u'i', u'j', u'k', u'l', u'm', u'n', u'o', u'p', u'q', u'r', u's', u't', u'u', u'v', u'w', u'x', u'y', u'z', u'{', u'|', u'}', u'~', u'@', u'!', u'"', u'#', u'$', u'%', u'&', u"'", u'(', u')', u'*', u'+', u',', u'-', u'.', u'/', u'`', u' '], [u'\xc1', u'\xc2', u'\xc3', u'\xc4', u'\xc5', u'\xc6', u'\xc7', u'\xc8', u'\xc9', u'\xca', u'\xcb', u'\xcc', u'\xcd', u'\xce', u'\xcf', u'\xd0', u'\xd1', u'\xd2', u'\xd3', u'\xd4', u'\xd5', u'\xd6', u'\xd7', u'\xd8', u'\xd9', u'\xda', u'\xdb', u'\xdc', u'\xdd', u'\xde', u'\xdf', u'\xe0', u'\xe1', u'\xe2', u'\xe3', u'\xe4', u'\xe5', u'\xe6', u'\xe7', u'\xe8', u'\xe9', u'\xea', u'\xeb', u'\xec', u'\xed', u'\xee', u'\xef', u'\xf0'], [u'\xf1', u'\xf2', u'\xf3', u'\xf4', u'\xf5', u'\xf6', u'\xf7', u'\xf8', u'\xf9', u'\xfa', u'\xfb', u'\xfc', u'\xfd', u'\xfe', u'\xff', u'\xa1', u'\xa2', u'\xa3', u'\u20ac', u'\xa5', u'\u0160', u'\xa7', u'\u0161', u'\xa9', u'\xaa', u'\xab', u'\xac', u'\xad', u'\xae', u'\xaf', u'\xb0', u'\xb1', u'\xb2', u'\xb3', u'\u017d', u'\xb5', u'\xb6', u'\xb7', u'\u017e', u'\xb9', u'\xba', u'\xbb', u'\u0152', u'\u0153', u'\u0178', u'\xbf', u'\xc0', u' ']]



class KeyboardWindow(ConfirmWindow):

	type = 'keyboard'

	def __init__(self, title='', text='', buttons=None, confirm_action=None, alphabet='', special_chars=latin_map, columns=None, eventhandler=None):
		ConfirmWindow.__init__(self, text=text, buttons=[])
		self.title = title
		if not columns:
			columns = 12
		self.columns = columns
		if not buttons:
			buttons = [Button('<<<', False), Button('>>>', False), Button(_('Delete'), False), Button(_('OK'), True), Button(_('Cancel'), False)]
			buttons[0].connect(partial(self.change_special_char, -1))
			buttons[1].connect(self.change_special_char)
			buttons[2].connect(self.delete_char)
			buttons[3].connect((confirm_action if confirm_action else KeyboardWindow.hide), self)
			buttons[4].connect(self.hide)
		for but in buttons:
			but.type = 'action'
		self.alphabet = self._KeyboardWindow__mk_text_button_list(alphabet)
		self.special_char_list = []
		if not isinstance(special_chars, (list, tuple)):
			special_chars = [special_chars]
		for special_char in special_chars:
			self.special_char_list.append(self._KeyboardWindow__mk_text_button_list(special_char))
		self.special_chars = self.special_char_list[0]
		self.action_buttons = buttons
		self.button_ranges = [self.alphabet, self.special_chars, buttons]
		self._uppercase_mode = False
		self._text_cursor_pos = len(self.text)
		self._reset_selection()
		self.change_special_char(0)
		self.eventhandler = (eventhandler if eventhandler else KeyboardEventHandler(self))
		return None

	# Don't count action keys
	def get_max_keys_number(self):
		sc_len = max((len(cl) for cl in self.special_char_list))
		return sc_len + len(self.alphabet)

	def _get_button_ranges(self):
		return self._button_ranges

	def _set_button_ranges(self, b_range):
		self._button_ranges = b_range
		self.buttons = [but for row in b_range for but in row]
		return None

	button_ranges = property(_get_button_ranges, _set_button_ranges)
	del _get_button_ranges
	del _set_button_ranges

	def _KeyboardWindow__mk_text_button_list(self, char_string):
		ret = []
		for char in char_string:
			but = Button(char, False)
			but.connect(self.insert_char)
			ret.append(but)
		return ret

	def change_char_case(self):
		log.warning('Changing characters case is not supported anymore !')
		return None

	def change_special_char(self, sense=1):
		sense = max(-1, min(1, sense))
		chars_list = self.special_char_list
		actual_idx = chars_list.index(self.special_chars)
		old_list = chars_list[(actual_idx + sense - 1) % len(chars_list)]
		new_list = chars_list[(actual_idx + sense + 1) % len(chars_list)]
		if sense > 0 and self.special_chars == chars_list[-1]:
			self.special_chars = chars_list[0]
		elif sense < 0 and self.special_chars == chars_list[0]:
			self.special_chars = chars_list[-1]
		else:
			self.special_chars = chars_list[actual_idx + sense]
		self.button_ranges = [self.alphabet, self.special_chars, self.action_buttons]
		self.action_buttons[0].name = ''.join((i.name for i in old_list[:4])) + ' <'
		self.action_buttons[1].name = '> ' + ''.join((i.name for i in new_list[:4]))
		return None

	def delete_char(self):
		if self._text_cursor_pos > 0:
			self.text = self.text[:self._text_cursor_pos - 1] + self.text[self._text_cursor_pos:]
			self._text_cursor_pos -= 1
		return None

	def insert_char(self):
		char = self.selected.name
		if self._text_cursor_pos > 0:
			self.text = self.text[:self._text_cursor_pos] + char + self.text[self._text_cursor_pos:]
		else:
			self.text = char + self.text[self._text_cursor_pos:]
		self._text_cursor_pos += 1
		return None



class SilentKeyboardWindow(KeyboardWindow):

	type = 'silent_keyboard'

	def __init__(self, buttons=None, alphabet='', special_chars=latin_map, insert_char_action=None, delete_char_action=None, columns=None, eventhandler=None):
		self._insert_char_action = insert_char_action
		self._delete_char_action = delete_char_action
		if not buttons:
			buttons = [Button('<<<', False), Button('>>>', False), Button(_('Delete'), False), Button(_('Hide'), False)]
			buttons[0].connect(partial(self.change_special_char, -1))
			buttons[1].connect(self.change_special_char)
			buttons[2].connect(self.delete_char)
			buttons[3].connect(self.hide)
		for but in buttons:
			but.type = 'action'
		KeyboardWindow.__init__(self, '', '', buttons, None, alphabet, special_chars, columns, (eventhandler if eventhandler else SilentKeyboardEventHandler(self)))
		return None

	def delete_char(self):
		if self._delete_char_action:
			self._delete_char_action()
		return None

	def insert_char(self):
		if self._insert_char_action:
			self._insert_char_action(self.selected.name)
		return None



class NumericKeyboardWindow(KeyboardWindow):

	type = 'numeric_keyboard'

	def __init__(self, title='Enter number:', value=0, confirm_action=None, columns=3):
		text = value
		if isinstance(value, int):
			text = str(value)
		elif isinstance(value, (float, long)):
			text = '%.2f' % value
		buttons = [Button(_('C'), False), Button(_('OK'), True), Button(_('Cancel'), False)]
		buttons[0].connect(self.delete_char)
		buttons[1].connect((confirm_action if confirm_action else lambda: kbd.hide()), self)
		buttons[2].connect(self.hide)
		KeyboardWindow.__init__(self, title=title, text=text, confirm_action=confirm_action, columns=columns, special_chars=['.'], alphabet='7894561230', buttons=buttons)
		return None

	def _NumericKeyboardWindow__stripped_val(self):
		return self._text.replace(' ', '')

	def get_int(self):
		return int(self._NumericKeyboardWindow__stripped_val())

	def get_float(self):
		return float(self._NumericKeyboardWindow__stripped_val())



class SearchKeyboardWindow(KeyboardWindow):

	type = 'keyboard'

	def __init__(self, title='Search', text='', confirm_action=None, search_menu=None):
		KeyboardWindow.__init__(self, title=title, text=text, confirm_action=confirm_action, eventhandler=SearchKeyboardEventHandler(self))
		self.search_menu = search_menu
		return None

	def hide(self, hide_search_menu=False):
		KeyboardWindow.hide(self)
		if hide_search_menu:
			self.search_menu.hide()
		return None



class HexaKeyboardWindow(KeyboardWindow):

	type = 'hexa_keyboard'

	def __init__(self, title='Search', text='', confirm_action=None):
		buttons = [Button(_('Exit'), False), Button(_('Delete'), False), Button(_('OK'), True)]
		buttons[0].connect(self.hide)
		buttons[1].connect(self.delete_char)
		buttons[2].connect((confirm_action if confirm_action else lambda: kdb.hide()), self)
		alphabet = '0123456789ABCDEF'
		KeyboardWindow.__init__(self, title=title, text=text, buttons=buttons, alphabet=alphabet, special_chars=['', ''])
		return None
