# -*- coding: utf-8 -*- 
#
# Description:
#
# WyPlayer DBus Proxy Class Definitions
#
#
#
# Changes:
#
# 2011-10-20
# Initial Commit
#
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from wydbus import WyDbus, WDB_AS_THREAD



class DBusProp(object):

	def __init__(self, ref, name, sig):
		self._DBusProp__get = ref.method('__%s_get' % name, '', sig)
		self._DBusProp__set = ref.method('__%s_set' % name, sig, '')
		ref.inst.signal('__%s_notify' % name, sig, self._DBusProp__notify, WDB_AS_THREAD)
		self._DBusProp__value = None
		self._DBusProp__cb = None
		return None

	def get(self):
		if self._DBusProp__value is None:
			self._DBusProp__value = self._DBusProp__get()
		return self._DBusProp__value

	def set(self, value):
		self._DBusProp__set(value)
		return None

	def set_notify(self, cb):
		self._DBusProp__cb = cb
		return None

	def _DBusProp__notify(self, value):
		self._DBusProp__value = value
		if self._DBusProp__cb is not None:
			self._DBusProp__cb(value)
		return None



class RecordProxy(object):
	pass



class WyPlayerProxy(object):

	def __init__(self, name='com.wyplay.wyplayer', path='/com/wyplay/WyPlayer'):
		self.bus = WyDbus()
		self.props = {}
		self.wyplayer = self.bus.reference(name, path)
		self._init_root_()
		self.wyplayer.media = self.bus.reference(name, path + '/Media')
		self._init_media_()
		self.wyplayer.playback = self.bus.reference(name, path + '/Playback')
		self._init_playback_()
		self.wyplayer.record = self.bus.reference(name, path + '/Record')
		self._init_record_()
		return None

	def _init_root_(self):
		wpl = self.wyplayer
		wpl.open = wpl.method('open', 's', '')
		wpl.close = wpl.method('close', '', '')
		wpl.exit = wpl.method('exit', '', '')
		wpl.set_aopts = wpl.method('set_aopts', 's', '')
		wpl.set_vopts = wpl.method('set_vopts', 's', '')
		wpl.set_sopts = wpl.method('set_sopts', 's', '')
		wpl.set_dopts = wpl.method('set_dopts', 's', '')
		wpl.inst = self.bus.instance(wpl._path)
		self.props['status'] = DBusProp(wpl, 'status', 's')
		self.props['log_level'] = DBusProp(wpl, 'log_level', 'u')
		self.props['exception'] = DBusProp(wpl, 'exception', 's')
		return None

	def _init_media_(self):
		media = self.wyplayer.media
		media.load = media.method('load', 'sa{ss}', '')
		media.flush = media.method('flush', '', '')
		media.alist = media.method('alist', '', 'a(isisii)')
		media.vlist = media.method('vlist', '', 'a(isiiid)')
		media.slist = media.method('slist', '', 'a(iss)')
		media.inst = self.bus.instance(media._path)
		self.props['uri'] = DBusProp(media, 'uri', 's')
		self.props['container'] = DBusProp(media, 'container', 's')
		self.props['duration'] = DBusProp(media, 'duration', 't')
		self.props['scrambled'] = DBusProp(media, 'scrambled', 'b')
		self.props['aid'] = DBusProp(media, 'aid', 'i')
		self.props['vid'] = DBusProp(media, 'vid', 'i')
		self.props['sid'] = DBusProp(media, 'sid', 'i')
		return None

	def _init_playback_(self):
		plb = self.wyplayer.playback
		plb.pos = plb.method('pos', 'bbii', 'ad')
		plb.play = plb.method('play', 'db', '')
		plb.stop = plb.method('stop', '', '')
		plb.seek = plb.method('seek', 'd', '')
		plb.inst = self.bus.instance(plb._path)
		self.props['speed'] = DBusProp(plb, 'speed', 'd')
		return None

	def _init_record_(self):
		rec = self.wyplayer.record
		rec.new = rec.method('new', 's', 's')
		return None
