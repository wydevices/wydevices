# -*- coding: utf-8 -*- 
#
# Description:
#
# Cache Decorator Class Definition
#
#
#
# Changes:
#
# 2012-04-15
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from peewee.gettime import time



# Decorator for caching function result during <validity>
# float(validity): expressed in seconds
# BUG/LIMITATION:
#    parameters are not checked at all, you'r warned !
#    (You probably don't want to use that on variable parameters calls)
class ClassCache(object):

	_ClassCache__cache = dict()

	def __call__(self, validity=1.0, not_null=False):
		def decorator(fn):
			self.reset(fn)
			cached_data = self._ClassCache__cache[fn]
			def cache_decoration(*args, **kw):
				now = time()
				if now > cached_data['timestamp'] + validity or (cached_data['val'] is None and not_null is True):
					cached_data['val'] = fn(*args, **kw)
					cached_data['timestamp'] = time()
				return cached_data['val']
			return cache_decoration
		return decorator

	def reset(self, fn):
		self._ClassCache__cache[fn] = dict(timestamp=0, val=None)
		return None



cache_result = ClassCache()

__all__ = ['cache_result']
