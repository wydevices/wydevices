# -*- coding: utf-8 -*- 
#
# Description:
#
# Peewee Threaded Timers Class Definitions
#
#
#
# Changes:
#
# 2012-05-04
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from time import sleep
from thread import start_new_thread



class ThreadedOneShotTimer(object):

	def __init__(self, callback, args=[], kw={}):
		self._ThreadedOneShotTimer__cb = callback
		self._ThreadedOneShotTimer__interval = 0.10000000000000001
		self._stopped = False
		self._ThreadedOneShotTimer__in_execution = False
		self._args = args
		self._kw = kw
		return None

	def _execute(self):
		self._ThreadedOneShotTimer__in_execution = True
		sleep(self._ThreadedOneShotTimer__interval)
		if not self._stopped:
			try:
				self._ThreadedOneShotTimer__cb(*self._args, **self._kw)
			except Exception, e:
				print 'Error executing timer %s: %s' % (self._ThreadedOneShotTimer__cb, str(e))
			except:
				print 'Error executing timer %s' % self._ThreadedOneShotTimer__cb
		self._ThreadedOneShotTimer__in_execution = False
		return None

	def start(self, interval):
		if self._ThreadedOneShotTimer__in_execution:
			print 'Starting a started timer, do nothing...'
		self._ThreadedOneShotTimer__interval = interval
		self._stopped = False
		start_new_thread(self._execute, tuple())
		return self

	def stop(self):
		self._stopped = True
		return None



class ThreadedTimer(ThreadedOneShotTimer):

	def _execute(self):
		ThreadedOneShotTimer._execute(self)
		if not self._stopped:
			start_new_thread(self._execute, tuple())
		return None
