# -*- coding: utf-8 -*- 
#
# Description:
#
# Peewee Control Mode Class Definiton
#
#
#
# Changes:
#
# 2012-05-04
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from peewee.debug import GET_LOGGER, PRINT_EXCEPTION
from peewee.misc_utils import MetaSingleton
from peewee.notifier import Task
from peewee.dbus import peewee_dbus

log = GET_LOGGER(__name__)

mode_dict = {'mtp_on': (False, True),
						 'mtp_off': (True, False)}



# Main class to manage control mode (mtp / pygui / dms)
class ControlModeManager(object):

	__metaclass__ = MetaSingleton

	def __init__(self):
		self._obs = []
		self._wdb = peewee_dbus
		self._wymts = self._wdb.reference('com.wyplay.wymts', '/com/wyplay/wymts', 'com.wyplay.wymts')
		self._wymts_sig = self._wdb.instance('/com/wyplay/wymts')
		self._wymts_sig.signal('Connected', 's', self.connected, 0)
		self._wymts_sig.signal('Disconnected', 's', self.disconnected, 0)
		self._IsConnected = self._wymts.method('IsConnected', 's', 'b')
		self._current_mode = 'mtp_off'
		self._task_control = Task(self._set_control)
		self.startup()
		return None

	def startup(self):
		try:
			mtp = self._IsConnected('MTP')
		except:
			log.error('Error while calling IsConnected')
			PRINT_EXCEPTION()
			mtp = False
		if mtp:
			self._task_control.args = ('mtp_on',)
			self._task_control.start(0)
		return None

	def register_observer(self, obs):
		log.debug('%s registred', obs)
		self._obs.append(obs)
		return None

	def unregister_observer(self, obj):
		self._obs.remove(obj)
		return None

	def _set_control(self, mode):
		if mode != self._current_mode:
			self._current_mode = mode
			rcu, standby = mode_dict[mode]
			log.debug('setting control: mode=%s rcu=%s standby=%s', mode, rcu, standby)
			for obs in self._obs:
				try:
					obs(mode, rcu, standby)
					log.debug('%s called', obs)
				except:
					log.debug('calling %s failled', obs)
		else:
			log.debug('current_mode == wanted_mode == %s: nothing to do', mode)
		return None

	def connected(self, mode):
		log.debug('sig connected(%s) received', mode)
		handler = '_' + mode.lower() + '_connect'
		ref = getattr(self, handler, None)
		if ref:
			ref()
		else:
			log.warn('no handler for %s', handler)
		return None

	def disconnected(self, mode):
		log.debug('sig disconnected(%s) received', mode)
		handler = '_' + mode.lower() + '_disconnect'
		ref = getattr(self, handler, None)
		if ref:
			ref()
		else:
			log.warn('no handler for %s', handler)
		return None

	def _mtp_connect(self):
		log.debug('MTP connect')
		self._task_control.args = ('mtp_on',)
		self._task_control.start(2)
		return None

	def _mtp_disconnect(self):
		log.debug('MTP disconnect')
		self._task_control.args = ('mtp_off',)
		self._task_control.start(2)
		return None



if __name__ == '__main__':
	ctrl = ControlModeManager()
	import pdb
	pdb.set_trace()
