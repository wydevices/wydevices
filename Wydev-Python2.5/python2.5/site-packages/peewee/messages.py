# -*- coding: utf-8 -*- 
#
# Description:
#
# Peewee Messages Class Definitions
#
#
#
# Changes:
#
# 2011-12-07
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.


from __future__ import absolute_import

from peewee.debug import GET_LOGGER

log = GET_LOGGER(__name__)
_connected = dict()



# Connects some handler function (receiver) to a sender (any object) for given signal (str)
def connect(receiver, signal, sender=None):
	log.debug('Connecting receiver %s to sender %s on signal %s', receiver, sender, signal)
	linked = _connected.get(sender)
	if linked is None:
		_connected[sender] = {receiver: set([signal])}
	else:
		if receiver in linked:
			linked[receiver].add(signal)
		else:
			linked[receiver] = set([signal])
	return None



# Disconnect a handler from a signal.
# If wipe=True, the handler is disconnected from all signals.
def disconnect(receiver, signal, sender=None, wipe=True):
	log.debug('Disconnecting receiver %s from sender %s on signal %s (wipe=%s)', receiver, sender, signal, wipe)
	linked = _connected.get(sender)
	linked[receiver].discard(signal)
	if wipe or not linked[receiver]:
		del linked[receiver]
	if not linked:
		del _connected[sender]
	return None



# Sends a named signal to peers connected to the specified sender
# *args and **kw arguments will be passed to the receiver.
def send(signal, sender=None, *args, **kw):
	try:
		mapping = _connected[sender]
	except KeyError:
		log.warn('No handler for signal %s from sender %s', signal, sender)
	else:
		log.debug('MESSAGE %s from %s', signal, sender)
		if sender is not None:
			args = (sender,) + args
		for (receiver, signals) in mapping.iteritems():
			if signal in signals:
				receiver(signal, *args, **kw)
	return None
