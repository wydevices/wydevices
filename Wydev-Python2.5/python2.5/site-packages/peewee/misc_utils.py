# -*- coding: utf-8 -*- 
#
# Description:
#
# MutliProxy & MetaSinglton Class Definitions
#
#
#
# Changes:
#
# 2012-04-15
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from __future__ import absolute_import

from peewee.debug import GET_LOGGER

log = GET_LOGGER('utils')



# Extension to the standard Python property mechanism that follows the
# overriding of the fset, fget and fdel methods. Used just like a property.
class late_property(property):

	# See property.__init__
	def __init__(self, fget=None, fset=None, fdel=None, doc=None):
		self._fget = fget
		self._fset = fset
		self._fdel = fdel
		super(late_property, self).__init__((self.fget if fget else None), (self.fset if fset else None), (self.fdel if fdel else None), doc)
		return None

	def fget(self, target):
		return getattr(target, self._fget.__name__)()

	def fset(self, target, value):
		getattr(target, self._fset.__name__)(value)
		return None

	def fdel(self, target):
		getattr(target, self._fdel.__name__)()
		return None



class MultiProxy(object):

	def __init__(self, proxified_objects):
		self._MultiProxy__po = tuple(proxified_objects)
		return None

	def __getattr__(self, attr):
		li = [getattr(obj, attr) for obj in self._MultiProxy__po]
		if callable(li[0]):
			def _run_me(*args, **kw):
				for fn in li:
					fn(*args, **kw)
				return None
			setattr(self, attr, _run_me)
			return _run_me
		else:
			log.debug('Not callable proxy (for %s) !!!', attr)
			return li[0]
		return None



class MetaSingleton(type):

	def __init__(cls, name, bases, dic):
		super(MetaSingleton, cls).__init__(name, bases, dic)
		cls._s_instance_ = None
		return None

	def __call__(cls, *args, **kw):
		if cls._s_instance_ is None:
			cls._s_instance_ = super(MetaSingleton, cls).__call__(*args, **kw)
		return cls._s_instance_
