# -*- coding: utf-8 -*- 
#
# Description:
#
#  Definition of network manager
#
#
#
# Changes:
#
# 2014-03-24
# Initial Commit
#
#
# Copyright 2010-2014, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from peewee.networkmanager import NetworkManager

try:
	from IPython.Shell import IPShellEmbed
	from IPython.iplib import InteractiveShell
except ImportError, e:
	print 'Failed to import IPython:',
	print e
	sys.exit(1)

NM = NetworkManager()
ipshell = IPShellEmbed()


def _get_device_by_name(dev_name):
	devs = NM.get_devices()
	d = filter((lambda dev: dev.get_name() == dev_name), devs)
	if d == []:
		raise NameError('No such interface (%s)' % dev_name)
	return d[0]


def _get_network_by_name(dev, essid):
	nets = dev.get_networks()
	n = filter((lambda net: net.get_name() == essid), nets)
	if n == []:
		raise NameError('No such ESSID (%s)' % net_name)
	return n[0]


def magic_list_devices(self, parameter_s=''):
	devs = NM.get_devices()
	print '+--------+----------+--------+---------------+---------------+---------------+'
	print '| Device |   Type   | Active |  IP Address   |    Netmask    |   Broadcast   |'
	print '+--------+----------+--------+---------------+---------------+---------------+'
	for dev in devs:
		name = dev.get_name()
		ip = dev.get_ip_address()
		type = dev.get_type()
		active = dev.get_link_active()
		print '|%-8.8s|%-10.10s|%-8.8s|%-15.15s|%-15.15s|%-15.15s|' % (name, type, active, ip, 'Unkonwn', 'Unknown')
	print '+--------+----------+--------+---------------+---------------+---------------+'


def magic_list_networks(self, parameter_s=''):
	args = parameter_s.split()
	dev_name = args[0]
	dev = _get_device_by_name(dev_name)
	networks = dev.get_networks()
	print '+----------------+--------+--------+--------+'
	print '| ESSID          |Strength|  Rate  | Crypt. |'
	print '+----------------+--------+--------+--------+'
	for net in networks:
		net_name = net.get_name()
		net_strength = net.get_strength()
		net_rate = net.get_rate() >> 10
		net_encrypted = net.get_encrypted()
		print '|%-16.16s|%-8.8s|%-8.8s|%-8.8s|' % (net_name, net_strength, net_rate, net_encrypted)
	print '+----------------+--------+--------+--------+'


def magic_activate_network(self, parameter_s=''):
	dev_name, net_name = parameter_s.split()
	dev = _get_device_by_name(dev_name)
	net = _get_network_by_name(dev, net_name)
	print 'Activating ...',
	NM.set_active_device(dev, net)
	print 'done!'


def magic_activate_eth(self, parameter_s=''):
	dev = _get_device_by_name(parameter_s)
	print 'Activating ...',
	NM.set_active_device(dev)
	print 'done!'


def magic_activate_wlan(self, parameter_s=''):
	dev_name, net_name = parameter_s.split()
	dev = _get_device_by_name(dev_name)
	net = _get_network_by_name(dev, net_name)
	print 'Activating ...',
	NM.set_active_device(dev, net)
	print 'done!'


def magic_activate_wep(self, parameter_s=''):
	dev_name, net_name, cypher, key, auth_alg = parameter_s.split()
	dev = _get_device_by_name(dev_name)
	net = _get_network_by_name(dev, net_name)
	print 'Activating ...',
	NM.set_active_device(dev, net, cypher, key, auth_alg=auth_alg)
	print 'done!'


def magic_activate_wpa(self, parameter_s=''):
	dev_name, net_name, cypher, key, wpa_version, key_mgt = parameter_s.split()
	dev = _get_device_by_name(dev_name)
	net = _get_network_by_name(dev, net_name)
	print 'Activating ...',
	NM.set_active_device(dev, net, cypher, key, wpa_version=wpa_version, key_mgt=key_mgt)
	print 'done!'


def magic_activate_help(self, parameter_s=''):
	print '\nUsage:\n  activate_eth <device>     (wired network)\n  activate_wlan <device> <essid>    (open wireless network)\n  activate_wep <device> <essid> <cypher> <key> <auth_alg>       (wep wireless)\n  activate_wpa <device> <essid> <cypher> <key> <wpa_version> <key_mgt>      (wpa wireless)\n\n# with cypher in:\n    NM_AUTH_TYPE_WPA_PSK_AUTO\n    NM_AUTH_TYPE_NONE\n    NM_AUTH_TYPE_WEP40\n    NM_AUTH_TYPE_WPA_PSK_TKIP\n    NM_AUTH_TYPE_WPA_PSK_CCMP\n    NM_AUTH_TYPE_WEP104\n    NM_AUTH_TYPE_WPA_EAP\n    NM_AUTH_TYPE_LEAP\n\n# with auth_alg in:\n    IW_AUTH_ALG_OPEN_SYSTEM\n    IW_AUTH_ALG_SHARED_KEY\n    IW_AUTH_ALG_LEAP\n\n##### WPA #####\n# with wpa_version in:\n    IW_AUTH_WPA_VERSION_WPA\n    IW_AUTH_WPA_VERSION_WPA2\n\n# with key_mgt in:\n    IW_AUTH_KEY_MGMT_802_1X\n    IW_AUTH_KEY_MGMT_PSK'

magic_functions = []

for func_name, func in locals().items():
	if func_name.startswith('magic'):
		setattr(InteractiveShell, func_name, func)
		magic_functions.append(func)

ipshell()
