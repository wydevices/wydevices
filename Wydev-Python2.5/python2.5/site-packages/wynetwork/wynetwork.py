# -*- coding: utf-8 -*- 
#
# Description:
#
# WyNetwork Class Definiton
#
#
#
# Changes:
#
# 2012-05-02
# Initial Commit
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

from peewee.misc_utils import MetaSingleton
from peewee.debug import GET_LOGGER
from wydbus import WyDBus

wynetwork_dbus = WyDBus()
log = GET_LOGGER(__name__)

service = 'com.wyplay.WyNetwork'
objectPath = '/com/wyplay/WyNetwork'
ifaceGeneral = 'com.wyplay.Networking.General'
ifaceDevices = 'com.wyplay.Networking.Devices'
ifaceNetworks = 'com.wyplay.Networking.Networks'
ifaceConfigurations = 'com.wyplay.Networking.Configurations'



class NetGeneral(object):

	__metaclass__ = MetaSingleton

	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceGeneral)
		self._IsConnected = self._met.method('IsConnected', '', 'b')
		self._Sleep = self._met.method('Sleep', '', 'i')
		self._WakeUp = self._met.method('WakeUp', '', 'i')
		self._sig = self._wdb.instance(objectPath)
		self._sig.signal('Connected', '', self.onConnected, 0)
		self._sig.signal('Disconnected', '', self.onDisconnected, 0)
		self._obs = []
		log.info('Initialized %s interface proxy', ifaceGeneral)
		return None

	def attach(self, obs):
		self._obs.append(obs)
		return None

	def detach(self, obs):
		self._obs.remove(obs)
		return None

	def onConnected(self):
		for o in self._obs:
			try:
				o.onConnected()
			except Exception, e:
				log.warn('Error calling observer method onConnected: %s', e)
		return None

	def onDisconnected(self):
		for o in self._obs:
			try:
				o.onDisconnected()
			except Exception, e:
				log.warn('Error calling observer method onDisconnected: %s', e)
		return None

	def isConnected(self):
		try:
			return self._IsConnected()
		except Exception, e:
			log.warn('Failed to call IsConnected: %s', e)
		return False

	def sleep(self):
		try:
			return self._Sleep()
		except Exception, e:
			log.warn('Failed to call Sleep: %s', e)
		return 0

	def wakeUp(self):
		try:
			return self._WakeUp()
		except Exception, e:
			log.warn('Failed to call WakeUp: %s', e)
		return 0



class NetDevices(object):

	__metaclass__ = MetaSingleton

	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceDevices)
		self._GetDevices = self._met.method('GetDevices', '', 'as')
		self._GetDeviceInfos = self._met.method('GetDeviceInfos', 's', 'a{ss}')
		self._IsDeviceConnected = self._met.method('IsDeviceConnected', 's', 'b')
		self._SetScanningEnabled = self._met.method('SetScanningEnabled', 'sb', 'b')
		self._sig = self._wdb.instance(objectPath)
		self._sig.signal('DeviceAdded', 's', self.onDeviceAdded, 0)
		self._sig.signal('DeviceRemoved', 's', self.onDeviceRemoved, 0)
		self._sig.signal('DeviceConnected', 's', self.onDeviceConnected, 0)
		self._sig.signal('DeviceDisconnected', 's', self.onDeviceDisconnected, 0)
		self._sig.signal('DeviceConnecting', 's', self.onDeviceConnecting, 0)
		self._sig.signal('DeviceConnectionFailed', 's', self.onDeviceConnectionFailed, 0)
		self._obs = []
		log.info('Initialized %s interface proxy', ifaceDevices)
		return None

	def attach(self, obs):
		self._obs.append(obs)
		return None

	def detach(self, obs):
		self._obs.remove(obs)
		return None

	def onDeviceAdded(self, obj):
		for o in self._obs:
			try:
				o.onDeviceAdded(obj)
			except Exception, e:
				log.warn('Error calling observer method onDeviceAdded: %s', e)
		return None

	def onDeviceRemoved(self, obj):
		for o in self._obs:
			try:
				o.onDeviceRemoved(obj)
			except Exception, e:
				log.warn('Error calling observer method onDeviceRemoved: %s', e)
		return None

	def onDeviceConnected(self, obj):
		for o in self._obs:
			try:
				o.onDeviceConnected(obj)
			except Exception, e:
				log.warn('Error calling observer method onDeviceAdded: %s', e)
		return None

	def onDeviceDisconnected(self, obj):
		for o in self._obs:
			try:
				o.onDeviceDisconnected(obj)
			except Exception, e:
				log.warn('Error calling observer method onDeviceDisconnected: %s', e)
		return None

	def onDeviceConnecting(self, obj):
		for o in self._obs:
			try:
				o.onDeviceConnecting(obj)
			except Exception, e:
				log.warn('Error calling observer method onDeviceConnecting: %s', e)
		return None

	def onDeviceConnectionFailed(self, obj):
		for o in self._obs:
			try:
				o.onDeviceConnectionFailed(obj)
			except Exception, e:
				log.warn('Error calling observer method onDeviceConnectionFailed: %s', e)
		return None

	def getDevices(self):
		try:
			return self._GetDevices()
		except Exception, e:
			log.warn('Failed to call GetDevices: %s', e)
		return []

	def isDeviceConnected(self, dev):
		try:
			return self._IsDeviceConnected(dev)
		except Exception, e:
			log.warn('Failed to call IsDeviceConnected: %s', e)
		return False

	def getDeviceInfos(self, dev):
		try:
			return self._GetDeviceInfos(dev)
		except Exception, e:
			log.warn('Failed to call GetDeviceInfos: %s', e)
		return dict()

	def setScanningEnabled(self, dev, enabled):
		try:
			return self._SetScanningEnabled(dev, enabled)
		except Exception, e:
			log.warn('Failed to call SetScanningEnabled: %s', e)
		return False

	def getDevicesByType(self, type='802.3'):
		devs = []
		for dev in self.getDevices():
			dev_infos = self.getDeviceInfos(dev)
			if dev_infos['networkType'] == type:
				devs.append(dev_infos)
		return devs



class NetNetworks(object):

	__metaclass__ = MetaSingleton

	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceNetworks)
		self._GetNetworks = self._met.method('GetNetworks', 's', 'as')
		self._GetNetworkInfos = self._met.method('GetNetworkInfos', 'ss', 'a{ss}')
		self._sig = self._wdb.instance(objectPath)
		self._sig.signal('NetworkAppeared', 'ss', self.onNetworkAppeared, 0)
		self._sig.signal('NetworkDisappeared', 'ss', self.onNetworkDisappeared, 0)
		self._obs = []
		log.info('Initialized %s interface proxy', ifaceNetworks)
		return None

	def attach(self, obs):
		self._obs.append(obs)
		return None

	def detach(self, obs):
		self._obs.remove(obs)
		return None

	def onNetworkAppeared(self, dev, net):
		for o in self._obs:
			try:
				o.onNetworkAppeared(dev, net)
			except Exception, e:
				log.warn('Error calling observer method onNetworkAppeared: %s', e)
		return None

	def onNetworkDisappeared(self, dev, net):
		for o in self._obs:
			try:
				o.onNetworkDisappeared(dev, net)
			except Exception, e:
				log.warn('Error calling observer method onNetworkDisappeared: %s', e)
		return None

	def getNetworks(self, dev):
		try:
			return self._GetNetworks(dev)
		except Exception, e:
			log.warn('Failed to call GetNetworks: %s', e)
		return []

	def getNetworkInfos(self, dev, net):
		try:
			return self._GetNetworkInfos(dev, net)
		except Exception, e:
			log.warn('Failed to call GetNetworkInfos: %s', e)
		return dict()



class NetConfigurations(object):

	__metaclass__ = MetaSingleton

	def __init__(self):
		self._wdb = wynetwork_dbus
		self._met = self._wdb.reference(service, objectPath, ifaceConfigurations)
		self._GetConfigurations = self._met.method('GetConfigurations', '', 'as')
		self._GetConfigurationInfos = self._met.method('GetConfigurationInfos', 's', 'a{ss}')
		self._SetConfigurationInfos = self._met.method('SetConfigurationInfos', 'sa{ss}', 'b')
		self._AddConfiguration = self._met.method('AddConfiguration', 's', 'b')
		self._DeleteConfiguration = self._met.method('DeleteConfiguration', 's', 'b')
		self._SetActiveConfiguration = self._met.method('SetActiveConfiguration', 's', 'b')
		log.info('Initialized %s interface proxy', ifaceConfigurations)
		return None

	def getConfigurations(self):
		try:
			return self._GetConfigurations()
		except Exception, e:
			log.warn('Failed to call GetConfigurations: %s', e)
		return []

	def getConfigurationInfos(self, name):
		try:
			return self._GetConfigurationInfos(name)
		except Exception, e:
			log.warn('Failed to call GetConfigurationInfos: %s', e)
		return dict()

	def setConfigurationInfos(self, name, props):
		log.debug('config=%s, props=%s', name, props)
		try:
			return self._SetConfigurationInfos(name, props)
		except Exception, e:
			log.warn('Failed to call SetConfigurationInfos: %s', e)
		return False

	def addConfiguration(self, name):
		try:
			return self._AddConfiguration(name)
		except Exception, e:
			log.warn('Failed to call AddConfiguration: %s', e)
		return False

	def deleteConfiguration(self, name):
		try:
			return self._DeleteConfiguration(name)
		except Exception, e:
			log.warn('Failed to call DeleteConfiguration: %s', e)
		return False

	def setActiveConfiguration(self, name):
		log.debug('active=%s', name)
		try:
			return self._SetActiveConfiguration(name)
		except Exception, e:
			log.warn('Failed to call SetActiveConfiguration: %s', e)
		return False

	def getActiveConfigurationInfos(self):
		for cfg in self.getConfigurations():
			cfg_infos = self.getConfigurationInfos(cfg)
			if cfg_infos['active'] == 'true':
				return cfg_infos
		return dict()
