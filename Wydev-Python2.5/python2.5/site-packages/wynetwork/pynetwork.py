# -*- coding: utf-8 -*- 
#
# Description:
#
# WyNetwork Decorators Definitons
#
#
#
# Changes:
#
# 2012-05-02
# Initial Commit
#
# 2012-11-18
# Fix swigs declarations
#
#
# Copyright 2010-2012, WyDev Team.
# Author: Polo35 (polo35580@hotmail.fr)
#
# Licenced under Academic Free License version 3.0
# Review WyGui README & LICENSE files for further details.

import _pynetwork
import new

new_instancemethod = new.instancemethod



try:
	_swig_property = property
except NameError:
	pass

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
	if name == 'thisown':
		return self.this.own(value)
	if name == 'this':
		if type(value).__name__ == 'PySwigObject':
			self.__dict__[name] = value
			return None
	method = class_type.__swig_setmethods__.get(name, None)
	if method:
		return method(self, value)
	if not static or hasattr(self, name):
		self.__dict__[name] = value
	else:
		raise AttributeError('You cannot add attributes to %s' % self)
	return None

def _swig_setattr(self, class_type, name, value):
	return _swig_setattr_nondynamic(self, class_type, name, value, 0)

def _swig_getattr(self, class_type, name):
	if name == 'thisown':
		return self.this.own()
	method = class_type.__swig_getmethods__.get(name, None)
	if method:
		return method(self)
	raise AttributeError, name
	return None

def _swig_repr(self):
	try:
		strthis = 'proxy of ' + self.this.__repr__()
	except:
		strthis = ''
	return '<%s.%s; %s >' % (self.__class__.__module__, self.__class__.__name__, strthis)



import types
try:
	_object = types.ObjectType
	_newclass = 1
except AttributeError:
	class _object():
		pass
	_newclass = 0
del types



class PySwigIterator(_object):

	__swig_setmethods__ = {}
	__setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)

	__swig_getmethods__ = {}
	__getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr

	__swig_destroy__ = _pynetwork.delete_PySwigIterator

	def __del__(self):
		return None

	def value(*args):
		return _pynetwork.PySwigIterator_value(*args)

	def incr(*args):
		return _pynetwork.PySwigIterator_incr(*args)

	def decr(*args):
		return _pynetwork.PySwigIterator_decr(*args)

	def distance(*args):
		return _pynetwork.PySwigIterator_distance(*args)

	def equal(*args):
		return _pynetwork.PySwigIterator_equal(*args)

	def copy(*args):
		return _pynetwork.PySwigIterator_copy(*args)

	def next(*args):
		return _pynetwork.PySwigIterator_next(*args)

	def previous(*args):
		return _pynetwork.PySwigIterator_previous(*args)

	def advance(*args):
		return _pynetwork.PySwigIterator_advance(*args)

	def __eq__(*args):
		return _pynetwork.PySwigIterator___eq__(*args)

	def __ne__(*args):
		return _pynetwork.PySwigIterator___ne__(*args)

	def __iadd__(*args):
		return _pynetwork.PySwigIterator___iadd__(*args)

	def __isub__(*args):
		return _pynetwork.PySwigIterator___isub__(*args)

	def __add__(*args):
		return _pynetwork.PySwigIterator___add__(*args)

	def __sub__(*args):
		return _pynetwork.PySwigIterator___sub__(*args)

	def __iter__(self):
		return self



PySwigIterator_swigregister = _pynetwork.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)



class vectors(_object):

	__swig_setmethods__ = {}
	__setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)

	__swig_getmethods__ = {}
	__getattr__ = lambda self, name: _swig_getattr(self, vectors, name)

	__repr__ = _swig_repr

	def iterator(*args):
		return _pynetwork.vectors_iterator(*args)

	def __iter__(self):
		return self.iterator()

	def __nonzero__(*args):
		return _pynetwork.vectors___nonzero__(*args)

	def __len__(*args):
		return _pynetwork.vectors___len__(*args)

	def pop(*args):
		return _pynetwork.vectors_pop(*args)

	def __getslice__(*args):
		return _pynetwork.vectors___getslice__(*args)

	def __setslice__(*args):
		return _pynetwork.vectors___setslice__(*args)

	def __delslice__(*args):
		return _pynetwork.vectors___delslice__(*args)

	def __delitem__(*args):
		return _pynetwork.vectors___delitem__(*args)

	def __getitem__(*args):
		return _pynetwork.vectors___getitem__(*args)

	def __setitem__(*args):
		return _pynetwork.vectors___setitem__(*args)

	def append(*args):
		return _pynetwork.vectors_append(*args)

	def empty(*args):
		return _pynetwork.vectors_empty(*args)

	def size(*args):
		return _pynetwork.vectors_size(*args)

	def clear(*args):
		return _pynetwork.vectors_clear(*args)

	def swap(*args):
		return _pynetwork.vectors_swap(*args)

	def get_allocator(*args):
		return _pynetwork.vectors_get_allocator(*args)

	def begin(*args):
		return _pynetwork.vectors_begin(*args)

	def end(*args):
		return _pynetwork.vectors_end(*args)

	def rbegin(*args):
		return _pynetwork.vectors_rbegin(*args)

	def rend(*args):
		return _pynetwork.vectors_rend(*args)

	def pop_back(*args):
		return _pynetwork.vectors_pop_back(*args)

	def erase(*args):
		return _pynetwork.vectors_erase(*args)

	def __init__(self, *args):
		this = _pynetwork.new_vectors(*args)
		try:
			self.this.append(this)
		except:
			self.this = this

	def push_back(*args):
		return _pynetwork.vectors_push_back(*args)

	def front(*args):
		return _pynetwork.vectors_front(*args)

	def back(*args):
		return _pynetwork.vectors_back(*args)

	def assign(*args):
		return _pynetwork.vectors_assign(*args)

	def resize(*args):
		return _pynetwork.vectors_resize(*args)

	def insert(*args):
		return _pynetwork.vectors_insert(*args)

	def reserve(*args):
		return _pynetwork.vectors_reserve(*args)

	def capacity(*args):
		return _pynetwork.vectors_capacity(*args)

	__swig_destroy__ = _pynetwork.delete_vectors

	def __del__(self):
		return None



vectors_swigregister = _pynetwork.vectors_swigregister
vectors_swigregister(vectors)



class WyNetworkModule(_object):

	__swig_setmethods__ = {}
	__setattr__ = lambda self, name, value: _swig_setattr(self, WyNetworkModule, name, value)

	__swig_getmethods__ = {}
	__getattr__ = lambda self, name: _swig_getattr(self, WyNetworkModule, name)

	def __init__(self):
		raise AttributeError, 'No constructor defined'

	__repr__ = _swig_repr

	__swig_getmethods__['init'] = lambda x: _pynetwork.WyNetworkModule_init
	if _newclass:init = staticmethod(_pynetwork.WyNetworkModule_init)

	__swig_getmethods__['instance'] = lambda x: _pynetwork.WyNetworkModule_instance
	if _newclass:instance = staticmethod(_pynetwork.WyNetworkModule_instance)

	def getConfigurations(*args):
		return _pynetwork.WyNetworkModule_getConfigurations(*args)

	def getConfiguration(*args):
		return _pynetwork.WyNetworkModule_getConfiguration(*args)

	def getNetworkCapabilities(*args):
		return _pynetwork.WyNetworkModule_getNetworkCapabilities(*args)

	def setConfiguration(*args):
		return _pynetwork.WyNetworkModule_setConfiguration(*args)

	def setActiveConfiguration(*args):
		return _pynetwork.WyNetworkModule_setActiveConfiguration(*args)

	__swig_destroy__ = _pynetwork.delete_WyNetworkModule

	def __del__(self):
		return None



WyNetworkModule_swigregister = _pynetwork.WyNetworkModule_swigregister
WyNetworkModule_swigregister(WyNetworkModule)
WyNetworkModule_init = _pynetwork.WyNetworkModule_init
WyNetworkModule_instance = _pynetwork.WyNetworkModule_instance
